
Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  08040200  08040200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08043be4  08043be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043cb4  08043cb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08043cb4  08043cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08043cbc  08043cbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043cbc  08043cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043cc0  08043cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08043cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08043d34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08043d34  00020128  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000078e4  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000160f  00000000  00000000  00027982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  00028f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  00029710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002747d  00000000  00000000  00029df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000875c  00000000  00000000  0005126d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f19ab  00000000  00000000  000599c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014b374  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002504  00000000  00000000  0014b3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08040200 <__do_global_dtors_aux>:
 8040200:	b510      	push	{r4, lr}
 8040202:	4c05      	ldr	r4, [pc, #20]	; (8040218 <__do_global_dtors_aux+0x18>)
 8040204:	7823      	ldrb	r3, [r4, #0]
 8040206:	b933      	cbnz	r3, 8040216 <__do_global_dtors_aux+0x16>
 8040208:	4b04      	ldr	r3, [pc, #16]	; (804021c <__do_global_dtors_aux+0x1c>)
 804020a:	b113      	cbz	r3, 8040212 <__do_global_dtors_aux+0x12>
 804020c:	4804      	ldr	r0, [pc, #16]	; (8040220 <__do_global_dtors_aux+0x20>)
 804020e:	f3af 8000 	nop.w
 8040212:	2301      	movs	r3, #1
 8040214:	7023      	strb	r3, [r4, #0]
 8040216:	bd10      	pop	{r4, pc}
 8040218:	20000070 	.word	0x20000070
 804021c:	00000000 	.word	0x00000000
 8040220:	08043bcc 	.word	0x08043bcc

08040224 <frame_dummy>:
 8040224:	b508      	push	{r3, lr}
 8040226:	4b03      	ldr	r3, [pc, #12]	; (8040234 <frame_dummy+0x10>)
 8040228:	b11b      	cbz	r3, 8040232 <frame_dummy+0xe>
 804022a:	4903      	ldr	r1, [pc, #12]	; (8040238 <frame_dummy+0x14>)
 804022c:	4803      	ldr	r0, [pc, #12]	; (804023c <frame_dummy+0x18>)
 804022e:	f3af 8000 	nop.w
 8040232:	bd08      	pop	{r3, pc}
 8040234:	00000000 	.word	0x00000000
 8040238:	20000074 	.word	0x20000074
 804023c:	08043bcc 	.word	0x08043bcc

08040240 <memchr>:
 8040240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8040244:	2a10      	cmp	r2, #16
 8040246:	db2b      	blt.n	80402a0 <memchr+0x60>
 8040248:	f010 0f07 	tst.w	r0, #7
 804024c:	d008      	beq.n	8040260 <memchr+0x20>
 804024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040252:	3a01      	subs	r2, #1
 8040254:	428b      	cmp	r3, r1
 8040256:	d02d      	beq.n	80402b4 <memchr+0x74>
 8040258:	f010 0f07 	tst.w	r0, #7
 804025c:	b342      	cbz	r2, 80402b0 <memchr+0x70>
 804025e:	d1f6      	bne.n	804024e <memchr+0xe>
 8040260:	b4f0      	push	{r4, r5, r6, r7}
 8040262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804026a:	f022 0407 	bic.w	r4, r2, #7
 804026e:	f07f 0700 	mvns.w	r7, #0
 8040272:	2300      	movs	r3, #0
 8040274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040278:	3c08      	subs	r4, #8
 804027a:	ea85 0501 	eor.w	r5, r5, r1
 804027e:	ea86 0601 	eor.w	r6, r6, r1
 8040282:	fa85 f547 	uadd8	r5, r5, r7
 8040286:	faa3 f587 	sel	r5, r3, r7
 804028a:	fa86 f647 	uadd8	r6, r6, r7
 804028e:	faa5 f687 	sel	r6, r5, r7
 8040292:	b98e      	cbnz	r6, 80402b8 <memchr+0x78>
 8040294:	d1ee      	bne.n	8040274 <memchr+0x34>
 8040296:	bcf0      	pop	{r4, r5, r6, r7}
 8040298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804029c:	f002 0207 	and.w	r2, r2, #7
 80402a0:	b132      	cbz	r2, 80402b0 <memchr+0x70>
 80402a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402a6:	3a01      	subs	r2, #1
 80402a8:	ea83 0301 	eor.w	r3, r3, r1
 80402ac:	b113      	cbz	r3, 80402b4 <memchr+0x74>
 80402ae:	d1f8      	bne.n	80402a2 <memchr+0x62>
 80402b0:	2000      	movs	r0, #0
 80402b2:	4770      	bx	lr
 80402b4:	3801      	subs	r0, #1
 80402b6:	4770      	bx	lr
 80402b8:	2d00      	cmp	r5, #0
 80402ba:	bf06      	itte	eq
 80402bc:	4635      	moveq	r5, r6
 80402be:	3803      	subeq	r0, #3
 80402c0:	3807      	subne	r0, #7
 80402c2:	f015 0f01 	tst.w	r5, #1
 80402c6:	d107      	bne.n	80402d8 <memchr+0x98>
 80402c8:	3001      	adds	r0, #1
 80402ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80402ce:	bf02      	ittt	eq
 80402d0:	3001      	addeq	r0, #1
 80402d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80402d6:	3001      	addeq	r0, #1
 80402d8:	bcf0      	pop	{r4, r5, r6, r7}
 80402da:	3801      	subs	r0, #1
 80402dc:	4770      	bx	lr
 80402de:	bf00      	nop

080402e0 <__aeabi_uldivmod>:
 80402e0:	b953      	cbnz	r3, 80402f8 <__aeabi_uldivmod+0x18>
 80402e2:	b94a      	cbnz	r2, 80402f8 <__aeabi_uldivmod+0x18>
 80402e4:	2900      	cmp	r1, #0
 80402e6:	bf08      	it	eq
 80402e8:	2800      	cmpeq	r0, #0
 80402ea:	bf1c      	itt	ne
 80402ec:	f04f 31ff 	movne.w	r1, #4294967295
 80402f0:	f04f 30ff 	movne.w	r0, #4294967295
 80402f4:	f000 b974 	b.w	80405e0 <__aeabi_idiv0>
 80402f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040300:	f000 f806 	bl	8040310 <__udivmoddi4>
 8040304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 804030c:	b004      	add	sp, #16
 804030e:	4770      	bx	lr

08040310 <__udivmoddi4>:
 8040310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8040314:	9d08      	ldr	r5, [sp, #32]
 8040316:	4604      	mov	r4, r0
 8040318:	468e      	mov	lr, r1
 804031a:	2b00      	cmp	r3, #0
 804031c:	d14d      	bne.n	80403ba <__udivmoddi4+0xaa>
 804031e:	428a      	cmp	r2, r1
 8040320:	4694      	mov	ip, r2
 8040322:	d969      	bls.n	80403f8 <__udivmoddi4+0xe8>
 8040324:	fab2 f282 	clz	r2, r2
 8040328:	b152      	cbz	r2, 8040340 <__udivmoddi4+0x30>
 804032a:	fa01 f302 	lsl.w	r3, r1, r2
 804032e:	f1c2 0120 	rsb	r1, r2, #32
 8040332:	fa20 f101 	lsr.w	r1, r0, r1
 8040336:	fa0c fc02 	lsl.w	ip, ip, r2
 804033a:	ea41 0e03 	orr.w	lr, r1, r3
 804033e:	4094      	lsls	r4, r2
 8040340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8040344:	0c21      	lsrs	r1, r4, #16
 8040346:	fbbe f6f8 	udiv	r6, lr, r8
 804034a:	fa1f f78c 	uxth.w	r7, ip
 804034e:	fb08 e316 	mls	r3, r8, r6, lr
 8040352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040356:	fb06 f107 	mul.w	r1, r6, r7
 804035a:	4299      	cmp	r1, r3
 804035c:	d90a      	bls.n	8040374 <__udivmoddi4+0x64>
 804035e:	eb1c 0303 	adds.w	r3, ip, r3
 8040362:	f106 30ff 	add.w	r0, r6, #4294967295
 8040366:	f080 811f 	bcs.w	80405a8 <__udivmoddi4+0x298>
 804036a:	4299      	cmp	r1, r3
 804036c:	f240 811c 	bls.w	80405a8 <__udivmoddi4+0x298>
 8040370:	3e02      	subs	r6, #2
 8040372:	4463      	add	r3, ip
 8040374:	1a5b      	subs	r3, r3, r1
 8040376:	b2a4      	uxth	r4, r4
 8040378:	fbb3 f0f8 	udiv	r0, r3, r8
 804037c:	fb08 3310 	mls	r3, r8, r0, r3
 8040380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040384:	fb00 f707 	mul.w	r7, r0, r7
 8040388:	42a7      	cmp	r7, r4
 804038a:	d90a      	bls.n	80403a2 <__udivmoddi4+0x92>
 804038c:	eb1c 0404 	adds.w	r4, ip, r4
 8040390:	f100 33ff 	add.w	r3, r0, #4294967295
 8040394:	f080 810a 	bcs.w	80405ac <__udivmoddi4+0x29c>
 8040398:	42a7      	cmp	r7, r4
 804039a:	f240 8107 	bls.w	80405ac <__udivmoddi4+0x29c>
 804039e:	4464      	add	r4, ip
 80403a0:	3802      	subs	r0, #2
 80403a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80403a6:	1be4      	subs	r4, r4, r7
 80403a8:	2600      	movs	r6, #0
 80403aa:	b11d      	cbz	r5, 80403b4 <__udivmoddi4+0xa4>
 80403ac:	40d4      	lsrs	r4, r2
 80403ae:	2300      	movs	r3, #0
 80403b0:	e9c5 4300 	strd	r4, r3, [r5]
 80403b4:	4631      	mov	r1, r6
 80403b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403ba:	428b      	cmp	r3, r1
 80403bc:	d909      	bls.n	80403d2 <__udivmoddi4+0xc2>
 80403be:	2d00      	cmp	r5, #0
 80403c0:	f000 80ef 	beq.w	80405a2 <__udivmoddi4+0x292>
 80403c4:	2600      	movs	r6, #0
 80403c6:	e9c5 0100 	strd	r0, r1, [r5]
 80403ca:	4630      	mov	r0, r6
 80403cc:	4631      	mov	r1, r6
 80403ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80403d2:	fab3 f683 	clz	r6, r3
 80403d6:	2e00      	cmp	r6, #0
 80403d8:	d14a      	bne.n	8040470 <__udivmoddi4+0x160>
 80403da:	428b      	cmp	r3, r1
 80403dc:	d302      	bcc.n	80403e4 <__udivmoddi4+0xd4>
 80403de:	4282      	cmp	r2, r0
 80403e0:	f200 80f9 	bhi.w	80405d6 <__udivmoddi4+0x2c6>
 80403e4:	1a84      	subs	r4, r0, r2
 80403e6:	eb61 0303 	sbc.w	r3, r1, r3
 80403ea:	2001      	movs	r0, #1
 80403ec:	469e      	mov	lr, r3
 80403ee:	2d00      	cmp	r5, #0
 80403f0:	d0e0      	beq.n	80403b4 <__udivmoddi4+0xa4>
 80403f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403f6:	e7dd      	b.n	80403b4 <__udivmoddi4+0xa4>
 80403f8:	b902      	cbnz	r2, 80403fc <__udivmoddi4+0xec>
 80403fa:	deff      	udf	#255	; 0xff
 80403fc:	fab2 f282 	clz	r2, r2
 8040400:	2a00      	cmp	r2, #0
 8040402:	f040 8092 	bne.w	804052a <__udivmoddi4+0x21a>
 8040406:	eba1 010c 	sub.w	r1, r1, ip
 804040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 804040e:	fa1f fe8c 	uxth.w	lr, ip
 8040412:	2601      	movs	r6, #1
 8040414:	0c20      	lsrs	r0, r4, #16
 8040416:	fbb1 f3f7 	udiv	r3, r1, r7
 804041a:	fb07 1113 	mls	r1, r7, r3, r1
 804041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040422:	fb0e f003 	mul.w	r0, lr, r3
 8040426:	4288      	cmp	r0, r1
 8040428:	d908      	bls.n	804043c <__udivmoddi4+0x12c>
 804042a:	eb1c 0101 	adds.w	r1, ip, r1
 804042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8040432:	d202      	bcs.n	804043a <__udivmoddi4+0x12a>
 8040434:	4288      	cmp	r0, r1
 8040436:	f200 80cb 	bhi.w	80405d0 <__udivmoddi4+0x2c0>
 804043a:	4643      	mov	r3, r8
 804043c:	1a09      	subs	r1, r1, r0
 804043e:	b2a4      	uxth	r4, r4
 8040440:	fbb1 f0f7 	udiv	r0, r1, r7
 8040444:	fb07 1110 	mls	r1, r7, r0, r1
 8040448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 804044c:	fb0e fe00 	mul.w	lr, lr, r0
 8040450:	45a6      	cmp	lr, r4
 8040452:	d908      	bls.n	8040466 <__udivmoddi4+0x156>
 8040454:	eb1c 0404 	adds.w	r4, ip, r4
 8040458:	f100 31ff 	add.w	r1, r0, #4294967295
 804045c:	d202      	bcs.n	8040464 <__udivmoddi4+0x154>
 804045e:	45a6      	cmp	lr, r4
 8040460:	f200 80bb 	bhi.w	80405da <__udivmoddi4+0x2ca>
 8040464:	4608      	mov	r0, r1
 8040466:	eba4 040e 	sub.w	r4, r4, lr
 804046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804046e:	e79c      	b.n	80403aa <__udivmoddi4+0x9a>
 8040470:	f1c6 0720 	rsb	r7, r6, #32
 8040474:	40b3      	lsls	r3, r6
 8040476:	fa22 fc07 	lsr.w	ip, r2, r7
 804047a:	ea4c 0c03 	orr.w	ip, ip, r3
 804047e:	fa20 f407 	lsr.w	r4, r0, r7
 8040482:	fa01 f306 	lsl.w	r3, r1, r6
 8040486:	431c      	orrs	r4, r3
 8040488:	40f9      	lsrs	r1, r7
 804048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804048e:	fa00 f306 	lsl.w	r3, r0, r6
 8040492:	fbb1 f8f9 	udiv	r8, r1, r9
 8040496:	0c20      	lsrs	r0, r4, #16
 8040498:	fa1f fe8c 	uxth.w	lr, ip
 804049c:	fb09 1118 	mls	r1, r9, r8, r1
 80404a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80404a4:	fb08 f00e 	mul.w	r0, r8, lr
 80404a8:	4288      	cmp	r0, r1
 80404aa:	fa02 f206 	lsl.w	r2, r2, r6
 80404ae:	d90b      	bls.n	80404c8 <__udivmoddi4+0x1b8>
 80404b0:	eb1c 0101 	adds.w	r1, ip, r1
 80404b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80404b8:	f080 8088 	bcs.w	80405cc <__udivmoddi4+0x2bc>
 80404bc:	4288      	cmp	r0, r1
 80404be:	f240 8085 	bls.w	80405cc <__udivmoddi4+0x2bc>
 80404c2:	f1a8 0802 	sub.w	r8, r8, #2
 80404c6:	4461      	add	r1, ip
 80404c8:	1a09      	subs	r1, r1, r0
 80404ca:	b2a4      	uxth	r4, r4
 80404cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80404d0:	fb09 1110 	mls	r1, r9, r0, r1
 80404d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80404d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80404dc:	458e      	cmp	lr, r1
 80404de:	d908      	bls.n	80404f2 <__udivmoddi4+0x1e2>
 80404e0:	eb1c 0101 	adds.w	r1, ip, r1
 80404e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80404e8:	d26c      	bcs.n	80405c4 <__udivmoddi4+0x2b4>
 80404ea:	458e      	cmp	lr, r1
 80404ec:	d96a      	bls.n	80405c4 <__udivmoddi4+0x2b4>
 80404ee:	3802      	subs	r0, #2
 80404f0:	4461      	add	r1, ip
 80404f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404f6:	fba0 9402 	umull	r9, r4, r0, r2
 80404fa:	eba1 010e 	sub.w	r1, r1, lr
 80404fe:	42a1      	cmp	r1, r4
 8040500:	46c8      	mov	r8, r9
 8040502:	46a6      	mov	lr, r4
 8040504:	d356      	bcc.n	80405b4 <__udivmoddi4+0x2a4>
 8040506:	d053      	beq.n	80405b0 <__udivmoddi4+0x2a0>
 8040508:	b15d      	cbz	r5, 8040522 <__udivmoddi4+0x212>
 804050a:	ebb3 0208 	subs.w	r2, r3, r8
 804050e:	eb61 010e 	sbc.w	r1, r1, lr
 8040512:	fa01 f707 	lsl.w	r7, r1, r7
 8040516:	fa22 f306 	lsr.w	r3, r2, r6
 804051a:	40f1      	lsrs	r1, r6
 804051c:	431f      	orrs	r7, r3
 804051e:	e9c5 7100 	strd	r7, r1, [r5]
 8040522:	2600      	movs	r6, #0
 8040524:	4631      	mov	r1, r6
 8040526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804052a:	f1c2 0320 	rsb	r3, r2, #32
 804052e:	40d8      	lsrs	r0, r3
 8040530:	fa0c fc02 	lsl.w	ip, ip, r2
 8040534:	fa21 f303 	lsr.w	r3, r1, r3
 8040538:	4091      	lsls	r1, r2
 804053a:	4301      	orrs	r1, r0
 804053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040540:	fa1f fe8c 	uxth.w	lr, ip
 8040544:	fbb3 f0f7 	udiv	r0, r3, r7
 8040548:	fb07 3610 	mls	r6, r7, r0, r3
 804054c:	0c0b      	lsrs	r3, r1, #16
 804054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040552:	fb00 f60e 	mul.w	r6, r0, lr
 8040556:	429e      	cmp	r6, r3
 8040558:	fa04 f402 	lsl.w	r4, r4, r2
 804055c:	d908      	bls.n	8040570 <__udivmoddi4+0x260>
 804055e:	eb1c 0303 	adds.w	r3, ip, r3
 8040562:	f100 38ff 	add.w	r8, r0, #4294967295
 8040566:	d22f      	bcs.n	80405c8 <__udivmoddi4+0x2b8>
 8040568:	429e      	cmp	r6, r3
 804056a:	d92d      	bls.n	80405c8 <__udivmoddi4+0x2b8>
 804056c:	3802      	subs	r0, #2
 804056e:	4463      	add	r3, ip
 8040570:	1b9b      	subs	r3, r3, r6
 8040572:	b289      	uxth	r1, r1
 8040574:	fbb3 f6f7 	udiv	r6, r3, r7
 8040578:	fb07 3316 	mls	r3, r7, r6, r3
 804057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040580:	fb06 f30e 	mul.w	r3, r6, lr
 8040584:	428b      	cmp	r3, r1
 8040586:	d908      	bls.n	804059a <__udivmoddi4+0x28a>
 8040588:	eb1c 0101 	adds.w	r1, ip, r1
 804058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040590:	d216      	bcs.n	80405c0 <__udivmoddi4+0x2b0>
 8040592:	428b      	cmp	r3, r1
 8040594:	d914      	bls.n	80405c0 <__udivmoddi4+0x2b0>
 8040596:	3e02      	subs	r6, #2
 8040598:	4461      	add	r1, ip
 804059a:	1ac9      	subs	r1, r1, r3
 804059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80405a0:	e738      	b.n	8040414 <__udivmoddi4+0x104>
 80405a2:	462e      	mov	r6, r5
 80405a4:	4628      	mov	r0, r5
 80405a6:	e705      	b.n	80403b4 <__udivmoddi4+0xa4>
 80405a8:	4606      	mov	r6, r0
 80405aa:	e6e3      	b.n	8040374 <__udivmoddi4+0x64>
 80405ac:	4618      	mov	r0, r3
 80405ae:	e6f8      	b.n	80403a2 <__udivmoddi4+0x92>
 80405b0:	454b      	cmp	r3, r9
 80405b2:	d2a9      	bcs.n	8040508 <__udivmoddi4+0x1f8>
 80405b4:	ebb9 0802 	subs.w	r8, r9, r2
 80405b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80405bc:	3801      	subs	r0, #1
 80405be:	e7a3      	b.n	8040508 <__udivmoddi4+0x1f8>
 80405c0:	4646      	mov	r6, r8
 80405c2:	e7ea      	b.n	804059a <__udivmoddi4+0x28a>
 80405c4:	4620      	mov	r0, r4
 80405c6:	e794      	b.n	80404f2 <__udivmoddi4+0x1e2>
 80405c8:	4640      	mov	r0, r8
 80405ca:	e7d1      	b.n	8040570 <__udivmoddi4+0x260>
 80405cc:	46d0      	mov	r8, sl
 80405ce:	e77b      	b.n	80404c8 <__udivmoddi4+0x1b8>
 80405d0:	3b02      	subs	r3, #2
 80405d2:	4461      	add	r1, ip
 80405d4:	e732      	b.n	804043c <__udivmoddi4+0x12c>
 80405d6:	4630      	mov	r0, r6
 80405d8:	e709      	b.n	80403ee <__udivmoddi4+0xde>
 80405da:	4464      	add	r4, ip
 80405dc:	3802      	subs	r0, #2
 80405de:	e742      	b.n	8040466 <__udivmoddi4+0x156>

080405e0 <__aeabi_idiv0>:
 80405e0:	4770      	bx	lr
 80405e2:	bf00      	nop

080405e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80405e4:	b580      	push	{r7, lr}
 80405e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80405e8:	f000 fa99 	bl	8040b1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80405ec:	f000 f822 	bl	8040634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405f0:	f000 f8ca 	bl	8040788 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80405f4:	f000 f898 	bl	8040728 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application(%d.%d)\n", APP_Version[0], APP_Version[1] );
 80405f8:	2300      	movs	r3, #0
 80405fa:	2201      	movs	r2, #1
 80405fc:	4619      	mov	r1, r3
 80405fe:	480b      	ldr	r0, [pc, #44]	; (804062c <main+0x48>)
 8040600:	f002 fb56 	bl	8042cb0 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_SET );
 8040604:	2201      	movs	r2, #1
 8040606:	2180      	movs	r1, #128	; 0x80
 8040608:	4809      	ldr	r0, [pc, #36]	; (8040630 <main+0x4c>)
 804060a:	f000 fd9b 	bl	8041144 <HAL_GPIO_WritePin>
    HAL_Delay(1000);    //1 Sec delay
 804060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8040612:	f000 fae1 	bl	8040bd8 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_RESET );
 8040616:	2200      	movs	r2, #0
 8040618:	2180      	movs	r1, #128	; 0x80
 804061a:	4805      	ldr	r0, [pc, #20]	; (8040630 <main+0x4c>)
 804061c:	f000 fd92 	bl	8041144 <HAL_GPIO_WritePin>
	HAL_Delay(1000);	//1 Sec delay
 8040620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8040624:	f000 fad8 	bl	8040bd8 <HAL_Delay>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_7, GPIO_PIN_SET );
 8040628:	e7ec      	b.n	8040604 <main+0x20>
 804062a:	bf00      	nop
 804062c:	08043be4 	.word	0x08043be4
 8040630:	40020400 	.word	0x40020400

08040634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040634:	b580      	push	{r7, lr}
 8040636:	b0b8      	sub	sp, #224	; 0xe0
 8040638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804063a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 804063e:	2234      	movs	r2, #52	; 0x34
 8040640:	2100      	movs	r1, #0
 8040642:	4618      	mov	r0, r3
 8040644:	f002 fb2c 	bl	8042ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040648:	f107 0398 	add.w	r3, r7, #152	; 0x98
 804064c:	2200      	movs	r2, #0
 804064e:	601a      	str	r2, [r3, #0]
 8040650:	605a      	str	r2, [r3, #4]
 8040652:	609a      	str	r2, [r3, #8]
 8040654:	60da      	str	r2, [r3, #12]
 8040656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040658:	f107 0308 	add.w	r3, r7, #8
 804065c:	2290      	movs	r2, #144	; 0x90
 804065e:	2100      	movs	r1, #0
 8040660:	4618      	mov	r0, r3
 8040662:	f002 fb1d 	bl	8042ca0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8040666:	4b2e      	ldr	r3, [pc, #184]	; (8040720 <SystemClock_Config+0xec>)
 8040668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804066a:	4a2d      	ldr	r2, [pc, #180]	; (8040720 <SystemClock_Config+0xec>)
 804066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040670:	6413      	str	r3, [r2, #64]	; 0x40
 8040672:	4b2b      	ldr	r3, [pc, #172]	; (8040720 <SystemClock_Config+0xec>)
 8040674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804067a:	607b      	str	r3, [r7, #4]
 804067c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 804067e:	4b29      	ldr	r3, [pc, #164]	; (8040724 <SystemClock_Config+0xf0>)
 8040680:	681b      	ldr	r3, [r3, #0]
 8040682:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8040686:	4a27      	ldr	r2, [pc, #156]	; (8040724 <SystemClock_Config+0xf0>)
 8040688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804068c:	6013      	str	r3, [r2, #0]
 804068e:	4b25      	ldr	r3, [pc, #148]	; (8040724 <SystemClock_Config+0xf0>)
 8040690:	681b      	ldr	r3, [r3, #0]
 8040692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040696:	603b      	str	r3, [r7, #0]
 8040698:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 804069a:	2302      	movs	r3, #2
 804069c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80406a0:	2301      	movs	r3, #1
 80406a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80406a6:	2310      	movs	r3, #16
 80406a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80406ac:	2300      	movs	r3, #0
 80406ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80406b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80406b6:	4618      	mov	r0, r3
 80406b8:	f000 fd5e 	bl	8041178 <HAL_RCC_OscConfig>
 80406bc:	4603      	mov	r3, r0
 80406be:	2b00      	cmp	r3, #0
 80406c0:	d001      	beq.n	80406c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80406c2:	f000 f8b1 	bl	8040828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80406c6:	230f      	movs	r3, #15
 80406c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80406cc:	2300      	movs	r3, #0
 80406ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80406d2:	2300      	movs	r3, #0
 80406d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80406d8:	2300      	movs	r3, #0
 80406da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80406de:	2300      	movs	r3, #0
 80406e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80406e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80406e8:	2100      	movs	r1, #0
 80406ea:	4618      	mov	r0, r3
 80406ec:	f000 fff2 	bl	80416d4 <HAL_RCC_ClockConfig>
 80406f0:	4603      	mov	r3, r0
 80406f2:	2b00      	cmp	r3, #0
 80406f4:	d001      	beq.n	80406fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80406f6:	f000 f897 	bl	8040828 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80406fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80406fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8040700:	2300      	movs	r3, #0
 8040702:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040704:	f107 0308 	add.w	r3, r7, #8
 8040708:	4618      	mov	r0, r3
 804070a:	f001 f9c9 	bl	8041aa0 <HAL_RCCEx_PeriphCLKConfig>
 804070e:	4603      	mov	r3, r0
 8040710:	2b00      	cmp	r3, #0
 8040712:	d001      	beq.n	8040718 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8040714:	f000 f888 	bl	8040828 <Error_Handler>
  }
}
 8040718:	bf00      	nop
 804071a:	37e0      	adds	r7, #224	; 0xe0
 804071c:	46bd      	mov	sp, r7
 804071e:	bd80      	pop	{r7, pc}
 8040720:	40023800 	.word	0x40023800
 8040724:	40007000 	.word	0x40007000

08040728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8040728:	b580      	push	{r7, lr}
 804072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 804072c:	4b14      	ldr	r3, [pc, #80]	; (8040780 <MX_USART3_UART_Init+0x58>)
 804072e:	4a15      	ldr	r2, [pc, #84]	; (8040784 <MX_USART3_UART_Init+0x5c>)
 8040730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8040732:	4b13      	ldr	r3, [pc, #76]	; (8040780 <MX_USART3_UART_Init+0x58>)
 8040734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 804073a:	4b11      	ldr	r3, [pc, #68]	; (8040780 <MX_USART3_UART_Init+0x58>)
 804073c:	2200      	movs	r2, #0
 804073e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8040740:	4b0f      	ldr	r3, [pc, #60]	; (8040780 <MX_USART3_UART_Init+0x58>)
 8040742:	2200      	movs	r2, #0
 8040744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8040746:	4b0e      	ldr	r3, [pc, #56]	; (8040780 <MX_USART3_UART_Init+0x58>)
 8040748:	2200      	movs	r2, #0
 804074a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 804074c:	4b0c      	ldr	r3, [pc, #48]	; (8040780 <MX_USART3_UART_Init+0x58>)
 804074e:	220c      	movs	r2, #12
 8040750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040752:	4b0b      	ldr	r3, [pc, #44]	; (8040780 <MX_USART3_UART_Init+0x58>)
 8040754:	2200      	movs	r2, #0
 8040756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8040758:	4b09      	ldr	r3, [pc, #36]	; (8040780 <MX_USART3_UART_Init+0x58>)
 804075a:	2200      	movs	r2, #0
 804075c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804075e:	4b08      	ldr	r3, [pc, #32]	; (8040780 <MX_USART3_UART_Init+0x58>)
 8040760:	2200      	movs	r2, #0
 8040762:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040764:	4b06      	ldr	r3, [pc, #24]	; (8040780 <MX_USART3_UART_Init+0x58>)
 8040766:	2200      	movs	r2, #0
 8040768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 804076a:	4805      	ldr	r0, [pc, #20]	; (8040780 <MX_USART3_UART_Init+0x58>)
 804076c:	f001 fdc0 	bl	80422f0 <HAL_UART_Init>
 8040770:	4603      	mov	r3, r0
 8040772:	2b00      	cmp	r3, #0
 8040774:	d001      	beq.n	804077a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8040776:	f000 f857 	bl	8040828 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 804077a:	bf00      	nop
 804077c:	bd80      	pop	{r7, pc}
 804077e:	bf00      	nop
 8040780:	2000008c 	.word	0x2000008c
 8040784:	40004800 	.word	0x40004800

08040788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040788:	b580      	push	{r7, lr}
 804078a:	b088      	sub	sp, #32
 804078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804078e:	f107 030c 	add.w	r3, r7, #12
 8040792:	2200      	movs	r2, #0
 8040794:	601a      	str	r2, [r3, #0]
 8040796:	605a      	str	r2, [r3, #4]
 8040798:	609a      	str	r2, [r3, #8]
 804079a:	60da      	str	r2, [r3, #12]
 804079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804079e:	4b17      	ldr	r3, [pc, #92]	; (80407fc <MX_GPIO_Init+0x74>)
 80407a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407a2:	4a16      	ldr	r2, [pc, #88]	; (80407fc <MX_GPIO_Init+0x74>)
 80407a4:	f043 0308 	orr.w	r3, r3, #8
 80407a8:	6313      	str	r3, [r2, #48]	; 0x30
 80407aa:	4b14      	ldr	r3, [pc, #80]	; (80407fc <MX_GPIO_Init+0x74>)
 80407ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407ae:	f003 0308 	and.w	r3, r3, #8
 80407b2:	60bb      	str	r3, [r7, #8]
 80407b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80407b6:	4b11      	ldr	r3, [pc, #68]	; (80407fc <MX_GPIO_Init+0x74>)
 80407b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407ba:	4a10      	ldr	r2, [pc, #64]	; (80407fc <MX_GPIO_Init+0x74>)
 80407bc:	f043 0302 	orr.w	r3, r3, #2
 80407c0:	6313      	str	r3, [r2, #48]	; 0x30
 80407c2:	4b0e      	ldr	r3, [pc, #56]	; (80407fc <MX_GPIO_Init+0x74>)
 80407c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80407c6:	f003 0302 	and.w	r3, r3, #2
 80407ca:	607b      	str	r3, [r7, #4]
 80407cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80407ce:	2200      	movs	r2, #0
 80407d0:	2180      	movs	r1, #128	; 0x80
 80407d2:	480b      	ldr	r0, [pc, #44]	; (8040800 <MX_GPIO_Init+0x78>)
 80407d4:	f000 fcb6 	bl	8041144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80407d8:	2380      	movs	r3, #128	; 0x80
 80407da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80407dc:	2301      	movs	r3, #1
 80407de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407e0:	2300      	movs	r3, #0
 80407e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80407e4:	2300      	movs	r3, #0
 80407e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80407e8:	f107 030c 	add.w	r3, r7, #12
 80407ec:	4619      	mov	r1, r3
 80407ee:	4804      	ldr	r0, [pc, #16]	; (8040800 <MX_GPIO_Init+0x78>)
 80407f0:	f000 fafc 	bl	8040dec <HAL_GPIO_Init>

}
 80407f4:	bf00      	nop
 80407f6:	3720      	adds	r7, #32
 80407f8:	46bd      	mov	sp, r7
 80407fa:	bd80      	pop	{r7, pc}
 80407fc:	40023800 	.word	0x40023800
 8040800:	40020400 	.word	0x40020400

08040804 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8040804:	b580      	push	{r7, lr}
 8040806:	b082      	sub	sp, #8
 8040808:	af00      	add	r7, sp, #0
 804080a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 804080c:	1d39      	adds	r1, r7, #4
 804080e:	f04f 33ff 	mov.w	r3, #4294967295
 8040812:	2201      	movs	r2, #1
 8040814:	4803      	ldr	r0, [pc, #12]	; (8040824 <__io_putchar+0x20>)
 8040816:	f001 fdb9 	bl	804238c <HAL_UART_Transmit>

  return ch;
 804081a:	687b      	ldr	r3, [r7, #4]
}
 804081c:	4618      	mov	r0, r3
 804081e:	3708      	adds	r7, #8
 8040820:	46bd      	mov	sp, r7
 8040822:	bd80      	pop	{r7, pc}
 8040824:	2000008c 	.word	0x2000008c

08040828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040828:	b480      	push	{r7}
 804082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 804082c:	b672      	cpsid	i
}
 804082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040830:	e7fe      	b.n	8040830 <Error_Handler+0x8>
	...

08040834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040834:	b480      	push	{r7}
 8040836:	b083      	sub	sp, #12
 8040838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 804083a:	4b0f      	ldr	r3, [pc, #60]	; (8040878 <HAL_MspInit+0x44>)
 804083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804083e:	4a0e      	ldr	r2, [pc, #56]	; (8040878 <HAL_MspInit+0x44>)
 8040840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040844:	6413      	str	r3, [r2, #64]	; 0x40
 8040846:	4b0c      	ldr	r3, [pc, #48]	; (8040878 <HAL_MspInit+0x44>)
 8040848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804084e:	607b      	str	r3, [r7, #4]
 8040850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040852:	4b09      	ldr	r3, [pc, #36]	; (8040878 <HAL_MspInit+0x44>)
 8040854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040856:	4a08      	ldr	r2, [pc, #32]	; (8040878 <HAL_MspInit+0x44>)
 8040858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804085c:	6453      	str	r3, [r2, #68]	; 0x44
 804085e:	4b06      	ldr	r3, [pc, #24]	; (8040878 <HAL_MspInit+0x44>)
 8040860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040866:	603b      	str	r3, [r7, #0]
 8040868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804086a:	bf00      	nop
 804086c:	370c      	adds	r7, #12
 804086e:	46bd      	mov	sp, r7
 8040870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040874:	4770      	bx	lr
 8040876:	bf00      	nop
 8040878:	40023800 	.word	0x40023800

0804087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 804087c:	b580      	push	{r7, lr}
 804087e:	b08a      	sub	sp, #40	; 0x28
 8040880:	af00      	add	r7, sp, #0
 8040882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040884:	f107 0314 	add.w	r3, r7, #20
 8040888:	2200      	movs	r2, #0
 804088a:	601a      	str	r2, [r3, #0]
 804088c:	605a      	str	r2, [r3, #4]
 804088e:	609a      	str	r2, [r3, #8]
 8040890:	60da      	str	r2, [r3, #12]
 8040892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8040894:	687b      	ldr	r3, [r7, #4]
 8040896:	681b      	ldr	r3, [r3, #0]
 8040898:	4a17      	ldr	r2, [pc, #92]	; (80408f8 <HAL_UART_MspInit+0x7c>)
 804089a:	4293      	cmp	r3, r2
 804089c:	d128      	bne.n	80408f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 804089e:	4b17      	ldr	r3, [pc, #92]	; (80408fc <HAL_UART_MspInit+0x80>)
 80408a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80408a2:	4a16      	ldr	r2, [pc, #88]	; (80408fc <HAL_UART_MspInit+0x80>)
 80408a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80408a8:	6413      	str	r3, [r2, #64]	; 0x40
 80408aa:	4b14      	ldr	r3, [pc, #80]	; (80408fc <HAL_UART_MspInit+0x80>)
 80408ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80408ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80408b2:	613b      	str	r3, [r7, #16]
 80408b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80408b6:	4b11      	ldr	r3, [pc, #68]	; (80408fc <HAL_UART_MspInit+0x80>)
 80408b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408ba:	4a10      	ldr	r2, [pc, #64]	; (80408fc <HAL_UART_MspInit+0x80>)
 80408bc:	f043 0308 	orr.w	r3, r3, #8
 80408c0:	6313      	str	r3, [r2, #48]	; 0x30
 80408c2:	4b0e      	ldr	r3, [pc, #56]	; (80408fc <HAL_UART_MspInit+0x80>)
 80408c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80408c6:	f003 0308 	and.w	r3, r3, #8
 80408ca:	60fb      	str	r3, [r7, #12]
 80408cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80408ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80408d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80408d4:	2302      	movs	r3, #2
 80408d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408d8:	2300      	movs	r3, #0
 80408da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80408dc:	2303      	movs	r3, #3
 80408de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80408e0:	2307      	movs	r3, #7
 80408e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80408e4:	f107 0314 	add.w	r3, r7, #20
 80408e8:	4619      	mov	r1, r3
 80408ea:	4805      	ldr	r0, [pc, #20]	; (8040900 <HAL_UART_MspInit+0x84>)
 80408ec:	f000 fa7e 	bl	8040dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80408f0:	bf00      	nop
 80408f2:	3728      	adds	r7, #40	; 0x28
 80408f4:	46bd      	mov	sp, r7
 80408f6:	bd80      	pop	{r7, pc}
 80408f8:	40004800 	.word	0x40004800
 80408fc:	40023800 	.word	0x40023800
 8040900:	40020c00 	.word	0x40020c00

08040904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040904:	b480      	push	{r7}
 8040906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040908:	e7fe      	b.n	8040908 <NMI_Handler+0x4>

0804090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 804090a:	b480      	push	{r7}
 804090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 804090e:	e7fe      	b.n	804090e <HardFault_Handler+0x4>

08040910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040910:	b480      	push	{r7}
 8040912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040914:	e7fe      	b.n	8040914 <MemManage_Handler+0x4>

08040916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040916:	b480      	push	{r7}
 8040918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 804091a:	e7fe      	b.n	804091a <BusFault_Handler+0x4>

0804091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804091c:	b480      	push	{r7}
 804091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040920:	e7fe      	b.n	8040920 <UsageFault_Handler+0x4>

08040922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040922:	b480      	push	{r7}
 8040924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040926:	bf00      	nop
 8040928:	46bd      	mov	sp, r7
 804092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804092e:	4770      	bx	lr

08040930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040930:	b480      	push	{r7}
 8040932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040934:	bf00      	nop
 8040936:	46bd      	mov	sp, r7
 8040938:	f85d 7b04 	ldr.w	r7, [sp], #4
 804093c:	4770      	bx	lr

0804093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804093e:	b480      	push	{r7}
 8040940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040942:	bf00      	nop
 8040944:	46bd      	mov	sp, r7
 8040946:	f85d 7b04 	ldr.w	r7, [sp], #4
 804094a:	4770      	bx	lr

0804094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 804094c:	b580      	push	{r7, lr}
 804094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040950:	f000 f922 	bl	8040b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040954:	bf00      	nop
 8040956:	bd80      	pop	{r7, pc}

08040958 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040958:	b580      	push	{r7, lr}
 804095a:	b086      	sub	sp, #24
 804095c:	af00      	add	r7, sp, #0
 804095e:	60f8      	str	r0, [r7, #12]
 8040960:	60b9      	str	r1, [r7, #8]
 8040962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040964:	2300      	movs	r3, #0
 8040966:	617b      	str	r3, [r7, #20]
 8040968:	e00a      	b.n	8040980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 804096a:	f3af 8000 	nop.w
 804096e:	4601      	mov	r1, r0
 8040970:	68bb      	ldr	r3, [r7, #8]
 8040972:	1c5a      	adds	r2, r3, #1
 8040974:	60ba      	str	r2, [r7, #8]
 8040976:	b2ca      	uxtb	r2, r1
 8040978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804097a:	697b      	ldr	r3, [r7, #20]
 804097c:	3301      	adds	r3, #1
 804097e:	617b      	str	r3, [r7, #20]
 8040980:	697a      	ldr	r2, [r7, #20]
 8040982:	687b      	ldr	r3, [r7, #4]
 8040984:	429a      	cmp	r2, r3
 8040986:	dbf0      	blt.n	804096a <_read+0x12>
	}

return len;
 8040988:	687b      	ldr	r3, [r7, #4]
}
 804098a:	4618      	mov	r0, r3
 804098c:	3718      	adds	r7, #24
 804098e:	46bd      	mov	sp, r7
 8040990:	bd80      	pop	{r7, pc}

08040992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040992:	b580      	push	{r7, lr}
 8040994:	b086      	sub	sp, #24
 8040996:	af00      	add	r7, sp, #0
 8040998:	60f8      	str	r0, [r7, #12]
 804099a:	60b9      	str	r1, [r7, #8]
 804099c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804099e:	2300      	movs	r3, #0
 80409a0:	617b      	str	r3, [r7, #20]
 80409a2:	e009      	b.n	80409b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80409a4:	68bb      	ldr	r3, [r7, #8]
 80409a6:	1c5a      	adds	r2, r3, #1
 80409a8:	60ba      	str	r2, [r7, #8]
 80409aa:	781b      	ldrb	r3, [r3, #0]
 80409ac:	4618      	mov	r0, r3
 80409ae:	f7ff ff29 	bl	8040804 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80409b2:	697b      	ldr	r3, [r7, #20]
 80409b4:	3301      	adds	r3, #1
 80409b6:	617b      	str	r3, [r7, #20]
 80409b8:	697a      	ldr	r2, [r7, #20]
 80409ba:	687b      	ldr	r3, [r7, #4]
 80409bc:	429a      	cmp	r2, r3
 80409be:	dbf1      	blt.n	80409a4 <_write+0x12>
	}
	return len;
 80409c0:	687b      	ldr	r3, [r7, #4]
}
 80409c2:	4618      	mov	r0, r3
 80409c4:	3718      	adds	r7, #24
 80409c6:	46bd      	mov	sp, r7
 80409c8:	bd80      	pop	{r7, pc}

080409ca <_close>:

int _close(int file)
{
 80409ca:	b480      	push	{r7}
 80409cc:	b083      	sub	sp, #12
 80409ce:	af00      	add	r7, sp, #0
 80409d0:	6078      	str	r0, [r7, #4]
	return -1;
 80409d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80409d6:	4618      	mov	r0, r3
 80409d8:	370c      	adds	r7, #12
 80409da:	46bd      	mov	sp, r7
 80409dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409e0:	4770      	bx	lr

080409e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80409e2:	b480      	push	{r7}
 80409e4:	b083      	sub	sp, #12
 80409e6:	af00      	add	r7, sp, #0
 80409e8:	6078      	str	r0, [r7, #4]
 80409ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80409ec:	683b      	ldr	r3, [r7, #0]
 80409ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80409f2:	605a      	str	r2, [r3, #4]
	return 0;
 80409f4:	2300      	movs	r3, #0
}
 80409f6:	4618      	mov	r0, r3
 80409f8:	370c      	adds	r7, #12
 80409fa:	46bd      	mov	sp, r7
 80409fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a00:	4770      	bx	lr

08040a02 <_isatty>:

int _isatty(int file)
{
 8040a02:	b480      	push	{r7}
 8040a04:	b083      	sub	sp, #12
 8040a06:	af00      	add	r7, sp, #0
 8040a08:	6078      	str	r0, [r7, #4]
	return 1;
 8040a0a:	2301      	movs	r3, #1
}
 8040a0c:	4618      	mov	r0, r3
 8040a0e:	370c      	adds	r7, #12
 8040a10:	46bd      	mov	sp, r7
 8040a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a16:	4770      	bx	lr

08040a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040a18:	b480      	push	{r7}
 8040a1a:	b085      	sub	sp, #20
 8040a1c:	af00      	add	r7, sp, #0
 8040a1e:	60f8      	str	r0, [r7, #12]
 8040a20:	60b9      	str	r1, [r7, #8]
 8040a22:	607a      	str	r2, [r7, #4]
	return 0;
 8040a24:	2300      	movs	r3, #0
}
 8040a26:	4618      	mov	r0, r3
 8040a28:	3714      	adds	r7, #20
 8040a2a:	46bd      	mov	sp, r7
 8040a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a30:	4770      	bx	lr
	...

08040a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040a34:	b580      	push	{r7, lr}
 8040a36:	b086      	sub	sp, #24
 8040a38:	af00      	add	r7, sp, #0
 8040a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040a3c:	4a14      	ldr	r2, [pc, #80]	; (8040a90 <_sbrk+0x5c>)
 8040a3e:	4b15      	ldr	r3, [pc, #84]	; (8040a94 <_sbrk+0x60>)
 8040a40:	1ad3      	subs	r3, r2, r3
 8040a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040a44:	697b      	ldr	r3, [r7, #20]
 8040a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040a48:	4b13      	ldr	r3, [pc, #76]	; (8040a98 <_sbrk+0x64>)
 8040a4a:	681b      	ldr	r3, [r3, #0]
 8040a4c:	2b00      	cmp	r3, #0
 8040a4e:	d102      	bne.n	8040a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040a50:	4b11      	ldr	r3, [pc, #68]	; (8040a98 <_sbrk+0x64>)
 8040a52:	4a12      	ldr	r2, [pc, #72]	; (8040a9c <_sbrk+0x68>)
 8040a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040a56:	4b10      	ldr	r3, [pc, #64]	; (8040a98 <_sbrk+0x64>)
 8040a58:	681a      	ldr	r2, [r3, #0]
 8040a5a:	687b      	ldr	r3, [r7, #4]
 8040a5c:	4413      	add	r3, r2
 8040a5e:	693a      	ldr	r2, [r7, #16]
 8040a60:	429a      	cmp	r2, r3
 8040a62:	d207      	bcs.n	8040a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040a64:	f002 f8f2 	bl	8042c4c <__errno>
 8040a68:	4603      	mov	r3, r0
 8040a6a:	220c      	movs	r2, #12
 8040a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8040a72:	e009      	b.n	8040a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040a74:	4b08      	ldr	r3, [pc, #32]	; (8040a98 <_sbrk+0x64>)
 8040a76:	681b      	ldr	r3, [r3, #0]
 8040a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040a7a:	4b07      	ldr	r3, [pc, #28]	; (8040a98 <_sbrk+0x64>)
 8040a7c:	681a      	ldr	r2, [r3, #0]
 8040a7e:	687b      	ldr	r3, [r7, #4]
 8040a80:	4413      	add	r3, r2
 8040a82:	4a05      	ldr	r2, [pc, #20]	; (8040a98 <_sbrk+0x64>)
 8040a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040a86:	68fb      	ldr	r3, [r7, #12]
}
 8040a88:	4618      	mov	r0, r3
 8040a8a:	3718      	adds	r7, #24
 8040a8c:	46bd      	mov	sp, r7
 8040a8e:	bd80      	pop	{r7, pc}
 8040a90:	20080000 	.word	0x20080000
 8040a94:	00000400 	.word	0x00000400
 8040a98:	20000110 	.word	0x20000110
 8040a9c:	20000128 	.word	0x20000128

08040aa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040aa0:	b480      	push	{r7}
 8040aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040aa4:	4b07      	ldr	r3, [pc, #28]	; (8040ac4 <SystemInit+0x24>)
 8040aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040aaa:	4a06      	ldr	r2, [pc, #24]	; (8040ac4 <SystemInit+0x24>)
 8040aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040ab4:	4b03      	ldr	r3, [pc, #12]	; (8040ac4 <SystemInit+0x24>)
 8040ab6:	4a04      	ldr	r2, [pc, #16]	; (8040ac8 <SystemInit+0x28>)
 8040ab8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040aba:	bf00      	nop
 8040abc:	46bd      	mov	sp, r7
 8040abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ac2:	4770      	bx	lr
 8040ac4:	e000ed00 	.word	0xe000ed00
 8040ac8:	08040000 	.word	0x08040000

08040acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8040acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040b04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040ad0:	480d      	ldr	r0, [pc, #52]	; (8040b08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8040ad2:	490e      	ldr	r1, [pc, #56]	; (8040b0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8040ad4:	4a0e      	ldr	r2, [pc, #56]	; (8040b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8040ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040ad8:	e002      	b.n	8040ae0 <LoopCopyDataInit>

08040ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040ade:	3304      	adds	r3, #4

08040ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040ae4:	d3f9      	bcc.n	8040ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040ae6:	4a0b      	ldr	r2, [pc, #44]	; (8040b14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8040ae8:	4c0b      	ldr	r4, [pc, #44]	; (8040b18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8040aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040aec:	e001      	b.n	8040af2 <LoopFillZerobss>

08040aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040af0:	3204      	adds	r2, #4

08040af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040af4:	d3fb      	bcc.n	8040aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040af6:	f7ff ffd3 	bl	8040aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040afa:	f002 f8ad 	bl	8042c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040afe:	f7ff fd71 	bl	80405e4 <main>
  bx  lr    
 8040b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040b04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8040b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040b0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8040b10:	08043cc4 	.word	0x08043cc4
  ldr r2, =_sbss
 8040b14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8040b18:	20000128 	.word	0x20000128

08040b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040b1c:	e7fe      	b.n	8040b1c <ADC_IRQHandler>

08040b1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040b1e:	b580      	push	{r7, lr}
 8040b20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040b22:	2003      	movs	r0, #3
 8040b24:	f000 f92e 	bl	8040d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8040b28:	2000      	movs	r0, #0
 8040b2a:	f000 f805 	bl	8040b38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8040b2e:	f7ff fe81 	bl	8040834 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8040b32:	2300      	movs	r3, #0
}
 8040b34:	4618      	mov	r0, r3
 8040b36:	bd80      	pop	{r7, pc}

08040b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040b38:	b580      	push	{r7, lr}
 8040b3a:	b082      	sub	sp, #8
 8040b3c:	af00      	add	r7, sp, #0
 8040b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8040b40:	4b12      	ldr	r3, [pc, #72]	; (8040b8c <HAL_InitTick+0x54>)
 8040b42:	681a      	ldr	r2, [r3, #0]
 8040b44:	4b12      	ldr	r3, [pc, #72]	; (8040b90 <HAL_InitTick+0x58>)
 8040b46:	781b      	ldrb	r3, [r3, #0]
 8040b48:	4619      	mov	r1, r3
 8040b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8040b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8040b56:	4618      	mov	r0, r3
 8040b58:	f000 f93b 	bl	8040dd2 <HAL_SYSTICK_Config>
 8040b5c:	4603      	mov	r3, r0
 8040b5e:	2b00      	cmp	r3, #0
 8040b60:	d001      	beq.n	8040b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8040b62:	2301      	movs	r3, #1
 8040b64:	e00e      	b.n	8040b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040b66:	687b      	ldr	r3, [r7, #4]
 8040b68:	2b0f      	cmp	r3, #15
 8040b6a:	d80a      	bhi.n	8040b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040b6c:	2200      	movs	r2, #0
 8040b6e:	6879      	ldr	r1, [r7, #4]
 8040b70:	f04f 30ff 	mov.w	r0, #4294967295
 8040b74:	f000 f911 	bl	8040d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040b78:	4a06      	ldr	r2, [pc, #24]	; (8040b94 <HAL_InitTick+0x5c>)
 8040b7a:	687b      	ldr	r3, [r7, #4]
 8040b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040b7e:	2300      	movs	r3, #0
 8040b80:	e000      	b.n	8040b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8040b82:	2301      	movs	r3, #1
}
 8040b84:	4618      	mov	r0, r3
 8040b86:	3708      	adds	r7, #8
 8040b88:	46bd      	mov	sp, r7
 8040b8a:	bd80      	pop	{r7, pc}
 8040b8c:	20000000 	.word	0x20000000
 8040b90:	20000008 	.word	0x20000008
 8040b94:	20000004 	.word	0x20000004

08040b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b98:	b480      	push	{r7}
 8040b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040b9c:	4b06      	ldr	r3, [pc, #24]	; (8040bb8 <HAL_IncTick+0x20>)
 8040b9e:	781b      	ldrb	r3, [r3, #0]
 8040ba0:	461a      	mov	r2, r3
 8040ba2:	4b06      	ldr	r3, [pc, #24]	; (8040bbc <HAL_IncTick+0x24>)
 8040ba4:	681b      	ldr	r3, [r3, #0]
 8040ba6:	4413      	add	r3, r2
 8040ba8:	4a04      	ldr	r2, [pc, #16]	; (8040bbc <HAL_IncTick+0x24>)
 8040baa:	6013      	str	r3, [r2, #0]
}
 8040bac:	bf00      	nop
 8040bae:	46bd      	mov	sp, r7
 8040bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bb4:	4770      	bx	lr
 8040bb6:	bf00      	nop
 8040bb8:	20000008 	.word	0x20000008
 8040bbc:	20000114 	.word	0x20000114

08040bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040bc0:	b480      	push	{r7}
 8040bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8040bc4:	4b03      	ldr	r3, [pc, #12]	; (8040bd4 <HAL_GetTick+0x14>)
 8040bc6:	681b      	ldr	r3, [r3, #0]
}
 8040bc8:	4618      	mov	r0, r3
 8040bca:	46bd      	mov	sp, r7
 8040bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bd0:	4770      	bx	lr
 8040bd2:	bf00      	nop
 8040bd4:	20000114 	.word	0x20000114

08040bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040bd8:	b580      	push	{r7, lr}
 8040bda:	b084      	sub	sp, #16
 8040bdc:	af00      	add	r7, sp, #0
 8040bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040be0:	f7ff ffee 	bl	8040bc0 <HAL_GetTick>
 8040be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040be6:	687b      	ldr	r3, [r7, #4]
 8040be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040bea:	68fb      	ldr	r3, [r7, #12]
 8040bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040bf0:	d005      	beq.n	8040bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040bf2:	4b0a      	ldr	r3, [pc, #40]	; (8040c1c <HAL_Delay+0x44>)
 8040bf4:	781b      	ldrb	r3, [r3, #0]
 8040bf6:	461a      	mov	r2, r3
 8040bf8:	68fb      	ldr	r3, [r7, #12]
 8040bfa:	4413      	add	r3, r2
 8040bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040bfe:	bf00      	nop
 8040c00:	f7ff ffde 	bl	8040bc0 <HAL_GetTick>
 8040c04:	4602      	mov	r2, r0
 8040c06:	68bb      	ldr	r3, [r7, #8]
 8040c08:	1ad3      	subs	r3, r2, r3
 8040c0a:	68fa      	ldr	r2, [r7, #12]
 8040c0c:	429a      	cmp	r2, r3
 8040c0e:	d8f7      	bhi.n	8040c00 <HAL_Delay+0x28>
  {
  }
}
 8040c10:	bf00      	nop
 8040c12:	bf00      	nop
 8040c14:	3710      	adds	r7, #16
 8040c16:	46bd      	mov	sp, r7
 8040c18:	bd80      	pop	{r7, pc}
 8040c1a:	bf00      	nop
 8040c1c:	20000008 	.word	0x20000008

08040c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c20:	b480      	push	{r7}
 8040c22:	b085      	sub	sp, #20
 8040c24:	af00      	add	r7, sp, #0
 8040c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040c28:	687b      	ldr	r3, [r7, #4]
 8040c2a:	f003 0307 	and.w	r3, r3, #7
 8040c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040c30:	4b0b      	ldr	r3, [pc, #44]	; (8040c60 <__NVIC_SetPriorityGrouping+0x40>)
 8040c32:	68db      	ldr	r3, [r3, #12]
 8040c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040c36:	68ba      	ldr	r2, [r7, #8]
 8040c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040c3c:	4013      	ands	r3, r2
 8040c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040c40:	68fb      	ldr	r3, [r7, #12]
 8040c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040c44:	68bb      	ldr	r3, [r7, #8]
 8040c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040c48:	4b06      	ldr	r3, [pc, #24]	; (8040c64 <__NVIC_SetPriorityGrouping+0x44>)
 8040c4a:	4313      	orrs	r3, r2
 8040c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040c4e:	4a04      	ldr	r2, [pc, #16]	; (8040c60 <__NVIC_SetPriorityGrouping+0x40>)
 8040c50:	68bb      	ldr	r3, [r7, #8]
 8040c52:	60d3      	str	r3, [r2, #12]
}
 8040c54:	bf00      	nop
 8040c56:	3714      	adds	r7, #20
 8040c58:	46bd      	mov	sp, r7
 8040c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c5e:	4770      	bx	lr
 8040c60:	e000ed00 	.word	0xe000ed00
 8040c64:	05fa0000 	.word	0x05fa0000

08040c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040c68:	b480      	push	{r7}
 8040c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040c6c:	4b04      	ldr	r3, [pc, #16]	; (8040c80 <__NVIC_GetPriorityGrouping+0x18>)
 8040c6e:	68db      	ldr	r3, [r3, #12]
 8040c70:	0a1b      	lsrs	r3, r3, #8
 8040c72:	f003 0307 	and.w	r3, r3, #7
}
 8040c76:	4618      	mov	r0, r3
 8040c78:	46bd      	mov	sp, r7
 8040c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c7e:	4770      	bx	lr
 8040c80:	e000ed00 	.word	0xe000ed00

08040c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040c84:	b480      	push	{r7}
 8040c86:	b083      	sub	sp, #12
 8040c88:	af00      	add	r7, sp, #0
 8040c8a:	4603      	mov	r3, r0
 8040c8c:	6039      	str	r1, [r7, #0]
 8040c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c94:	2b00      	cmp	r3, #0
 8040c96:	db0a      	blt.n	8040cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c98:	683b      	ldr	r3, [r7, #0]
 8040c9a:	b2da      	uxtb	r2, r3
 8040c9c:	490c      	ldr	r1, [pc, #48]	; (8040cd0 <__NVIC_SetPriority+0x4c>)
 8040c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040ca2:	0112      	lsls	r2, r2, #4
 8040ca4:	b2d2      	uxtb	r2, r2
 8040ca6:	440b      	add	r3, r1
 8040ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040cac:	e00a      	b.n	8040cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040cae:	683b      	ldr	r3, [r7, #0]
 8040cb0:	b2da      	uxtb	r2, r3
 8040cb2:	4908      	ldr	r1, [pc, #32]	; (8040cd4 <__NVIC_SetPriority+0x50>)
 8040cb4:	79fb      	ldrb	r3, [r7, #7]
 8040cb6:	f003 030f 	and.w	r3, r3, #15
 8040cba:	3b04      	subs	r3, #4
 8040cbc:	0112      	lsls	r2, r2, #4
 8040cbe:	b2d2      	uxtb	r2, r2
 8040cc0:	440b      	add	r3, r1
 8040cc2:	761a      	strb	r2, [r3, #24]
}
 8040cc4:	bf00      	nop
 8040cc6:	370c      	adds	r7, #12
 8040cc8:	46bd      	mov	sp, r7
 8040cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cce:	4770      	bx	lr
 8040cd0:	e000e100 	.word	0xe000e100
 8040cd4:	e000ed00 	.word	0xe000ed00

08040cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040cd8:	b480      	push	{r7}
 8040cda:	b089      	sub	sp, #36	; 0x24
 8040cdc:	af00      	add	r7, sp, #0
 8040cde:	60f8      	str	r0, [r7, #12]
 8040ce0:	60b9      	str	r1, [r7, #8]
 8040ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040ce4:	68fb      	ldr	r3, [r7, #12]
 8040ce6:	f003 0307 	and.w	r3, r3, #7
 8040cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040cec:	69fb      	ldr	r3, [r7, #28]
 8040cee:	f1c3 0307 	rsb	r3, r3, #7
 8040cf2:	2b04      	cmp	r3, #4
 8040cf4:	bf28      	it	cs
 8040cf6:	2304      	movcs	r3, #4
 8040cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040cfa:	69fb      	ldr	r3, [r7, #28]
 8040cfc:	3304      	adds	r3, #4
 8040cfe:	2b06      	cmp	r3, #6
 8040d00:	d902      	bls.n	8040d08 <NVIC_EncodePriority+0x30>
 8040d02:	69fb      	ldr	r3, [r7, #28]
 8040d04:	3b03      	subs	r3, #3
 8040d06:	e000      	b.n	8040d0a <NVIC_EncodePriority+0x32>
 8040d08:	2300      	movs	r3, #0
 8040d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8040d10:	69bb      	ldr	r3, [r7, #24]
 8040d12:	fa02 f303 	lsl.w	r3, r2, r3
 8040d16:	43da      	mvns	r2, r3
 8040d18:	68bb      	ldr	r3, [r7, #8]
 8040d1a:	401a      	ands	r2, r3
 8040d1c:	697b      	ldr	r3, [r7, #20]
 8040d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040d20:	f04f 31ff 	mov.w	r1, #4294967295
 8040d24:	697b      	ldr	r3, [r7, #20]
 8040d26:	fa01 f303 	lsl.w	r3, r1, r3
 8040d2a:	43d9      	mvns	r1, r3
 8040d2c:	687b      	ldr	r3, [r7, #4]
 8040d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040d30:	4313      	orrs	r3, r2
         );
}
 8040d32:	4618      	mov	r0, r3
 8040d34:	3724      	adds	r7, #36	; 0x24
 8040d36:	46bd      	mov	sp, r7
 8040d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d3c:	4770      	bx	lr
	...

08040d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040d40:	b580      	push	{r7, lr}
 8040d42:	b082      	sub	sp, #8
 8040d44:	af00      	add	r7, sp, #0
 8040d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040d48:	687b      	ldr	r3, [r7, #4]
 8040d4a:	3b01      	subs	r3, #1
 8040d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040d50:	d301      	bcc.n	8040d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040d52:	2301      	movs	r3, #1
 8040d54:	e00f      	b.n	8040d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040d56:	4a0a      	ldr	r2, [pc, #40]	; (8040d80 <SysTick_Config+0x40>)
 8040d58:	687b      	ldr	r3, [r7, #4]
 8040d5a:	3b01      	subs	r3, #1
 8040d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040d5e:	210f      	movs	r1, #15
 8040d60:	f04f 30ff 	mov.w	r0, #4294967295
 8040d64:	f7ff ff8e 	bl	8040c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040d68:	4b05      	ldr	r3, [pc, #20]	; (8040d80 <SysTick_Config+0x40>)
 8040d6a:	2200      	movs	r2, #0
 8040d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040d6e:	4b04      	ldr	r3, [pc, #16]	; (8040d80 <SysTick_Config+0x40>)
 8040d70:	2207      	movs	r2, #7
 8040d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040d74:	2300      	movs	r3, #0
}
 8040d76:	4618      	mov	r0, r3
 8040d78:	3708      	adds	r7, #8
 8040d7a:	46bd      	mov	sp, r7
 8040d7c:	bd80      	pop	{r7, pc}
 8040d7e:	bf00      	nop
 8040d80:	e000e010 	.word	0xe000e010

08040d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d84:	b580      	push	{r7, lr}
 8040d86:	b082      	sub	sp, #8
 8040d88:	af00      	add	r7, sp, #0
 8040d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040d8c:	6878      	ldr	r0, [r7, #4]
 8040d8e:	f7ff ff47 	bl	8040c20 <__NVIC_SetPriorityGrouping>
}
 8040d92:	bf00      	nop
 8040d94:	3708      	adds	r7, #8
 8040d96:	46bd      	mov	sp, r7
 8040d98:	bd80      	pop	{r7, pc}

08040d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8040d9a:	b580      	push	{r7, lr}
 8040d9c:	b086      	sub	sp, #24
 8040d9e:	af00      	add	r7, sp, #0
 8040da0:	4603      	mov	r3, r0
 8040da2:	60b9      	str	r1, [r7, #8]
 8040da4:	607a      	str	r2, [r7, #4]
 8040da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8040da8:	2300      	movs	r3, #0
 8040daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8040dac:	f7ff ff5c 	bl	8040c68 <__NVIC_GetPriorityGrouping>
 8040db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040db2:	687a      	ldr	r2, [r7, #4]
 8040db4:	68b9      	ldr	r1, [r7, #8]
 8040db6:	6978      	ldr	r0, [r7, #20]
 8040db8:	f7ff ff8e 	bl	8040cd8 <NVIC_EncodePriority>
 8040dbc:	4602      	mov	r2, r0
 8040dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040dc2:	4611      	mov	r1, r2
 8040dc4:	4618      	mov	r0, r3
 8040dc6:	f7ff ff5d 	bl	8040c84 <__NVIC_SetPriority>
}
 8040dca:	bf00      	nop
 8040dcc:	3718      	adds	r7, #24
 8040dce:	46bd      	mov	sp, r7
 8040dd0:	bd80      	pop	{r7, pc}

08040dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040dd2:	b580      	push	{r7, lr}
 8040dd4:	b082      	sub	sp, #8
 8040dd6:	af00      	add	r7, sp, #0
 8040dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040dda:	6878      	ldr	r0, [r7, #4]
 8040ddc:	f7ff ffb0 	bl	8040d40 <SysTick_Config>
 8040de0:	4603      	mov	r3, r0
}
 8040de2:	4618      	mov	r0, r3
 8040de4:	3708      	adds	r7, #8
 8040de6:	46bd      	mov	sp, r7
 8040de8:	bd80      	pop	{r7, pc}
	...

08040dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040dec:	b480      	push	{r7}
 8040dee:	b089      	sub	sp, #36	; 0x24
 8040df0:	af00      	add	r7, sp, #0
 8040df2:	6078      	str	r0, [r7, #4]
 8040df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8040df6:	2300      	movs	r3, #0
 8040df8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8040dfa:	2300      	movs	r3, #0
 8040dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8040dfe:	2300      	movs	r3, #0
 8040e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8040e02:	2300      	movs	r3, #0
 8040e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8040e06:	2300      	movs	r3, #0
 8040e08:	61fb      	str	r3, [r7, #28]
 8040e0a:	e175      	b.n	80410f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8040e0c:	2201      	movs	r2, #1
 8040e0e:	69fb      	ldr	r3, [r7, #28]
 8040e10:	fa02 f303 	lsl.w	r3, r2, r3
 8040e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040e16:	683b      	ldr	r3, [r7, #0]
 8040e18:	681b      	ldr	r3, [r3, #0]
 8040e1a:	697a      	ldr	r2, [r7, #20]
 8040e1c:	4013      	ands	r3, r2
 8040e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040e20:	693a      	ldr	r2, [r7, #16]
 8040e22:	697b      	ldr	r3, [r7, #20]
 8040e24:	429a      	cmp	r2, r3
 8040e26:	f040 8164 	bne.w	80410f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040e2a:	683b      	ldr	r3, [r7, #0]
 8040e2c:	685b      	ldr	r3, [r3, #4]
 8040e2e:	2b01      	cmp	r3, #1
 8040e30:	d00b      	beq.n	8040e4a <HAL_GPIO_Init+0x5e>
 8040e32:	683b      	ldr	r3, [r7, #0]
 8040e34:	685b      	ldr	r3, [r3, #4]
 8040e36:	2b02      	cmp	r3, #2
 8040e38:	d007      	beq.n	8040e4a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040e3a:	683b      	ldr	r3, [r7, #0]
 8040e3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040e3e:	2b11      	cmp	r3, #17
 8040e40:	d003      	beq.n	8040e4a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040e42:	683b      	ldr	r3, [r7, #0]
 8040e44:	685b      	ldr	r3, [r3, #4]
 8040e46:	2b12      	cmp	r3, #18
 8040e48:	d130      	bne.n	8040eac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040e4a:	687b      	ldr	r3, [r7, #4]
 8040e4c:	689b      	ldr	r3, [r3, #8]
 8040e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8040e50:	69fb      	ldr	r3, [r7, #28]
 8040e52:	005b      	lsls	r3, r3, #1
 8040e54:	2203      	movs	r2, #3
 8040e56:	fa02 f303 	lsl.w	r3, r2, r3
 8040e5a:	43db      	mvns	r3, r3
 8040e5c:	69ba      	ldr	r2, [r7, #24]
 8040e5e:	4013      	ands	r3, r2
 8040e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8040e62:	683b      	ldr	r3, [r7, #0]
 8040e64:	68da      	ldr	r2, [r3, #12]
 8040e66:	69fb      	ldr	r3, [r7, #28]
 8040e68:	005b      	lsls	r3, r3, #1
 8040e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8040e6e:	69ba      	ldr	r2, [r7, #24]
 8040e70:	4313      	orrs	r3, r2
 8040e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040e74:	687b      	ldr	r3, [r7, #4]
 8040e76:	69ba      	ldr	r2, [r7, #24]
 8040e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040e7a:	687b      	ldr	r3, [r7, #4]
 8040e7c:	685b      	ldr	r3, [r3, #4]
 8040e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040e80:	2201      	movs	r2, #1
 8040e82:	69fb      	ldr	r3, [r7, #28]
 8040e84:	fa02 f303 	lsl.w	r3, r2, r3
 8040e88:	43db      	mvns	r3, r3
 8040e8a:	69ba      	ldr	r2, [r7, #24]
 8040e8c:	4013      	ands	r3, r2
 8040e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8040e90:	683b      	ldr	r3, [r7, #0]
 8040e92:	685b      	ldr	r3, [r3, #4]
 8040e94:	091b      	lsrs	r3, r3, #4
 8040e96:	f003 0201 	and.w	r2, r3, #1
 8040e9a:	69fb      	ldr	r3, [r7, #28]
 8040e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8040ea0:	69ba      	ldr	r2, [r7, #24]
 8040ea2:	4313      	orrs	r3, r2
 8040ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040ea6:	687b      	ldr	r3, [r7, #4]
 8040ea8:	69ba      	ldr	r2, [r7, #24]
 8040eaa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8040eac:	687b      	ldr	r3, [r7, #4]
 8040eae:	68db      	ldr	r3, [r3, #12]
 8040eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8040eb2:	69fb      	ldr	r3, [r7, #28]
 8040eb4:	005b      	lsls	r3, r3, #1
 8040eb6:	2203      	movs	r2, #3
 8040eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8040ebc:	43db      	mvns	r3, r3
 8040ebe:	69ba      	ldr	r2, [r7, #24]
 8040ec0:	4013      	ands	r3, r2
 8040ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8040ec4:	683b      	ldr	r3, [r7, #0]
 8040ec6:	689a      	ldr	r2, [r3, #8]
 8040ec8:	69fb      	ldr	r3, [r7, #28]
 8040eca:	005b      	lsls	r3, r3, #1
 8040ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8040ed0:	69ba      	ldr	r2, [r7, #24]
 8040ed2:	4313      	orrs	r3, r2
 8040ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8040ed6:	687b      	ldr	r3, [r7, #4]
 8040ed8:	69ba      	ldr	r2, [r7, #24]
 8040eda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040edc:	683b      	ldr	r3, [r7, #0]
 8040ede:	685b      	ldr	r3, [r3, #4]
 8040ee0:	2b02      	cmp	r3, #2
 8040ee2:	d003      	beq.n	8040eec <HAL_GPIO_Init+0x100>
 8040ee4:	683b      	ldr	r3, [r7, #0]
 8040ee6:	685b      	ldr	r3, [r3, #4]
 8040ee8:	2b12      	cmp	r3, #18
 8040eea:	d123      	bne.n	8040f34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8040eec:	69fb      	ldr	r3, [r7, #28]
 8040eee:	08da      	lsrs	r2, r3, #3
 8040ef0:	687b      	ldr	r3, [r7, #4]
 8040ef2:	3208      	adds	r2, #8
 8040ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8040efa:	69fb      	ldr	r3, [r7, #28]
 8040efc:	f003 0307 	and.w	r3, r3, #7
 8040f00:	009b      	lsls	r3, r3, #2
 8040f02:	220f      	movs	r2, #15
 8040f04:	fa02 f303 	lsl.w	r3, r2, r3
 8040f08:	43db      	mvns	r3, r3
 8040f0a:	69ba      	ldr	r2, [r7, #24]
 8040f0c:	4013      	ands	r3, r2
 8040f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8040f10:	683b      	ldr	r3, [r7, #0]
 8040f12:	691a      	ldr	r2, [r3, #16]
 8040f14:	69fb      	ldr	r3, [r7, #28]
 8040f16:	f003 0307 	and.w	r3, r3, #7
 8040f1a:	009b      	lsls	r3, r3, #2
 8040f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8040f20:	69ba      	ldr	r2, [r7, #24]
 8040f22:	4313      	orrs	r3, r2
 8040f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8040f26:	69fb      	ldr	r3, [r7, #28]
 8040f28:	08da      	lsrs	r2, r3, #3
 8040f2a:	687b      	ldr	r3, [r7, #4]
 8040f2c:	3208      	adds	r2, #8
 8040f2e:	69b9      	ldr	r1, [r7, #24]
 8040f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040f34:	687b      	ldr	r3, [r7, #4]
 8040f36:	681b      	ldr	r3, [r3, #0]
 8040f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8040f3a:	69fb      	ldr	r3, [r7, #28]
 8040f3c:	005b      	lsls	r3, r3, #1
 8040f3e:	2203      	movs	r2, #3
 8040f40:	fa02 f303 	lsl.w	r3, r2, r3
 8040f44:	43db      	mvns	r3, r3
 8040f46:	69ba      	ldr	r2, [r7, #24]
 8040f48:	4013      	ands	r3, r2
 8040f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8040f4c:	683b      	ldr	r3, [r7, #0]
 8040f4e:	685b      	ldr	r3, [r3, #4]
 8040f50:	f003 0203 	and.w	r2, r3, #3
 8040f54:	69fb      	ldr	r3, [r7, #28]
 8040f56:	005b      	lsls	r3, r3, #1
 8040f58:	fa02 f303 	lsl.w	r3, r2, r3
 8040f5c:	69ba      	ldr	r2, [r7, #24]
 8040f5e:	4313      	orrs	r3, r2
 8040f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040f62:	687b      	ldr	r3, [r7, #4]
 8040f64:	69ba      	ldr	r2, [r7, #24]
 8040f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8040f68:	683b      	ldr	r3, [r7, #0]
 8040f6a:	685b      	ldr	r3, [r3, #4]
 8040f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040f70:	2b00      	cmp	r3, #0
 8040f72:	f000 80be 	beq.w	80410f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040f76:	4b66      	ldr	r3, [pc, #408]	; (8041110 <HAL_GPIO_Init+0x324>)
 8040f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f7a:	4a65      	ldr	r2, [pc, #404]	; (8041110 <HAL_GPIO_Init+0x324>)
 8040f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040f80:	6453      	str	r3, [r2, #68]	; 0x44
 8040f82:	4b63      	ldr	r3, [pc, #396]	; (8041110 <HAL_GPIO_Init+0x324>)
 8040f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040f8a:	60fb      	str	r3, [r7, #12]
 8040f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8040f8e:	4a61      	ldr	r2, [pc, #388]	; (8041114 <HAL_GPIO_Init+0x328>)
 8040f90:	69fb      	ldr	r3, [r7, #28]
 8040f92:	089b      	lsrs	r3, r3, #2
 8040f94:	3302      	adds	r3, #2
 8040f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8040f9c:	69fb      	ldr	r3, [r7, #28]
 8040f9e:	f003 0303 	and.w	r3, r3, #3
 8040fa2:	009b      	lsls	r3, r3, #2
 8040fa4:	220f      	movs	r2, #15
 8040fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8040faa:	43db      	mvns	r3, r3
 8040fac:	69ba      	ldr	r2, [r7, #24]
 8040fae:	4013      	ands	r3, r2
 8040fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8040fb2:	687b      	ldr	r3, [r7, #4]
 8040fb4:	4a58      	ldr	r2, [pc, #352]	; (8041118 <HAL_GPIO_Init+0x32c>)
 8040fb6:	4293      	cmp	r3, r2
 8040fb8:	d037      	beq.n	804102a <HAL_GPIO_Init+0x23e>
 8040fba:	687b      	ldr	r3, [r7, #4]
 8040fbc:	4a57      	ldr	r2, [pc, #348]	; (804111c <HAL_GPIO_Init+0x330>)
 8040fbe:	4293      	cmp	r3, r2
 8040fc0:	d031      	beq.n	8041026 <HAL_GPIO_Init+0x23a>
 8040fc2:	687b      	ldr	r3, [r7, #4]
 8040fc4:	4a56      	ldr	r2, [pc, #344]	; (8041120 <HAL_GPIO_Init+0x334>)
 8040fc6:	4293      	cmp	r3, r2
 8040fc8:	d02b      	beq.n	8041022 <HAL_GPIO_Init+0x236>
 8040fca:	687b      	ldr	r3, [r7, #4]
 8040fcc:	4a55      	ldr	r2, [pc, #340]	; (8041124 <HAL_GPIO_Init+0x338>)
 8040fce:	4293      	cmp	r3, r2
 8040fd0:	d025      	beq.n	804101e <HAL_GPIO_Init+0x232>
 8040fd2:	687b      	ldr	r3, [r7, #4]
 8040fd4:	4a54      	ldr	r2, [pc, #336]	; (8041128 <HAL_GPIO_Init+0x33c>)
 8040fd6:	4293      	cmp	r3, r2
 8040fd8:	d01f      	beq.n	804101a <HAL_GPIO_Init+0x22e>
 8040fda:	687b      	ldr	r3, [r7, #4]
 8040fdc:	4a53      	ldr	r2, [pc, #332]	; (804112c <HAL_GPIO_Init+0x340>)
 8040fde:	4293      	cmp	r3, r2
 8040fe0:	d019      	beq.n	8041016 <HAL_GPIO_Init+0x22a>
 8040fe2:	687b      	ldr	r3, [r7, #4]
 8040fe4:	4a52      	ldr	r2, [pc, #328]	; (8041130 <HAL_GPIO_Init+0x344>)
 8040fe6:	4293      	cmp	r3, r2
 8040fe8:	d013      	beq.n	8041012 <HAL_GPIO_Init+0x226>
 8040fea:	687b      	ldr	r3, [r7, #4]
 8040fec:	4a51      	ldr	r2, [pc, #324]	; (8041134 <HAL_GPIO_Init+0x348>)
 8040fee:	4293      	cmp	r3, r2
 8040ff0:	d00d      	beq.n	804100e <HAL_GPIO_Init+0x222>
 8040ff2:	687b      	ldr	r3, [r7, #4]
 8040ff4:	4a50      	ldr	r2, [pc, #320]	; (8041138 <HAL_GPIO_Init+0x34c>)
 8040ff6:	4293      	cmp	r3, r2
 8040ff8:	d007      	beq.n	804100a <HAL_GPIO_Init+0x21e>
 8040ffa:	687b      	ldr	r3, [r7, #4]
 8040ffc:	4a4f      	ldr	r2, [pc, #316]	; (804113c <HAL_GPIO_Init+0x350>)
 8040ffe:	4293      	cmp	r3, r2
 8041000:	d101      	bne.n	8041006 <HAL_GPIO_Init+0x21a>
 8041002:	2309      	movs	r3, #9
 8041004:	e012      	b.n	804102c <HAL_GPIO_Init+0x240>
 8041006:	230a      	movs	r3, #10
 8041008:	e010      	b.n	804102c <HAL_GPIO_Init+0x240>
 804100a:	2308      	movs	r3, #8
 804100c:	e00e      	b.n	804102c <HAL_GPIO_Init+0x240>
 804100e:	2307      	movs	r3, #7
 8041010:	e00c      	b.n	804102c <HAL_GPIO_Init+0x240>
 8041012:	2306      	movs	r3, #6
 8041014:	e00a      	b.n	804102c <HAL_GPIO_Init+0x240>
 8041016:	2305      	movs	r3, #5
 8041018:	e008      	b.n	804102c <HAL_GPIO_Init+0x240>
 804101a:	2304      	movs	r3, #4
 804101c:	e006      	b.n	804102c <HAL_GPIO_Init+0x240>
 804101e:	2303      	movs	r3, #3
 8041020:	e004      	b.n	804102c <HAL_GPIO_Init+0x240>
 8041022:	2302      	movs	r3, #2
 8041024:	e002      	b.n	804102c <HAL_GPIO_Init+0x240>
 8041026:	2301      	movs	r3, #1
 8041028:	e000      	b.n	804102c <HAL_GPIO_Init+0x240>
 804102a:	2300      	movs	r3, #0
 804102c:	69fa      	ldr	r2, [r7, #28]
 804102e:	f002 0203 	and.w	r2, r2, #3
 8041032:	0092      	lsls	r2, r2, #2
 8041034:	4093      	lsls	r3, r2
 8041036:	69ba      	ldr	r2, [r7, #24]
 8041038:	4313      	orrs	r3, r2
 804103a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 804103c:	4935      	ldr	r1, [pc, #212]	; (8041114 <HAL_GPIO_Init+0x328>)
 804103e:	69fb      	ldr	r3, [r7, #28]
 8041040:	089b      	lsrs	r3, r3, #2
 8041042:	3302      	adds	r3, #2
 8041044:	69ba      	ldr	r2, [r7, #24]
 8041046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 804104a:	4b3d      	ldr	r3, [pc, #244]	; (8041140 <HAL_GPIO_Init+0x354>)
 804104c:	681b      	ldr	r3, [r3, #0]
 804104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8041050:	693b      	ldr	r3, [r7, #16]
 8041052:	43db      	mvns	r3, r3
 8041054:	69ba      	ldr	r2, [r7, #24]
 8041056:	4013      	ands	r3, r2
 8041058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 804105a:	683b      	ldr	r3, [r7, #0]
 804105c:	685b      	ldr	r3, [r3, #4]
 804105e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041062:	2b00      	cmp	r3, #0
 8041064:	d003      	beq.n	804106e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8041066:	69ba      	ldr	r2, [r7, #24]
 8041068:	693b      	ldr	r3, [r7, #16]
 804106a:	4313      	orrs	r3, r2
 804106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 804106e:	4a34      	ldr	r2, [pc, #208]	; (8041140 <HAL_GPIO_Init+0x354>)
 8041070:	69bb      	ldr	r3, [r7, #24]
 8041072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8041074:	4b32      	ldr	r3, [pc, #200]	; (8041140 <HAL_GPIO_Init+0x354>)
 8041076:	685b      	ldr	r3, [r3, #4]
 8041078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804107a:	693b      	ldr	r3, [r7, #16]
 804107c:	43db      	mvns	r3, r3
 804107e:	69ba      	ldr	r2, [r7, #24]
 8041080:	4013      	ands	r3, r2
 8041082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8041084:	683b      	ldr	r3, [r7, #0]
 8041086:	685b      	ldr	r3, [r3, #4]
 8041088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804108c:	2b00      	cmp	r3, #0
 804108e:	d003      	beq.n	8041098 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8041090:	69ba      	ldr	r2, [r7, #24]
 8041092:	693b      	ldr	r3, [r7, #16]
 8041094:	4313      	orrs	r3, r2
 8041096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8041098:	4a29      	ldr	r2, [pc, #164]	; (8041140 <HAL_GPIO_Init+0x354>)
 804109a:	69bb      	ldr	r3, [r7, #24]
 804109c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 804109e:	4b28      	ldr	r3, [pc, #160]	; (8041140 <HAL_GPIO_Init+0x354>)
 80410a0:	689b      	ldr	r3, [r3, #8]
 80410a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80410a4:	693b      	ldr	r3, [r7, #16]
 80410a6:	43db      	mvns	r3, r3
 80410a8:	69ba      	ldr	r2, [r7, #24]
 80410aa:	4013      	ands	r3, r2
 80410ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80410ae:	683b      	ldr	r3, [r7, #0]
 80410b0:	685b      	ldr	r3, [r3, #4]
 80410b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80410b6:	2b00      	cmp	r3, #0
 80410b8:	d003      	beq.n	80410c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80410ba:	69ba      	ldr	r2, [r7, #24]
 80410bc:	693b      	ldr	r3, [r7, #16]
 80410be:	4313      	orrs	r3, r2
 80410c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80410c2:	4a1f      	ldr	r2, [pc, #124]	; (8041140 <HAL_GPIO_Init+0x354>)
 80410c4:	69bb      	ldr	r3, [r7, #24]
 80410c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80410c8:	4b1d      	ldr	r3, [pc, #116]	; (8041140 <HAL_GPIO_Init+0x354>)
 80410ca:	68db      	ldr	r3, [r3, #12]
 80410cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80410ce:	693b      	ldr	r3, [r7, #16]
 80410d0:	43db      	mvns	r3, r3
 80410d2:	69ba      	ldr	r2, [r7, #24]
 80410d4:	4013      	ands	r3, r2
 80410d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80410d8:	683b      	ldr	r3, [r7, #0]
 80410da:	685b      	ldr	r3, [r3, #4]
 80410dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80410e0:	2b00      	cmp	r3, #0
 80410e2:	d003      	beq.n	80410ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80410e4:	69ba      	ldr	r2, [r7, #24]
 80410e6:	693b      	ldr	r3, [r7, #16]
 80410e8:	4313      	orrs	r3, r2
 80410ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80410ec:	4a14      	ldr	r2, [pc, #80]	; (8041140 <HAL_GPIO_Init+0x354>)
 80410ee:	69bb      	ldr	r3, [r7, #24]
 80410f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80410f2:	69fb      	ldr	r3, [r7, #28]
 80410f4:	3301      	adds	r3, #1
 80410f6:	61fb      	str	r3, [r7, #28]
 80410f8:	69fb      	ldr	r3, [r7, #28]
 80410fa:	2b0f      	cmp	r3, #15
 80410fc:	f67f ae86 	bls.w	8040e0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8041100:	bf00      	nop
 8041102:	bf00      	nop
 8041104:	3724      	adds	r7, #36	; 0x24
 8041106:	46bd      	mov	sp, r7
 8041108:	f85d 7b04 	ldr.w	r7, [sp], #4
 804110c:	4770      	bx	lr
 804110e:	bf00      	nop
 8041110:	40023800 	.word	0x40023800
 8041114:	40013800 	.word	0x40013800
 8041118:	40020000 	.word	0x40020000
 804111c:	40020400 	.word	0x40020400
 8041120:	40020800 	.word	0x40020800
 8041124:	40020c00 	.word	0x40020c00
 8041128:	40021000 	.word	0x40021000
 804112c:	40021400 	.word	0x40021400
 8041130:	40021800 	.word	0x40021800
 8041134:	40021c00 	.word	0x40021c00
 8041138:	40022000 	.word	0x40022000
 804113c:	40022400 	.word	0x40022400
 8041140:	40013c00 	.word	0x40013c00

08041144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041144:	b480      	push	{r7}
 8041146:	b083      	sub	sp, #12
 8041148:	af00      	add	r7, sp, #0
 804114a:	6078      	str	r0, [r7, #4]
 804114c:	460b      	mov	r3, r1
 804114e:	807b      	strh	r3, [r7, #2]
 8041150:	4613      	mov	r3, r2
 8041152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8041154:	787b      	ldrb	r3, [r7, #1]
 8041156:	2b00      	cmp	r3, #0
 8041158:	d003      	beq.n	8041162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804115a:	887a      	ldrh	r2, [r7, #2]
 804115c:	687b      	ldr	r3, [r7, #4]
 804115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8041160:	e003      	b.n	804116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8041162:	887b      	ldrh	r3, [r7, #2]
 8041164:	041a      	lsls	r2, r3, #16
 8041166:	687b      	ldr	r3, [r7, #4]
 8041168:	619a      	str	r2, [r3, #24]
}
 804116a:	bf00      	nop
 804116c:	370c      	adds	r7, #12
 804116e:	46bd      	mov	sp, r7
 8041170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041174:	4770      	bx	lr
	...

08041178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041178:	b580      	push	{r7, lr}
 804117a:	b086      	sub	sp, #24
 804117c:	af00      	add	r7, sp, #0
 804117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8041180:	2300      	movs	r3, #0
 8041182:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041184:	687b      	ldr	r3, [r7, #4]
 8041186:	2b00      	cmp	r3, #0
 8041188:	d101      	bne.n	804118e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 804118a:	2301      	movs	r3, #1
 804118c:	e29b      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804118e:	687b      	ldr	r3, [r7, #4]
 8041190:	681b      	ldr	r3, [r3, #0]
 8041192:	f003 0301 	and.w	r3, r3, #1
 8041196:	2b00      	cmp	r3, #0
 8041198:	f000 8087 	beq.w	80412aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 804119c:	4b96      	ldr	r3, [pc, #600]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804119e:	689b      	ldr	r3, [r3, #8]
 80411a0:	f003 030c 	and.w	r3, r3, #12
 80411a4:	2b04      	cmp	r3, #4
 80411a6:	d00c      	beq.n	80411c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80411a8:	4b93      	ldr	r3, [pc, #588]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80411aa:	689b      	ldr	r3, [r3, #8]
 80411ac:	f003 030c 	and.w	r3, r3, #12
 80411b0:	2b08      	cmp	r3, #8
 80411b2:	d112      	bne.n	80411da <HAL_RCC_OscConfig+0x62>
 80411b4:	4b90      	ldr	r3, [pc, #576]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80411b6:	685b      	ldr	r3, [r3, #4]
 80411b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80411bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80411c0:	d10b      	bne.n	80411da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80411c2:	4b8d      	ldr	r3, [pc, #564]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80411c4:	681b      	ldr	r3, [r3, #0]
 80411c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80411ca:	2b00      	cmp	r3, #0
 80411cc:	d06c      	beq.n	80412a8 <HAL_RCC_OscConfig+0x130>
 80411ce:	687b      	ldr	r3, [r7, #4]
 80411d0:	685b      	ldr	r3, [r3, #4]
 80411d2:	2b00      	cmp	r3, #0
 80411d4:	d168      	bne.n	80412a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80411d6:	2301      	movs	r3, #1
 80411d8:	e275      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80411da:	687b      	ldr	r3, [r7, #4]
 80411dc:	685b      	ldr	r3, [r3, #4]
 80411de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80411e2:	d106      	bne.n	80411f2 <HAL_RCC_OscConfig+0x7a>
 80411e4:	4b84      	ldr	r3, [pc, #528]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80411e6:	681b      	ldr	r3, [r3, #0]
 80411e8:	4a83      	ldr	r2, [pc, #524]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80411ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80411ee:	6013      	str	r3, [r2, #0]
 80411f0:	e02e      	b.n	8041250 <HAL_RCC_OscConfig+0xd8>
 80411f2:	687b      	ldr	r3, [r7, #4]
 80411f4:	685b      	ldr	r3, [r3, #4]
 80411f6:	2b00      	cmp	r3, #0
 80411f8:	d10c      	bne.n	8041214 <HAL_RCC_OscConfig+0x9c>
 80411fa:	4b7f      	ldr	r3, [pc, #508]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80411fc:	681b      	ldr	r3, [r3, #0]
 80411fe:	4a7e      	ldr	r2, [pc, #504]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041204:	6013      	str	r3, [r2, #0]
 8041206:	4b7c      	ldr	r3, [pc, #496]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041208:	681b      	ldr	r3, [r3, #0]
 804120a:	4a7b      	ldr	r2, [pc, #492]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804120c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041210:	6013      	str	r3, [r2, #0]
 8041212:	e01d      	b.n	8041250 <HAL_RCC_OscConfig+0xd8>
 8041214:	687b      	ldr	r3, [r7, #4]
 8041216:	685b      	ldr	r3, [r3, #4]
 8041218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 804121c:	d10c      	bne.n	8041238 <HAL_RCC_OscConfig+0xc0>
 804121e:	4b76      	ldr	r3, [pc, #472]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041220:	681b      	ldr	r3, [r3, #0]
 8041222:	4a75      	ldr	r2, [pc, #468]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041228:	6013      	str	r3, [r2, #0]
 804122a:	4b73      	ldr	r3, [pc, #460]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804122c:	681b      	ldr	r3, [r3, #0]
 804122e:	4a72      	ldr	r2, [pc, #456]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041234:	6013      	str	r3, [r2, #0]
 8041236:	e00b      	b.n	8041250 <HAL_RCC_OscConfig+0xd8>
 8041238:	4b6f      	ldr	r3, [pc, #444]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804123a:	681b      	ldr	r3, [r3, #0]
 804123c:	4a6e      	ldr	r2, [pc, #440]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041242:	6013      	str	r3, [r2, #0]
 8041244:	4b6c      	ldr	r3, [pc, #432]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041246:	681b      	ldr	r3, [r3, #0]
 8041248:	4a6b      	ldr	r2, [pc, #428]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041250:	687b      	ldr	r3, [r7, #4]
 8041252:	685b      	ldr	r3, [r3, #4]
 8041254:	2b00      	cmp	r3, #0
 8041256:	d013      	beq.n	8041280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041258:	f7ff fcb2 	bl	8040bc0 <HAL_GetTick>
 804125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804125e:	e008      	b.n	8041272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041260:	f7ff fcae 	bl	8040bc0 <HAL_GetTick>
 8041264:	4602      	mov	r2, r0
 8041266:	693b      	ldr	r3, [r7, #16]
 8041268:	1ad3      	subs	r3, r2, r3
 804126a:	2b64      	cmp	r3, #100	; 0x64
 804126c:	d901      	bls.n	8041272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804126e:	2303      	movs	r3, #3
 8041270:	e229      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041272:	4b61      	ldr	r3, [pc, #388]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041274:	681b      	ldr	r3, [r3, #0]
 8041276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804127a:	2b00      	cmp	r3, #0
 804127c:	d0f0      	beq.n	8041260 <HAL_RCC_OscConfig+0xe8>
 804127e:	e014      	b.n	80412aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041280:	f7ff fc9e 	bl	8040bc0 <HAL_GetTick>
 8041284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8041286:	e008      	b.n	804129a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041288:	f7ff fc9a 	bl	8040bc0 <HAL_GetTick>
 804128c:	4602      	mov	r2, r0
 804128e:	693b      	ldr	r3, [r7, #16]
 8041290:	1ad3      	subs	r3, r2, r3
 8041292:	2b64      	cmp	r3, #100	; 0x64
 8041294:	d901      	bls.n	804129a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8041296:	2303      	movs	r3, #3
 8041298:	e215      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804129a:	4b57      	ldr	r3, [pc, #348]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804129c:	681b      	ldr	r3, [r3, #0]
 804129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80412a2:	2b00      	cmp	r3, #0
 80412a4:	d1f0      	bne.n	8041288 <HAL_RCC_OscConfig+0x110>
 80412a6:	e000      	b.n	80412aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80412a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80412aa:	687b      	ldr	r3, [r7, #4]
 80412ac:	681b      	ldr	r3, [r3, #0]
 80412ae:	f003 0302 	and.w	r3, r3, #2
 80412b2:	2b00      	cmp	r3, #0
 80412b4:	d069      	beq.n	804138a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80412b6:	4b50      	ldr	r3, [pc, #320]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80412b8:	689b      	ldr	r3, [r3, #8]
 80412ba:	f003 030c 	and.w	r3, r3, #12
 80412be:	2b00      	cmp	r3, #0
 80412c0:	d00b      	beq.n	80412da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80412c2:	4b4d      	ldr	r3, [pc, #308]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80412c4:	689b      	ldr	r3, [r3, #8]
 80412c6:	f003 030c 	and.w	r3, r3, #12
 80412ca:	2b08      	cmp	r3, #8
 80412cc:	d11c      	bne.n	8041308 <HAL_RCC_OscConfig+0x190>
 80412ce:	4b4a      	ldr	r3, [pc, #296]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80412d0:	685b      	ldr	r3, [r3, #4]
 80412d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80412d6:	2b00      	cmp	r3, #0
 80412d8:	d116      	bne.n	8041308 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80412da:	4b47      	ldr	r3, [pc, #284]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80412dc:	681b      	ldr	r3, [r3, #0]
 80412de:	f003 0302 	and.w	r3, r3, #2
 80412e2:	2b00      	cmp	r3, #0
 80412e4:	d005      	beq.n	80412f2 <HAL_RCC_OscConfig+0x17a>
 80412e6:	687b      	ldr	r3, [r7, #4]
 80412e8:	68db      	ldr	r3, [r3, #12]
 80412ea:	2b01      	cmp	r3, #1
 80412ec:	d001      	beq.n	80412f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80412ee:	2301      	movs	r3, #1
 80412f0:	e1e9      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80412f2:	4b41      	ldr	r3, [pc, #260]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80412f4:	681b      	ldr	r3, [r3, #0]
 80412f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80412fa:	687b      	ldr	r3, [r7, #4]
 80412fc:	691b      	ldr	r3, [r3, #16]
 80412fe:	00db      	lsls	r3, r3, #3
 8041300:	493d      	ldr	r1, [pc, #244]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041302:	4313      	orrs	r3, r2
 8041304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041306:	e040      	b.n	804138a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8041308:	687b      	ldr	r3, [r7, #4]
 804130a:	68db      	ldr	r3, [r3, #12]
 804130c:	2b00      	cmp	r3, #0
 804130e:	d023      	beq.n	8041358 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041310:	4b39      	ldr	r3, [pc, #228]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041312:	681b      	ldr	r3, [r3, #0]
 8041314:	4a38      	ldr	r2, [pc, #224]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041316:	f043 0301 	orr.w	r3, r3, #1
 804131a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804131c:	f7ff fc50 	bl	8040bc0 <HAL_GetTick>
 8041320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041322:	e008      	b.n	8041336 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041324:	f7ff fc4c 	bl	8040bc0 <HAL_GetTick>
 8041328:	4602      	mov	r2, r0
 804132a:	693b      	ldr	r3, [r7, #16]
 804132c:	1ad3      	subs	r3, r2, r3
 804132e:	2b02      	cmp	r3, #2
 8041330:	d901      	bls.n	8041336 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8041332:	2303      	movs	r3, #3
 8041334:	e1c7      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8041336:	4b30      	ldr	r3, [pc, #192]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041338:	681b      	ldr	r3, [r3, #0]
 804133a:	f003 0302 	and.w	r3, r3, #2
 804133e:	2b00      	cmp	r3, #0
 8041340:	d0f0      	beq.n	8041324 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041342:	4b2d      	ldr	r3, [pc, #180]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041344:	681b      	ldr	r3, [r3, #0]
 8041346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 804134a:	687b      	ldr	r3, [r7, #4]
 804134c:	691b      	ldr	r3, [r3, #16]
 804134e:	00db      	lsls	r3, r3, #3
 8041350:	4929      	ldr	r1, [pc, #164]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041352:	4313      	orrs	r3, r2
 8041354:	600b      	str	r3, [r1, #0]
 8041356:	e018      	b.n	804138a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041358:	4b27      	ldr	r3, [pc, #156]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804135a:	681b      	ldr	r3, [r3, #0]
 804135c:	4a26      	ldr	r2, [pc, #152]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 804135e:	f023 0301 	bic.w	r3, r3, #1
 8041362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041364:	f7ff fc2c 	bl	8040bc0 <HAL_GetTick>
 8041368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804136a:	e008      	b.n	804137e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804136c:	f7ff fc28 	bl	8040bc0 <HAL_GetTick>
 8041370:	4602      	mov	r2, r0
 8041372:	693b      	ldr	r3, [r7, #16]
 8041374:	1ad3      	subs	r3, r2, r3
 8041376:	2b02      	cmp	r3, #2
 8041378:	d901      	bls.n	804137e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 804137a:	2303      	movs	r3, #3
 804137c:	e1a3      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804137e:	4b1e      	ldr	r3, [pc, #120]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 8041380:	681b      	ldr	r3, [r3, #0]
 8041382:	f003 0302 	and.w	r3, r3, #2
 8041386:	2b00      	cmp	r3, #0
 8041388:	d1f0      	bne.n	804136c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804138a:	687b      	ldr	r3, [r7, #4]
 804138c:	681b      	ldr	r3, [r3, #0]
 804138e:	f003 0308 	and.w	r3, r3, #8
 8041392:	2b00      	cmp	r3, #0
 8041394:	d038      	beq.n	8041408 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8041396:	687b      	ldr	r3, [r7, #4]
 8041398:	695b      	ldr	r3, [r3, #20]
 804139a:	2b00      	cmp	r3, #0
 804139c:	d019      	beq.n	80413d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804139e:	4b16      	ldr	r3, [pc, #88]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80413a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413a2:	4a15      	ldr	r2, [pc, #84]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80413a4:	f043 0301 	orr.w	r3, r3, #1
 80413a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413aa:	f7ff fc09 	bl	8040bc0 <HAL_GetTick>
 80413ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80413b0:	e008      	b.n	80413c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80413b2:	f7ff fc05 	bl	8040bc0 <HAL_GetTick>
 80413b6:	4602      	mov	r2, r0
 80413b8:	693b      	ldr	r3, [r7, #16]
 80413ba:	1ad3      	subs	r3, r2, r3
 80413bc:	2b02      	cmp	r3, #2
 80413be:	d901      	bls.n	80413c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80413c0:	2303      	movs	r3, #3
 80413c2:	e180      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80413c4:	4b0c      	ldr	r3, [pc, #48]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80413c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413c8:	f003 0302 	and.w	r3, r3, #2
 80413cc:	2b00      	cmp	r3, #0
 80413ce:	d0f0      	beq.n	80413b2 <HAL_RCC_OscConfig+0x23a>
 80413d0:	e01a      	b.n	8041408 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80413d2:	4b09      	ldr	r3, [pc, #36]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80413d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80413d6:	4a08      	ldr	r2, [pc, #32]	; (80413f8 <HAL_RCC_OscConfig+0x280>)
 80413d8:	f023 0301 	bic.w	r3, r3, #1
 80413dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80413de:	f7ff fbef 	bl	8040bc0 <HAL_GetTick>
 80413e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80413e4:	e00a      	b.n	80413fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80413e6:	f7ff fbeb 	bl	8040bc0 <HAL_GetTick>
 80413ea:	4602      	mov	r2, r0
 80413ec:	693b      	ldr	r3, [r7, #16]
 80413ee:	1ad3      	subs	r3, r2, r3
 80413f0:	2b02      	cmp	r3, #2
 80413f2:	d903      	bls.n	80413fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80413f4:	2303      	movs	r3, #3
 80413f6:	e166      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
 80413f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80413fc:	4b92      	ldr	r3, [pc, #584]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80413fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041400:	f003 0302 	and.w	r3, r3, #2
 8041404:	2b00      	cmp	r3, #0
 8041406:	d1ee      	bne.n	80413e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041408:	687b      	ldr	r3, [r7, #4]
 804140a:	681b      	ldr	r3, [r3, #0]
 804140c:	f003 0304 	and.w	r3, r3, #4
 8041410:	2b00      	cmp	r3, #0
 8041412:	f000 80a4 	beq.w	804155e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041416:	4b8c      	ldr	r3, [pc, #560]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804141e:	2b00      	cmp	r3, #0
 8041420:	d10d      	bne.n	804143e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8041422:	4b89      	ldr	r3, [pc, #548]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041426:	4a88      	ldr	r2, [pc, #544]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804142c:	6413      	str	r3, [r2, #64]	; 0x40
 804142e:	4b86      	ldr	r3, [pc, #536]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041436:	60bb      	str	r3, [r7, #8]
 8041438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804143a:	2301      	movs	r3, #1
 804143c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804143e:	4b83      	ldr	r3, [pc, #524]	; (804164c <HAL_RCC_OscConfig+0x4d4>)
 8041440:	681b      	ldr	r3, [r3, #0]
 8041442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041446:	2b00      	cmp	r3, #0
 8041448:	d118      	bne.n	804147c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 804144a:	4b80      	ldr	r3, [pc, #512]	; (804164c <HAL_RCC_OscConfig+0x4d4>)
 804144c:	681b      	ldr	r3, [r3, #0]
 804144e:	4a7f      	ldr	r2, [pc, #508]	; (804164c <HAL_RCC_OscConfig+0x4d4>)
 8041450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041456:	f7ff fbb3 	bl	8040bc0 <HAL_GetTick>
 804145a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804145c:	e008      	b.n	8041470 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804145e:	f7ff fbaf 	bl	8040bc0 <HAL_GetTick>
 8041462:	4602      	mov	r2, r0
 8041464:	693b      	ldr	r3, [r7, #16]
 8041466:	1ad3      	subs	r3, r2, r3
 8041468:	2b64      	cmp	r3, #100	; 0x64
 804146a:	d901      	bls.n	8041470 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 804146c:	2303      	movs	r3, #3
 804146e:	e12a      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041470:	4b76      	ldr	r3, [pc, #472]	; (804164c <HAL_RCC_OscConfig+0x4d4>)
 8041472:	681b      	ldr	r3, [r3, #0]
 8041474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041478:	2b00      	cmp	r3, #0
 804147a:	d0f0      	beq.n	804145e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 804147c:	687b      	ldr	r3, [r7, #4]
 804147e:	689b      	ldr	r3, [r3, #8]
 8041480:	2b01      	cmp	r3, #1
 8041482:	d106      	bne.n	8041492 <HAL_RCC_OscConfig+0x31a>
 8041484:	4b70      	ldr	r3, [pc, #448]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041488:	4a6f      	ldr	r2, [pc, #444]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 804148a:	f043 0301 	orr.w	r3, r3, #1
 804148e:	6713      	str	r3, [r2, #112]	; 0x70
 8041490:	e02d      	b.n	80414ee <HAL_RCC_OscConfig+0x376>
 8041492:	687b      	ldr	r3, [r7, #4]
 8041494:	689b      	ldr	r3, [r3, #8]
 8041496:	2b00      	cmp	r3, #0
 8041498:	d10c      	bne.n	80414b4 <HAL_RCC_OscConfig+0x33c>
 804149a:	4b6b      	ldr	r3, [pc, #428]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 804149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804149e:	4a6a      	ldr	r2, [pc, #424]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414a0:	f023 0301 	bic.w	r3, r3, #1
 80414a4:	6713      	str	r3, [r2, #112]	; 0x70
 80414a6:	4b68      	ldr	r3, [pc, #416]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414aa:	4a67      	ldr	r2, [pc, #412]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414ac:	f023 0304 	bic.w	r3, r3, #4
 80414b0:	6713      	str	r3, [r2, #112]	; 0x70
 80414b2:	e01c      	b.n	80414ee <HAL_RCC_OscConfig+0x376>
 80414b4:	687b      	ldr	r3, [r7, #4]
 80414b6:	689b      	ldr	r3, [r3, #8]
 80414b8:	2b05      	cmp	r3, #5
 80414ba:	d10c      	bne.n	80414d6 <HAL_RCC_OscConfig+0x35e>
 80414bc:	4b62      	ldr	r3, [pc, #392]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414c0:	4a61      	ldr	r2, [pc, #388]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414c2:	f043 0304 	orr.w	r3, r3, #4
 80414c6:	6713      	str	r3, [r2, #112]	; 0x70
 80414c8:	4b5f      	ldr	r3, [pc, #380]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414cc:	4a5e      	ldr	r2, [pc, #376]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414ce:	f043 0301 	orr.w	r3, r3, #1
 80414d2:	6713      	str	r3, [r2, #112]	; 0x70
 80414d4:	e00b      	b.n	80414ee <HAL_RCC_OscConfig+0x376>
 80414d6:	4b5c      	ldr	r3, [pc, #368]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414da:	4a5b      	ldr	r2, [pc, #364]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414dc:	f023 0301 	bic.w	r3, r3, #1
 80414e0:	6713      	str	r3, [r2, #112]	; 0x70
 80414e2:	4b59      	ldr	r3, [pc, #356]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80414e6:	4a58      	ldr	r2, [pc, #352]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80414e8:	f023 0304 	bic.w	r3, r3, #4
 80414ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80414ee:	687b      	ldr	r3, [r7, #4]
 80414f0:	689b      	ldr	r3, [r3, #8]
 80414f2:	2b00      	cmp	r3, #0
 80414f4:	d015      	beq.n	8041522 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80414f6:	f7ff fb63 	bl	8040bc0 <HAL_GetTick>
 80414fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80414fc:	e00a      	b.n	8041514 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80414fe:	f7ff fb5f 	bl	8040bc0 <HAL_GetTick>
 8041502:	4602      	mov	r2, r0
 8041504:	693b      	ldr	r3, [r7, #16]
 8041506:	1ad3      	subs	r3, r2, r3
 8041508:	f241 3288 	movw	r2, #5000	; 0x1388
 804150c:	4293      	cmp	r3, r2
 804150e:	d901      	bls.n	8041514 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8041510:	2303      	movs	r3, #3
 8041512:	e0d8      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041514:	4b4c      	ldr	r3, [pc, #304]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041518:	f003 0302 	and.w	r3, r3, #2
 804151c:	2b00      	cmp	r3, #0
 804151e:	d0ee      	beq.n	80414fe <HAL_RCC_OscConfig+0x386>
 8041520:	e014      	b.n	804154c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041522:	f7ff fb4d 	bl	8040bc0 <HAL_GetTick>
 8041526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041528:	e00a      	b.n	8041540 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804152a:	f7ff fb49 	bl	8040bc0 <HAL_GetTick>
 804152e:	4602      	mov	r2, r0
 8041530:	693b      	ldr	r3, [r7, #16]
 8041532:	1ad3      	subs	r3, r2, r3
 8041534:	f241 3288 	movw	r2, #5000	; 0x1388
 8041538:	4293      	cmp	r3, r2
 804153a:	d901      	bls.n	8041540 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 804153c:	2303      	movs	r3, #3
 804153e:	e0c2      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041540:	4b41      	ldr	r3, [pc, #260]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041544:	f003 0302 	and.w	r3, r3, #2
 8041548:	2b00      	cmp	r3, #0
 804154a:	d1ee      	bne.n	804152a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 804154c:	7dfb      	ldrb	r3, [r7, #23]
 804154e:	2b01      	cmp	r3, #1
 8041550:	d105      	bne.n	804155e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041552:	4b3d      	ldr	r3, [pc, #244]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041556:	4a3c      	ldr	r2, [pc, #240]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804155c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 804155e:	687b      	ldr	r3, [r7, #4]
 8041560:	699b      	ldr	r3, [r3, #24]
 8041562:	2b00      	cmp	r3, #0
 8041564:	f000 80ae 	beq.w	80416c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041568:	4b37      	ldr	r3, [pc, #220]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 804156a:	689b      	ldr	r3, [r3, #8]
 804156c:	f003 030c 	and.w	r3, r3, #12
 8041570:	2b08      	cmp	r3, #8
 8041572:	d06d      	beq.n	8041650 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041574:	687b      	ldr	r3, [r7, #4]
 8041576:	699b      	ldr	r3, [r3, #24]
 8041578:	2b02      	cmp	r3, #2
 804157a:	d14b      	bne.n	8041614 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804157c:	4b32      	ldr	r3, [pc, #200]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 804157e:	681b      	ldr	r3, [r3, #0]
 8041580:	4a31      	ldr	r2, [pc, #196]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041588:	f7ff fb1a 	bl	8040bc0 <HAL_GetTick>
 804158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804158e:	e008      	b.n	80415a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041590:	f7ff fb16 	bl	8040bc0 <HAL_GetTick>
 8041594:	4602      	mov	r2, r0
 8041596:	693b      	ldr	r3, [r7, #16]
 8041598:	1ad3      	subs	r3, r2, r3
 804159a:	2b02      	cmp	r3, #2
 804159c:	d901      	bls.n	80415a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 804159e:	2303      	movs	r3, #3
 80415a0:	e091      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80415a2:	4b29      	ldr	r3, [pc, #164]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80415a4:	681b      	ldr	r3, [r3, #0]
 80415a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80415aa:	2b00      	cmp	r3, #0
 80415ac:	d1f0      	bne.n	8041590 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80415ae:	687b      	ldr	r3, [r7, #4]
 80415b0:	69da      	ldr	r2, [r3, #28]
 80415b2:	687b      	ldr	r3, [r7, #4]
 80415b4:	6a1b      	ldr	r3, [r3, #32]
 80415b6:	431a      	orrs	r2, r3
 80415b8:	687b      	ldr	r3, [r7, #4]
 80415ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80415bc:	019b      	lsls	r3, r3, #6
 80415be:	431a      	orrs	r2, r3
 80415c0:	687b      	ldr	r3, [r7, #4]
 80415c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80415c4:	085b      	lsrs	r3, r3, #1
 80415c6:	3b01      	subs	r3, #1
 80415c8:	041b      	lsls	r3, r3, #16
 80415ca:	431a      	orrs	r2, r3
 80415cc:	687b      	ldr	r3, [r7, #4]
 80415ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80415d0:	061b      	lsls	r3, r3, #24
 80415d2:	431a      	orrs	r2, r3
 80415d4:	687b      	ldr	r3, [r7, #4]
 80415d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80415d8:	071b      	lsls	r3, r3, #28
 80415da:	491b      	ldr	r1, [pc, #108]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80415dc:	4313      	orrs	r3, r2
 80415de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80415e0:	4b19      	ldr	r3, [pc, #100]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80415e2:	681b      	ldr	r3, [r3, #0]
 80415e4:	4a18      	ldr	r2, [pc, #96]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 80415e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80415ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80415ec:	f7ff fae8 	bl	8040bc0 <HAL_GetTick>
 80415f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80415f2:	e008      	b.n	8041606 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80415f4:	f7ff fae4 	bl	8040bc0 <HAL_GetTick>
 80415f8:	4602      	mov	r2, r0
 80415fa:	693b      	ldr	r3, [r7, #16]
 80415fc:	1ad3      	subs	r3, r2, r3
 80415fe:	2b02      	cmp	r3, #2
 8041600:	d901      	bls.n	8041606 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8041602:	2303      	movs	r3, #3
 8041604:	e05f      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041606:	4b10      	ldr	r3, [pc, #64]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041608:	681b      	ldr	r3, [r3, #0]
 804160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804160e:	2b00      	cmp	r3, #0
 8041610:	d0f0      	beq.n	80415f4 <HAL_RCC_OscConfig+0x47c>
 8041612:	e057      	b.n	80416c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041614:	4b0c      	ldr	r3, [pc, #48]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 8041616:	681b      	ldr	r3, [r3, #0]
 8041618:	4a0b      	ldr	r2, [pc, #44]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 804161a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804161e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041620:	f7ff face 	bl	8040bc0 <HAL_GetTick>
 8041624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041626:	e008      	b.n	804163a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041628:	f7ff faca 	bl	8040bc0 <HAL_GetTick>
 804162c:	4602      	mov	r2, r0
 804162e:	693b      	ldr	r3, [r7, #16]
 8041630:	1ad3      	subs	r3, r2, r3
 8041632:	2b02      	cmp	r3, #2
 8041634:	d901      	bls.n	804163a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8041636:	2303      	movs	r3, #3
 8041638:	e045      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 804163a:	4b03      	ldr	r3, [pc, #12]	; (8041648 <HAL_RCC_OscConfig+0x4d0>)
 804163c:	681b      	ldr	r3, [r3, #0]
 804163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041642:	2b00      	cmp	r3, #0
 8041644:	d1f0      	bne.n	8041628 <HAL_RCC_OscConfig+0x4b0>
 8041646:	e03d      	b.n	80416c4 <HAL_RCC_OscConfig+0x54c>
 8041648:	40023800 	.word	0x40023800
 804164c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8041650:	4b1f      	ldr	r3, [pc, #124]	; (80416d0 <HAL_RCC_OscConfig+0x558>)
 8041652:	685b      	ldr	r3, [r3, #4]
 8041654:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041656:	687b      	ldr	r3, [r7, #4]
 8041658:	699b      	ldr	r3, [r3, #24]
 804165a:	2b01      	cmp	r3, #1
 804165c:	d030      	beq.n	80416c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804165e:	68fb      	ldr	r3, [r7, #12]
 8041660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8041664:	687b      	ldr	r3, [r7, #4]
 8041666:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041668:	429a      	cmp	r2, r3
 804166a:	d129      	bne.n	80416c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 804166c:	68fb      	ldr	r3, [r7, #12]
 804166e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8041672:	687b      	ldr	r3, [r7, #4]
 8041674:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041676:	429a      	cmp	r2, r3
 8041678:	d122      	bne.n	80416c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804167a:	68fa      	ldr	r2, [r7, #12]
 804167c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8041680:	4013      	ands	r3, r2
 8041682:	687a      	ldr	r2, [r7, #4]
 8041684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8041686:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8041688:	4293      	cmp	r3, r2
 804168a:	d119      	bne.n	80416c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 804168c:	68fb      	ldr	r3, [r7, #12]
 804168e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8041692:	687b      	ldr	r3, [r7, #4]
 8041694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041696:	085b      	lsrs	r3, r3, #1
 8041698:	3b01      	subs	r3, #1
 804169a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 804169c:	429a      	cmp	r2, r3
 804169e:	d10f      	bne.n	80416c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80416a0:	68fb      	ldr	r3, [r7, #12]
 80416a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80416a6:	687b      	ldr	r3, [r7, #4]
 80416a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80416aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80416ac:	429a      	cmp	r2, r3
 80416ae:	d107      	bne.n	80416c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80416b0:	68fb      	ldr	r3, [r7, #12]
 80416b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80416b6:	687b      	ldr	r3, [r7, #4]
 80416b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80416bc:	429a      	cmp	r2, r3
 80416be:	d001      	beq.n	80416c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80416c0:	2301      	movs	r3, #1
 80416c2:	e000      	b.n	80416c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80416c4:	2300      	movs	r3, #0
}
 80416c6:	4618      	mov	r0, r3
 80416c8:	3718      	adds	r7, #24
 80416ca:	46bd      	mov	sp, r7
 80416cc:	bd80      	pop	{r7, pc}
 80416ce:	bf00      	nop
 80416d0:	40023800 	.word	0x40023800

080416d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80416d4:	b580      	push	{r7, lr}
 80416d6:	b084      	sub	sp, #16
 80416d8:	af00      	add	r7, sp, #0
 80416da:	6078      	str	r0, [r7, #4]
 80416dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80416de:	2300      	movs	r3, #0
 80416e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80416e2:	687b      	ldr	r3, [r7, #4]
 80416e4:	2b00      	cmp	r3, #0
 80416e6:	d101      	bne.n	80416ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80416e8:	2301      	movs	r3, #1
 80416ea:	e0d0      	b.n	804188e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80416ec:	4b6a      	ldr	r3, [pc, #424]	; (8041898 <HAL_RCC_ClockConfig+0x1c4>)
 80416ee:	681b      	ldr	r3, [r3, #0]
 80416f0:	f003 030f 	and.w	r3, r3, #15
 80416f4:	683a      	ldr	r2, [r7, #0]
 80416f6:	429a      	cmp	r2, r3
 80416f8:	d910      	bls.n	804171c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80416fa:	4b67      	ldr	r3, [pc, #412]	; (8041898 <HAL_RCC_ClockConfig+0x1c4>)
 80416fc:	681b      	ldr	r3, [r3, #0]
 80416fe:	f023 020f 	bic.w	r2, r3, #15
 8041702:	4965      	ldr	r1, [pc, #404]	; (8041898 <HAL_RCC_ClockConfig+0x1c4>)
 8041704:	683b      	ldr	r3, [r7, #0]
 8041706:	4313      	orrs	r3, r2
 8041708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804170a:	4b63      	ldr	r3, [pc, #396]	; (8041898 <HAL_RCC_ClockConfig+0x1c4>)
 804170c:	681b      	ldr	r3, [r3, #0]
 804170e:	f003 030f 	and.w	r3, r3, #15
 8041712:	683a      	ldr	r2, [r7, #0]
 8041714:	429a      	cmp	r2, r3
 8041716:	d001      	beq.n	804171c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041718:	2301      	movs	r3, #1
 804171a:	e0b8      	b.n	804188e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804171c:	687b      	ldr	r3, [r7, #4]
 804171e:	681b      	ldr	r3, [r3, #0]
 8041720:	f003 0302 	and.w	r3, r3, #2
 8041724:	2b00      	cmp	r3, #0
 8041726:	d020      	beq.n	804176a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041728:	687b      	ldr	r3, [r7, #4]
 804172a:	681b      	ldr	r3, [r3, #0]
 804172c:	f003 0304 	and.w	r3, r3, #4
 8041730:	2b00      	cmp	r3, #0
 8041732:	d005      	beq.n	8041740 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8041734:	4b59      	ldr	r3, [pc, #356]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041736:	689b      	ldr	r3, [r3, #8]
 8041738:	4a58      	ldr	r2, [pc, #352]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 804173a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 804173e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041740:	687b      	ldr	r3, [r7, #4]
 8041742:	681b      	ldr	r3, [r3, #0]
 8041744:	f003 0308 	and.w	r3, r3, #8
 8041748:	2b00      	cmp	r3, #0
 804174a:	d005      	beq.n	8041758 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 804174c:	4b53      	ldr	r3, [pc, #332]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 804174e:	689b      	ldr	r3, [r3, #8]
 8041750:	4a52      	ldr	r2, [pc, #328]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8041756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041758:	4b50      	ldr	r3, [pc, #320]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 804175a:	689b      	ldr	r3, [r3, #8]
 804175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041760:	687b      	ldr	r3, [r7, #4]
 8041762:	689b      	ldr	r3, [r3, #8]
 8041764:	494d      	ldr	r1, [pc, #308]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041766:	4313      	orrs	r3, r2
 8041768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804176a:	687b      	ldr	r3, [r7, #4]
 804176c:	681b      	ldr	r3, [r3, #0]
 804176e:	f003 0301 	and.w	r3, r3, #1
 8041772:	2b00      	cmp	r3, #0
 8041774:	d040      	beq.n	80417f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041776:	687b      	ldr	r3, [r7, #4]
 8041778:	685b      	ldr	r3, [r3, #4]
 804177a:	2b01      	cmp	r3, #1
 804177c:	d107      	bne.n	804178e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804177e:	4b47      	ldr	r3, [pc, #284]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041780:	681b      	ldr	r3, [r3, #0]
 8041782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041786:	2b00      	cmp	r3, #0
 8041788:	d115      	bne.n	80417b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 804178a:	2301      	movs	r3, #1
 804178c:	e07f      	b.n	804188e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 804178e:	687b      	ldr	r3, [r7, #4]
 8041790:	685b      	ldr	r3, [r3, #4]
 8041792:	2b02      	cmp	r3, #2
 8041794:	d107      	bne.n	80417a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041796:	4b41      	ldr	r3, [pc, #260]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041798:	681b      	ldr	r3, [r3, #0]
 804179a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804179e:	2b00      	cmp	r3, #0
 80417a0:	d109      	bne.n	80417b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80417a2:	2301      	movs	r3, #1
 80417a4:	e073      	b.n	804188e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80417a6:	4b3d      	ldr	r3, [pc, #244]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 80417a8:	681b      	ldr	r3, [r3, #0]
 80417aa:	f003 0302 	and.w	r3, r3, #2
 80417ae:	2b00      	cmp	r3, #0
 80417b0:	d101      	bne.n	80417b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80417b2:	2301      	movs	r3, #1
 80417b4:	e06b      	b.n	804188e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80417b6:	4b39      	ldr	r3, [pc, #228]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 80417b8:	689b      	ldr	r3, [r3, #8]
 80417ba:	f023 0203 	bic.w	r2, r3, #3
 80417be:	687b      	ldr	r3, [r7, #4]
 80417c0:	685b      	ldr	r3, [r3, #4]
 80417c2:	4936      	ldr	r1, [pc, #216]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 80417c4:	4313      	orrs	r3, r2
 80417c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80417c8:	f7ff f9fa 	bl	8040bc0 <HAL_GetTick>
 80417cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80417ce:	e00a      	b.n	80417e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80417d0:	f7ff f9f6 	bl	8040bc0 <HAL_GetTick>
 80417d4:	4602      	mov	r2, r0
 80417d6:	68fb      	ldr	r3, [r7, #12]
 80417d8:	1ad3      	subs	r3, r2, r3
 80417da:	f241 3288 	movw	r2, #5000	; 0x1388
 80417de:	4293      	cmp	r3, r2
 80417e0:	d901      	bls.n	80417e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80417e2:	2303      	movs	r3, #3
 80417e4:	e053      	b.n	804188e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80417e6:	4b2d      	ldr	r3, [pc, #180]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 80417e8:	689b      	ldr	r3, [r3, #8]
 80417ea:	f003 020c 	and.w	r2, r3, #12
 80417ee:	687b      	ldr	r3, [r7, #4]
 80417f0:	685b      	ldr	r3, [r3, #4]
 80417f2:	009b      	lsls	r3, r3, #2
 80417f4:	429a      	cmp	r2, r3
 80417f6:	d1eb      	bne.n	80417d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80417f8:	4b27      	ldr	r3, [pc, #156]	; (8041898 <HAL_RCC_ClockConfig+0x1c4>)
 80417fa:	681b      	ldr	r3, [r3, #0]
 80417fc:	f003 030f 	and.w	r3, r3, #15
 8041800:	683a      	ldr	r2, [r7, #0]
 8041802:	429a      	cmp	r2, r3
 8041804:	d210      	bcs.n	8041828 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041806:	4b24      	ldr	r3, [pc, #144]	; (8041898 <HAL_RCC_ClockConfig+0x1c4>)
 8041808:	681b      	ldr	r3, [r3, #0]
 804180a:	f023 020f 	bic.w	r2, r3, #15
 804180e:	4922      	ldr	r1, [pc, #136]	; (8041898 <HAL_RCC_ClockConfig+0x1c4>)
 8041810:	683b      	ldr	r3, [r7, #0]
 8041812:	4313      	orrs	r3, r2
 8041814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041816:	4b20      	ldr	r3, [pc, #128]	; (8041898 <HAL_RCC_ClockConfig+0x1c4>)
 8041818:	681b      	ldr	r3, [r3, #0]
 804181a:	f003 030f 	and.w	r3, r3, #15
 804181e:	683a      	ldr	r2, [r7, #0]
 8041820:	429a      	cmp	r2, r3
 8041822:	d001      	beq.n	8041828 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8041824:	2301      	movs	r3, #1
 8041826:	e032      	b.n	804188e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041828:	687b      	ldr	r3, [r7, #4]
 804182a:	681b      	ldr	r3, [r3, #0]
 804182c:	f003 0304 	and.w	r3, r3, #4
 8041830:	2b00      	cmp	r3, #0
 8041832:	d008      	beq.n	8041846 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041834:	4b19      	ldr	r3, [pc, #100]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041836:	689b      	ldr	r3, [r3, #8]
 8041838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 804183c:	687b      	ldr	r3, [r7, #4]
 804183e:	68db      	ldr	r3, [r3, #12]
 8041840:	4916      	ldr	r1, [pc, #88]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041842:	4313      	orrs	r3, r2
 8041844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041846:	687b      	ldr	r3, [r7, #4]
 8041848:	681b      	ldr	r3, [r3, #0]
 804184a:	f003 0308 	and.w	r3, r3, #8
 804184e:	2b00      	cmp	r3, #0
 8041850:	d009      	beq.n	8041866 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8041852:	4b12      	ldr	r3, [pc, #72]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041854:	689b      	ldr	r3, [r3, #8]
 8041856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 804185a:	687b      	ldr	r3, [r7, #4]
 804185c:	691b      	ldr	r3, [r3, #16]
 804185e:	00db      	lsls	r3, r3, #3
 8041860:	490e      	ldr	r1, [pc, #56]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 8041862:	4313      	orrs	r3, r2
 8041864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8041866:	f000 f821 	bl	80418ac <HAL_RCC_GetSysClockFreq>
 804186a:	4602      	mov	r2, r0
 804186c:	4b0b      	ldr	r3, [pc, #44]	; (804189c <HAL_RCC_ClockConfig+0x1c8>)
 804186e:	689b      	ldr	r3, [r3, #8]
 8041870:	091b      	lsrs	r3, r3, #4
 8041872:	f003 030f 	and.w	r3, r3, #15
 8041876:	490a      	ldr	r1, [pc, #40]	; (80418a0 <HAL_RCC_ClockConfig+0x1cc>)
 8041878:	5ccb      	ldrb	r3, [r1, r3]
 804187a:	fa22 f303 	lsr.w	r3, r2, r3
 804187e:	4a09      	ldr	r2, [pc, #36]	; (80418a4 <HAL_RCC_ClockConfig+0x1d0>)
 8041880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8041882:	4b09      	ldr	r3, [pc, #36]	; (80418a8 <HAL_RCC_ClockConfig+0x1d4>)
 8041884:	681b      	ldr	r3, [r3, #0]
 8041886:	4618      	mov	r0, r3
 8041888:	f7ff f956 	bl	8040b38 <HAL_InitTick>

  return HAL_OK;
 804188c:	2300      	movs	r3, #0
}
 804188e:	4618      	mov	r0, r3
 8041890:	3710      	adds	r7, #16
 8041892:	46bd      	mov	sp, r7
 8041894:	bd80      	pop	{r7, pc}
 8041896:	bf00      	nop
 8041898:	40023c00 	.word	0x40023c00
 804189c:	40023800 	.word	0x40023800
 80418a0:	08043c04 	.word	0x08043c04
 80418a4:	20000000 	.word	0x20000000
 80418a8:	20000004 	.word	0x20000004

080418ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80418ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80418b0:	b090      	sub	sp, #64	; 0x40
 80418b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80418b4:	2300      	movs	r3, #0
 80418b6:	637b      	str	r3, [r7, #52]	; 0x34
 80418b8:	2300      	movs	r3, #0
 80418ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80418bc:	2300      	movs	r3, #0
 80418be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80418c0:	2300      	movs	r3, #0
 80418c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80418c4:	4b59      	ldr	r3, [pc, #356]	; (8041a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80418c6:	689b      	ldr	r3, [r3, #8]
 80418c8:	f003 030c 	and.w	r3, r3, #12
 80418cc:	2b08      	cmp	r3, #8
 80418ce:	d00d      	beq.n	80418ec <HAL_RCC_GetSysClockFreq+0x40>
 80418d0:	2b08      	cmp	r3, #8
 80418d2:	f200 80a1 	bhi.w	8041a18 <HAL_RCC_GetSysClockFreq+0x16c>
 80418d6:	2b00      	cmp	r3, #0
 80418d8:	d002      	beq.n	80418e0 <HAL_RCC_GetSysClockFreq+0x34>
 80418da:	2b04      	cmp	r3, #4
 80418dc:	d003      	beq.n	80418e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80418de:	e09b      	b.n	8041a18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80418e0:	4b53      	ldr	r3, [pc, #332]	; (8041a30 <HAL_RCC_GetSysClockFreq+0x184>)
 80418e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80418e4:	e09b      	b.n	8041a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80418e6:	4b53      	ldr	r3, [pc, #332]	; (8041a34 <HAL_RCC_GetSysClockFreq+0x188>)
 80418e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80418ea:	e098      	b.n	8041a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80418ec:	4b4f      	ldr	r3, [pc, #316]	; (8041a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80418ee:	685b      	ldr	r3, [r3, #4]
 80418f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80418f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80418f6:	4b4d      	ldr	r3, [pc, #308]	; (8041a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80418f8:	685b      	ldr	r3, [r3, #4]
 80418fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80418fe:	2b00      	cmp	r3, #0
 8041900:	d028      	beq.n	8041954 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041902:	4b4a      	ldr	r3, [pc, #296]	; (8041a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8041904:	685b      	ldr	r3, [r3, #4]
 8041906:	099b      	lsrs	r3, r3, #6
 8041908:	2200      	movs	r2, #0
 804190a:	623b      	str	r3, [r7, #32]
 804190c:	627a      	str	r2, [r7, #36]	; 0x24
 804190e:	6a3b      	ldr	r3, [r7, #32]
 8041910:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8041914:	2100      	movs	r1, #0
 8041916:	4b47      	ldr	r3, [pc, #284]	; (8041a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8041918:	fb03 f201 	mul.w	r2, r3, r1
 804191c:	2300      	movs	r3, #0
 804191e:	fb00 f303 	mul.w	r3, r0, r3
 8041922:	4413      	add	r3, r2
 8041924:	4a43      	ldr	r2, [pc, #268]	; (8041a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8041926:	fba0 1202 	umull	r1, r2, r0, r2
 804192a:	62fa      	str	r2, [r7, #44]	; 0x2c
 804192c:	460a      	mov	r2, r1
 804192e:	62ba      	str	r2, [r7, #40]	; 0x28
 8041930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8041932:	4413      	add	r3, r2
 8041934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8041936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041938:	2200      	movs	r2, #0
 804193a:	61bb      	str	r3, [r7, #24]
 804193c:	61fa      	str	r2, [r7, #28]
 804193e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8041942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8041946:	f7fe fccb 	bl	80402e0 <__aeabi_uldivmod>
 804194a:	4602      	mov	r2, r0
 804194c:	460b      	mov	r3, r1
 804194e:	4613      	mov	r3, r2
 8041950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8041952:	e053      	b.n	80419fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8041954:	4b35      	ldr	r3, [pc, #212]	; (8041a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8041956:	685b      	ldr	r3, [r3, #4]
 8041958:	099b      	lsrs	r3, r3, #6
 804195a:	2200      	movs	r2, #0
 804195c:	613b      	str	r3, [r7, #16]
 804195e:	617a      	str	r2, [r7, #20]
 8041960:	693b      	ldr	r3, [r7, #16]
 8041962:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8041966:	f04f 0b00 	mov.w	fp, #0
 804196a:	4652      	mov	r2, sl
 804196c:	465b      	mov	r3, fp
 804196e:	f04f 0000 	mov.w	r0, #0
 8041972:	f04f 0100 	mov.w	r1, #0
 8041976:	0159      	lsls	r1, r3, #5
 8041978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 804197c:	0150      	lsls	r0, r2, #5
 804197e:	4602      	mov	r2, r0
 8041980:	460b      	mov	r3, r1
 8041982:	ebb2 080a 	subs.w	r8, r2, sl
 8041986:	eb63 090b 	sbc.w	r9, r3, fp
 804198a:	f04f 0200 	mov.w	r2, #0
 804198e:	f04f 0300 	mov.w	r3, #0
 8041992:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8041996:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 804199a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 804199e:	ebb2 0408 	subs.w	r4, r2, r8
 80419a2:	eb63 0509 	sbc.w	r5, r3, r9
 80419a6:	f04f 0200 	mov.w	r2, #0
 80419aa:	f04f 0300 	mov.w	r3, #0
 80419ae:	00eb      	lsls	r3, r5, #3
 80419b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80419b4:	00e2      	lsls	r2, r4, #3
 80419b6:	4614      	mov	r4, r2
 80419b8:	461d      	mov	r5, r3
 80419ba:	eb14 030a 	adds.w	r3, r4, sl
 80419be:	603b      	str	r3, [r7, #0]
 80419c0:	eb45 030b 	adc.w	r3, r5, fp
 80419c4:	607b      	str	r3, [r7, #4]
 80419c6:	f04f 0200 	mov.w	r2, #0
 80419ca:	f04f 0300 	mov.w	r3, #0
 80419ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80419d2:	4629      	mov	r1, r5
 80419d4:	028b      	lsls	r3, r1, #10
 80419d6:	4621      	mov	r1, r4
 80419d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80419dc:	4621      	mov	r1, r4
 80419de:	028a      	lsls	r2, r1, #10
 80419e0:	4610      	mov	r0, r2
 80419e2:	4619      	mov	r1, r3
 80419e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80419e6:	2200      	movs	r2, #0
 80419e8:	60bb      	str	r3, [r7, #8]
 80419ea:	60fa      	str	r2, [r7, #12]
 80419ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80419f0:	f7fe fc76 	bl	80402e0 <__aeabi_uldivmod>
 80419f4:	4602      	mov	r2, r0
 80419f6:	460b      	mov	r3, r1
 80419f8:	4613      	mov	r3, r2
 80419fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80419fc:	4b0b      	ldr	r3, [pc, #44]	; (8041a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80419fe:	685b      	ldr	r3, [r3, #4]
 8041a00:	0c1b      	lsrs	r3, r3, #16
 8041a02:	f003 0303 	and.w	r3, r3, #3
 8041a06:	3301      	adds	r3, #1
 8041a08:	005b      	lsls	r3, r3, #1
 8041a0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8041a0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8041a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8041a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8041a14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041a16:	e002      	b.n	8041a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8041a18:	4b05      	ldr	r3, [pc, #20]	; (8041a30 <HAL_RCC_GetSysClockFreq+0x184>)
 8041a1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8041a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8041a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8041a20:	4618      	mov	r0, r3
 8041a22:	3740      	adds	r7, #64	; 0x40
 8041a24:	46bd      	mov	sp, r7
 8041a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041a2a:	bf00      	nop
 8041a2c:	40023800 	.word	0x40023800
 8041a30:	00f42400 	.word	0x00f42400
 8041a34:	017d7840 	.word	0x017d7840

08041a38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041a38:	b480      	push	{r7}
 8041a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041a3c:	4b03      	ldr	r3, [pc, #12]	; (8041a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8041a3e:	681b      	ldr	r3, [r3, #0]
}
 8041a40:	4618      	mov	r0, r3
 8041a42:	46bd      	mov	sp, r7
 8041a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a48:	4770      	bx	lr
 8041a4a:	bf00      	nop
 8041a4c:	20000000 	.word	0x20000000

08041a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041a50:	b580      	push	{r7, lr}
 8041a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041a54:	f7ff fff0 	bl	8041a38 <HAL_RCC_GetHCLKFreq>
 8041a58:	4602      	mov	r2, r0
 8041a5a:	4b05      	ldr	r3, [pc, #20]	; (8041a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8041a5c:	689b      	ldr	r3, [r3, #8]
 8041a5e:	0a9b      	lsrs	r3, r3, #10
 8041a60:	f003 0307 	and.w	r3, r3, #7
 8041a64:	4903      	ldr	r1, [pc, #12]	; (8041a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041a66:	5ccb      	ldrb	r3, [r1, r3]
 8041a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041a6c:	4618      	mov	r0, r3
 8041a6e:	bd80      	pop	{r7, pc}
 8041a70:	40023800 	.word	0x40023800
 8041a74:	08043c14 	.word	0x08043c14

08041a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041a78:	b580      	push	{r7, lr}
 8041a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8041a7c:	f7ff ffdc 	bl	8041a38 <HAL_RCC_GetHCLKFreq>
 8041a80:	4602      	mov	r2, r0
 8041a82:	4b05      	ldr	r3, [pc, #20]	; (8041a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8041a84:	689b      	ldr	r3, [r3, #8]
 8041a86:	0b5b      	lsrs	r3, r3, #13
 8041a88:	f003 0307 	and.w	r3, r3, #7
 8041a8c:	4903      	ldr	r1, [pc, #12]	; (8041a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8041a8e:	5ccb      	ldrb	r3, [r1, r3]
 8041a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041a94:	4618      	mov	r0, r3
 8041a96:	bd80      	pop	{r7, pc}
 8041a98:	40023800 	.word	0x40023800
 8041a9c:	08043c14 	.word	0x08043c14

08041aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8041aa0:	b580      	push	{r7, lr}
 8041aa2:	b088      	sub	sp, #32
 8041aa4:	af00      	add	r7, sp, #0
 8041aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8041aa8:	2300      	movs	r3, #0
 8041aaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8041aac:	2300      	movs	r3, #0
 8041aae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8041ab0:	2300      	movs	r3, #0
 8041ab2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8041ab4:	2300      	movs	r3, #0
 8041ab6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8041ab8:	2300      	movs	r3, #0
 8041aba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8041abc:	687b      	ldr	r3, [r7, #4]
 8041abe:	681b      	ldr	r3, [r3, #0]
 8041ac0:	f003 0301 	and.w	r3, r3, #1
 8041ac4:	2b00      	cmp	r3, #0
 8041ac6:	d012      	beq.n	8041aee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8041ac8:	4b69      	ldr	r3, [pc, #420]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041aca:	689b      	ldr	r3, [r3, #8]
 8041acc:	4a68      	ldr	r2, [pc, #416]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ace:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8041ad2:	6093      	str	r3, [r2, #8]
 8041ad4:	4b66      	ldr	r3, [pc, #408]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ad6:	689a      	ldr	r2, [r3, #8]
 8041ad8:	687b      	ldr	r3, [r7, #4]
 8041ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041adc:	4964      	ldr	r1, [pc, #400]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041ade:	4313      	orrs	r3, r2
 8041ae0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8041ae2:	687b      	ldr	r3, [r7, #4]
 8041ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041ae6:	2b00      	cmp	r3, #0
 8041ae8:	d101      	bne.n	8041aee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8041aea:	2301      	movs	r3, #1
 8041aec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8041aee:	687b      	ldr	r3, [r7, #4]
 8041af0:	681b      	ldr	r3, [r3, #0]
 8041af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041af6:	2b00      	cmp	r3, #0
 8041af8:	d017      	beq.n	8041b2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041afa:	4b5d      	ldr	r3, [pc, #372]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041b00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041b04:	687b      	ldr	r3, [r7, #4]
 8041b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b08:	4959      	ldr	r1, [pc, #356]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b0a:	4313      	orrs	r3, r2
 8041b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8041b10:	687b      	ldr	r3, [r7, #4]
 8041b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8041b18:	d101      	bne.n	8041b1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8041b1a:	2301      	movs	r3, #1
 8041b1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8041b1e:	687b      	ldr	r3, [r7, #4]
 8041b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b22:	2b00      	cmp	r3, #0
 8041b24:	d101      	bne.n	8041b2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8041b26:	2301      	movs	r3, #1
 8041b28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8041b2a:	687b      	ldr	r3, [r7, #4]
 8041b2c:	681b      	ldr	r3, [r3, #0]
 8041b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041b32:	2b00      	cmp	r3, #0
 8041b34:	d017      	beq.n	8041b66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8041b36:	4b4e      	ldr	r3, [pc, #312]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041b3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041b40:	687b      	ldr	r3, [r7, #4]
 8041b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b44:	494a      	ldr	r1, [pc, #296]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b46:	4313      	orrs	r3, r2
 8041b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8041b4c:	687b      	ldr	r3, [r7, #4]
 8041b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041b54:	d101      	bne.n	8041b5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8041b56:	2301      	movs	r3, #1
 8041b58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8041b5a:	687b      	ldr	r3, [r7, #4]
 8041b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b5e:	2b00      	cmp	r3, #0
 8041b60:	d101      	bne.n	8041b66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8041b62:	2301      	movs	r3, #1
 8041b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8041b66:	687b      	ldr	r3, [r7, #4]
 8041b68:	681b      	ldr	r3, [r3, #0]
 8041b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8041b6e:	2b00      	cmp	r3, #0
 8041b70:	d001      	beq.n	8041b76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8041b72:	2301      	movs	r3, #1
 8041b74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8041b76:	687b      	ldr	r3, [r7, #4]
 8041b78:	681b      	ldr	r3, [r3, #0]
 8041b7a:	f003 0320 	and.w	r3, r3, #32
 8041b7e:	2b00      	cmp	r3, #0
 8041b80:	f000 808b 	beq.w	8041c9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8041b84:	4b3a      	ldr	r3, [pc, #232]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b88:	4a39      	ldr	r2, [pc, #228]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8041b90:	4b37      	ldr	r3, [pc, #220]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041b98:	60bb      	str	r3, [r7, #8]
 8041b9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8041b9c:	4b35      	ldr	r3, [pc, #212]	; (8041c74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041b9e:	681b      	ldr	r3, [r3, #0]
 8041ba0:	4a34      	ldr	r2, [pc, #208]	; (8041c74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041ba8:	f7ff f80a 	bl	8040bc0 <HAL_GetTick>
 8041bac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041bae:	e008      	b.n	8041bc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041bb0:	f7ff f806 	bl	8040bc0 <HAL_GetTick>
 8041bb4:	4602      	mov	r2, r0
 8041bb6:	697b      	ldr	r3, [r7, #20]
 8041bb8:	1ad3      	subs	r3, r2, r3
 8041bba:	2b64      	cmp	r3, #100	; 0x64
 8041bbc:	d901      	bls.n	8041bc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8041bbe:	2303      	movs	r3, #3
 8041bc0:	e38f      	b.n	80422e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8041bc2:	4b2c      	ldr	r3, [pc, #176]	; (8041c74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8041bc4:	681b      	ldr	r3, [r3, #0]
 8041bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041bca:	2b00      	cmp	r3, #0
 8041bcc:	d0f0      	beq.n	8041bb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8041bce:	4b28      	ldr	r3, [pc, #160]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041bd6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8041bd8:	693b      	ldr	r3, [r7, #16]
 8041bda:	2b00      	cmp	r3, #0
 8041bdc:	d035      	beq.n	8041c4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8041bde:	687b      	ldr	r3, [r7, #4]
 8041be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041be6:	693a      	ldr	r2, [r7, #16]
 8041be8:	429a      	cmp	r2, r3
 8041bea:	d02e      	beq.n	8041c4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8041bec:	4b20      	ldr	r3, [pc, #128]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041bf4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8041bf6:	4b1e      	ldr	r3, [pc, #120]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bfa:	4a1d      	ldr	r2, [pc, #116]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041c00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8041c02:	4b1b      	ldr	r3, [pc, #108]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c06:	4a1a      	ldr	r2, [pc, #104]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041c0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8041c0e:	4a18      	ldr	r2, [pc, #96]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c10:	693b      	ldr	r3, [r7, #16]
 8041c12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8041c14:	4b16      	ldr	r3, [pc, #88]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c18:	f003 0301 	and.w	r3, r3, #1
 8041c1c:	2b01      	cmp	r3, #1
 8041c1e:	d114      	bne.n	8041c4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c20:	f7fe ffce 	bl	8040bc0 <HAL_GetTick>
 8041c24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041c26:	e00a      	b.n	8041c3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8041c28:	f7fe ffca 	bl	8040bc0 <HAL_GetTick>
 8041c2c:	4602      	mov	r2, r0
 8041c2e:	697b      	ldr	r3, [r7, #20]
 8041c30:	1ad3      	subs	r3, r2, r3
 8041c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c36:	4293      	cmp	r3, r2
 8041c38:	d901      	bls.n	8041c3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8041c3a:	2303      	movs	r3, #3
 8041c3c:	e351      	b.n	80422e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041c3e:	4b0c      	ldr	r3, [pc, #48]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c42:	f003 0302 	and.w	r3, r3, #2
 8041c46:	2b00      	cmp	r3, #0
 8041c48:	d0ee      	beq.n	8041c28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041c4a:	687b      	ldr	r3, [r7, #4]
 8041c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8041c56:	d111      	bne.n	8041c7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8041c58:	4b05      	ldr	r3, [pc, #20]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c5a:	689b      	ldr	r3, [r3, #8]
 8041c5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8041c60:	687b      	ldr	r3, [r7, #4]
 8041c62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8041c64:	4b04      	ldr	r3, [pc, #16]	; (8041c78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8041c66:	400b      	ands	r3, r1
 8041c68:	4901      	ldr	r1, [pc, #4]	; (8041c70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8041c6a:	4313      	orrs	r3, r2
 8041c6c:	608b      	str	r3, [r1, #8]
 8041c6e:	e00b      	b.n	8041c88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8041c70:	40023800 	.word	0x40023800
 8041c74:	40007000 	.word	0x40007000
 8041c78:	0ffffcff 	.word	0x0ffffcff
 8041c7c:	4bac      	ldr	r3, [pc, #688]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041c7e:	689b      	ldr	r3, [r3, #8]
 8041c80:	4aab      	ldr	r2, [pc, #684]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041c82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8041c86:	6093      	str	r3, [r2, #8]
 8041c88:	4ba9      	ldr	r3, [pc, #676]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041c8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8041c8c:	687b      	ldr	r3, [r7, #4]
 8041c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8041c94:	49a6      	ldr	r1, [pc, #664]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041c96:	4313      	orrs	r3, r2
 8041c98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8041c9a:	687b      	ldr	r3, [r7, #4]
 8041c9c:	681b      	ldr	r3, [r3, #0]
 8041c9e:	f003 0310 	and.w	r3, r3, #16
 8041ca2:	2b00      	cmp	r3, #0
 8041ca4:	d010      	beq.n	8041cc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8041ca6:	4ba2      	ldr	r3, [pc, #648]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041cac:	4aa0      	ldr	r2, [pc, #640]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041cb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8041cb6:	4b9e      	ldr	r3, [pc, #632]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8041cbc:	687b      	ldr	r3, [r7, #4]
 8041cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041cc0:	499b      	ldr	r1, [pc, #620]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cc2:	4313      	orrs	r3, r2
 8041cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8041cc8:	687b      	ldr	r3, [r7, #4]
 8041cca:	681b      	ldr	r3, [r3, #0]
 8041ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8041cd0:	2b00      	cmp	r3, #0
 8041cd2:	d00a      	beq.n	8041cea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041cd4:	4b96      	ldr	r3, [pc, #600]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041cda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8041cde:	687b      	ldr	r3, [r7, #4]
 8041ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8041ce2:	4993      	ldr	r1, [pc, #588]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ce4:	4313      	orrs	r3, r2
 8041ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8041cea:	687b      	ldr	r3, [r7, #4]
 8041cec:	681b      	ldr	r3, [r3, #0]
 8041cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041cf2:	2b00      	cmp	r3, #0
 8041cf4:	d00a      	beq.n	8041d0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8041cf6:	4b8e      	ldr	r3, [pc, #568]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8041d00:	687b      	ldr	r3, [r7, #4]
 8041d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8041d04:	498a      	ldr	r1, [pc, #552]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d06:	4313      	orrs	r3, r2
 8041d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041d0c:	687b      	ldr	r3, [r7, #4]
 8041d0e:	681b      	ldr	r3, [r3, #0]
 8041d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041d14:	2b00      	cmp	r3, #0
 8041d16:	d00a      	beq.n	8041d2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8041d18:	4b85      	ldr	r3, [pc, #532]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041d22:	687b      	ldr	r3, [r7, #4]
 8041d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8041d26:	4982      	ldr	r1, [pc, #520]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d28:	4313      	orrs	r3, r2
 8041d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8041d2e:	687b      	ldr	r3, [r7, #4]
 8041d30:	681b      	ldr	r3, [r3, #0]
 8041d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041d36:	2b00      	cmp	r3, #0
 8041d38:	d00a      	beq.n	8041d50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8041d3a:	4b7d      	ldr	r3, [pc, #500]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041d44:	687b      	ldr	r3, [r7, #4]
 8041d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041d48:	4979      	ldr	r1, [pc, #484]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d4a:	4313      	orrs	r3, r2
 8041d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8041d50:	687b      	ldr	r3, [r7, #4]
 8041d52:	681b      	ldr	r3, [r3, #0]
 8041d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041d58:	2b00      	cmp	r3, #0
 8041d5a:	d00a      	beq.n	8041d72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8041d5c:	4b74      	ldr	r3, [pc, #464]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d62:	f023 0203 	bic.w	r2, r3, #3
 8041d66:	687b      	ldr	r3, [r7, #4]
 8041d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041d6a:	4971      	ldr	r1, [pc, #452]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d6c:	4313      	orrs	r3, r2
 8041d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8041d72:	687b      	ldr	r3, [r7, #4]
 8041d74:	681b      	ldr	r3, [r3, #0]
 8041d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041d7a:	2b00      	cmp	r3, #0
 8041d7c:	d00a      	beq.n	8041d94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8041d7e:	4b6c      	ldr	r3, [pc, #432]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d84:	f023 020c 	bic.w	r2, r3, #12
 8041d88:	687b      	ldr	r3, [r7, #4]
 8041d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041d8c:	4968      	ldr	r1, [pc, #416]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041d8e:	4313      	orrs	r3, r2
 8041d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8041d94:	687b      	ldr	r3, [r7, #4]
 8041d96:	681b      	ldr	r3, [r3, #0]
 8041d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041d9c:	2b00      	cmp	r3, #0
 8041d9e:	d00a      	beq.n	8041db6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8041da0:	4b63      	ldr	r3, [pc, #396]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041da6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8041daa:	687b      	ldr	r3, [r7, #4]
 8041dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041dae:	4960      	ldr	r1, [pc, #384]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041db0:	4313      	orrs	r3, r2
 8041db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8041db6:	687b      	ldr	r3, [r7, #4]
 8041db8:	681b      	ldr	r3, [r3, #0]
 8041dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041dbe:	2b00      	cmp	r3, #0
 8041dc0:	d00a      	beq.n	8041dd8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8041dc2:	4b5b      	ldr	r3, [pc, #364]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041dc8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8041dcc:	687b      	ldr	r3, [r7, #4]
 8041dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041dd0:	4957      	ldr	r1, [pc, #348]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041dd2:	4313      	orrs	r3, r2
 8041dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8041dd8:	687b      	ldr	r3, [r7, #4]
 8041dda:	681b      	ldr	r3, [r3, #0]
 8041ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041de0:	2b00      	cmp	r3, #0
 8041de2:	d00a      	beq.n	8041dfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8041de4:	4b52      	ldr	r3, [pc, #328]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041dea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8041dee:	687b      	ldr	r3, [r7, #4]
 8041df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041df2:	494f      	ldr	r1, [pc, #316]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041df4:	4313      	orrs	r3, r2
 8041df6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8041dfa:	687b      	ldr	r3, [r7, #4]
 8041dfc:	681b      	ldr	r3, [r3, #0]
 8041dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041e02:	2b00      	cmp	r3, #0
 8041e04:	d00a      	beq.n	8041e1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8041e06:	4b4a      	ldr	r3, [pc, #296]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8041e10:	687b      	ldr	r3, [r7, #4]
 8041e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e14:	4946      	ldr	r1, [pc, #280]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e16:	4313      	orrs	r3, r2
 8041e18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8041e1c:	687b      	ldr	r3, [r7, #4]
 8041e1e:	681b      	ldr	r3, [r3, #0]
 8041e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041e24:	2b00      	cmp	r3, #0
 8041e26:	d00a      	beq.n	8041e3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8041e28:	4b41      	ldr	r3, [pc, #260]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8041e32:	687b      	ldr	r3, [r7, #4]
 8041e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041e36:	493e      	ldr	r1, [pc, #248]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e38:	4313      	orrs	r3, r2
 8041e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8041e3e:	687b      	ldr	r3, [r7, #4]
 8041e40:	681b      	ldr	r3, [r3, #0]
 8041e42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041e46:	2b00      	cmp	r3, #0
 8041e48:	d00a      	beq.n	8041e60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8041e4a:	4b39      	ldr	r3, [pc, #228]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8041e54:	687b      	ldr	r3, [r7, #4]
 8041e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041e58:	4935      	ldr	r1, [pc, #212]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e5a:	4313      	orrs	r3, r2
 8041e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8041e60:	687b      	ldr	r3, [r7, #4]
 8041e62:	681b      	ldr	r3, [r3, #0]
 8041e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041e68:	2b00      	cmp	r3, #0
 8041e6a:	d00a      	beq.n	8041e82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8041e6c:	4b30      	ldr	r3, [pc, #192]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8041e76:	687b      	ldr	r3, [r7, #4]
 8041e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041e7a:	492d      	ldr	r1, [pc, #180]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e7c:	4313      	orrs	r3, r2
 8041e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8041e82:	687b      	ldr	r3, [r7, #4]
 8041e84:	681b      	ldr	r3, [r3, #0]
 8041e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041e8a:	2b00      	cmp	r3, #0
 8041e8c:	d011      	beq.n	8041eb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8041e8e:	4b28      	ldr	r3, [pc, #160]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041e94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8041e98:	687b      	ldr	r3, [r7, #4]
 8041e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041e9c:	4924      	ldr	r1, [pc, #144]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041e9e:	4313      	orrs	r3, r2
 8041ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8041ea4:	687b      	ldr	r3, [r7, #4]
 8041ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8041ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8041eac:	d101      	bne.n	8041eb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8041eae:	2301      	movs	r3, #1
 8041eb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8041eb2:	687b      	ldr	r3, [r7, #4]
 8041eb4:	681b      	ldr	r3, [r3, #0]
 8041eb6:	f003 0308 	and.w	r3, r3, #8
 8041eba:	2b00      	cmp	r3, #0
 8041ebc:	d001      	beq.n	8041ec2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8041ebe:	2301      	movs	r3, #1
 8041ec0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8041ec2:	687b      	ldr	r3, [r7, #4]
 8041ec4:	681b      	ldr	r3, [r3, #0]
 8041ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041eca:	2b00      	cmp	r3, #0
 8041ecc:	d00a      	beq.n	8041ee4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8041ece:	4b18      	ldr	r3, [pc, #96]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041ed4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8041ed8:	687b      	ldr	r3, [r7, #4]
 8041eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041edc:	4914      	ldr	r1, [pc, #80]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ede:	4313      	orrs	r3, r2
 8041ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8041ee4:	687b      	ldr	r3, [r7, #4]
 8041ee6:	681b      	ldr	r3, [r3, #0]
 8041ee8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8041eec:	2b00      	cmp	r3, #0
 8041eee:	d00b      	beq.n	8041f08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8041ef0:	4b0f      	ldr	r3, [pc, #60]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041ef6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8041efa:	687b      	ldr	r3, [r7, #4]
 8041efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041f00:	490b      	ldr	r1, [pc, #44]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f02:	4313      	orrs	r3, r2
 8041f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8041f08:	687b      	ldr	r3, [r7, #4]
 8041f0a:	681b      	ldr	r3, [r3, #0]
 8041f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8041f10:	2b00      	cmp	r3, #0
 8041f12:	d00f      	beq.n	8041f34 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8041f14:	4b06      	ldr	r3, [pc, #24]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8041f1e:	687b      	ldr	r3, [r7, #4]
 8041f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041f24:	4902      	ldr	r1, [pc, #8]	; (8041f30 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8041f26:	4313      	orrs	r3, r2
 8041f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8041f2c:	e002      	b.n	8041f34 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8041f2e:	bf00      	nop
 8041f30:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8041f34:	687b      	ldr	r3, [r7, #4]
 8041f36:	681b      	ldr	r3, [r3, #0]
 8041f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041f3c:	2b00      	cmp	r3, #0
 8041f3e:	d00b      	beq.n	8041f58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041f40:	4b8a      	ldr	r3, [pc, #552]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8041f4a:	687b      	ldr	r3, [r7, #4]
 8041f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041f50:	4986      	ldr	r1, [pc, #536]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f52:	4313      	orrs	r3, r2
 8041f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8041f58:	687b      	ldr	r3, [r7, #4]
 8041f5a:	681b      	ldr	r3, [r3, #0]
 8041f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041f60:	2b00      	cmp	r3, #0
 8041f62:	d00b      	beq.n	8041f7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8041f64:	4b81      	ldr	r3, [pc, #516]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8041f6e:	687b      	ldr	r3, [r7, #4]
 8041f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8041f74:	497d      	ldr	r1, [pc, #500]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f76:	4313      	orrs	r3, r2
 8041f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8041f7c:	69fb      	ldr	r3, [r7, #28]
 8041f7e:	2b01      	cmp	r3, #1
 8041f80:	d006      	beq.n	8041f90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8041f82:	687b      	ldr	r3, [r7, #4]
 8041f84:	681b      	ldr	r3, [r3, #0]
 8041f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041f8a:	2b00      	cmp	r3, #0
 8041f8c:	f000 80d6 	beq.w	804213c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8041f90:	4b76      	ldr	r3, [pc, #472]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f92:	681b      	ldr	r3, [r3, #0]
 8041f94:	4a75      	ldr	r2, [pc, #468]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041f96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8041f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041f9c:	f7fe fe10 	bl	8040bc0 <HAL_GetTick>
 8041fa0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041fa2:	e008      	b.n	8041fb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8041fa4:	f7fe fe0c 	bl	8040bc0 <HAL_GetTick>
 8041fa8:	4602      	mov	r2, r0
 8041faa:	697b      	ldr	r3, [r7, #20]
 8041fac:	1ad3      	subs	r3, r2, r3
 8041fae:	2b64      	cmp	r3, #100	; 0x64
 8041fb0:	d901      	bls.n	8041fb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8041fb2:	2303      	movs	r3, #3
 8041fb4:	e195      	b.n	80422e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8041fb6:	4b6d      	ldr	r3, [pc, #436]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fb8:	681b      	ldr	r3, [r3, #0]
 8041fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041fbe:	2b00      	cmp	r3, #0
 8041fc0:	d1f0      	bne.n	8041fa4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8041fc2:	687b      	ldr	r3, [r7, #4]
 8041fc4:	681b      	ldr	r3, [r3, #0]
 8041fc6:	f003 0301 	and.w	r3, r3, #1
 8041fca:	2b00      	cmp	r3, #0
 8041fcc:	d021      	beq.n	8042012 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8041fce:	687b      	ldr	r3, [r7, #4]
 8041fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041fd2:	2b00      	cmp	r3, #0
 8041fd4:	d11d      	bne.n	8042012 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8041fd6:	4b65      	ldr	r3, [pc, #404]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041fdc:	0c1b      	lsrs	r3, r3, #16
 8041fde:	f003 0303 	and.w	r3, r3, #3
 8041fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8041fe4:	4b61      	ldr	r3, [pc, #388]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8041fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041fea:	0e1b      	lsrs	r3, r3, #24
 8041fec:	f003 030f 	and.w	r3, r3, #15
 8041ff0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8041ff2:	687b      	ldr	r3, [r7, #4]
 8041ff4:	685b      	ldr	r3, [r3, #4]
 8041ff6:	019a      	lsls	r2, r3, #6
 8041ff8:	693b      	ldr	r3, [r7, #16]
 8041ffa:	041b      	lsls	r3, r3, #16
 8041ffc:	431a      	orrs	r2, r3
 8041ffe:	68fb      	ldr	r3, [r7, #12]
 8042000:	061b      	lsls	r3, r3, #24
 8042002:	431a      	orrs	r2, r3
 8042004:	687b      	ldr	r3, [r7, #4]
 8042006:	689b      	ldr	r3, [r3, #8]
 8042008:	071b      	lsls	r3, r3, #28
 804200a:	4958      	ldr	r1, [pc, #352]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804200c:	4313      	orrs	r3, r2
 804200e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8042012:	687b      	ldr	r3, [r7, #4]
 8042014:	681b      	ldr	r3, [r3, #0]
 8042016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804201a:	2b00      	cmp	r3, #0
 804201c:	d004      	beq.n	8042028 <HAL_RCCEx_PeriphCLKConfig+0x588>
 804201e:	687b      	ldr	r3, [r7, #4]
 8042020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042026:	d00a      	beq.n	804203e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042028:	687b      	ldr	r3, [r7, #4]
 804202a:	681b      	ldr	r3, [r3, #0]
 804202c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8042030:	2b00      	cmp	r3, #0
 8042032:	d02e      	beq.n	8042092 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8042034:	687b      	ldr	r3, [r7, #4]
 8042036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042038:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804203c:	d129      	bne.n	8042092 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 804203e:	4b4b      	ldr	r3, [pc, #300]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042044:	0c1b      	lsrs	r3, r3, #16
 8042046:	f003 0303 	and.w	r3, r3, #3
 804204a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 804204c:	4b47      	ldr	r3, [pc, #284]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804204e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042052:	0f1b      	lsrs	r3, r3, #28
 8042054:	f003 0307 	and.w	r3, r3, #7
 8042058:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 804205a:	687b      	ldr	r3, [r7, #4]
 804205c:	685b      	ldr	r3, [r3, #4]
 804205e:	019a      	lsls	r2, r3, #6
 8042060:	693b      	ldr	r3, [r7, #16]
 8042062:	041b      	lsls	r3, r3, #16
 8042064:	431a      	orrs	r2, r3
 8042066:	687b      	ldr	r3, [r7, #4]
 8042068:	68db      	ldr	r3, [r3, #12]
 804206a:	061b      	lsls	r3, r3, #24
 804206c:	431a      	orrs	r2, r3
 804206e:	68fb      	ldr	r3, [r7, #12]
 8042070:	071b      	lsls	r3, r3, #28
 8042072:	493e      	ldr	r1, [pc, #248]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042074:	4313      	orrs	r3, r2
 8042076:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 804207a:	4b3c      	ldr	r3, [pc, #240]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804207c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042080:	f023 021f 	bic.w	r2, r3, #31
 8042084:	687b      	ldr	r3, [r7, #4]
 8042086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042088:	3b01      	subs	r3, #1
 804208a:	4938      	ldr	r1, [pc, #224]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804208c:	4313      	orrs	r3, r2
 804208e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8042092:	687b      	ldr	r3, [r7, #4]
 8042094:	681b      	ldr	r3, [r3, #0]
 8042096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804209a:	2b00      	cmp	r3, #0
 804209c:	d01d      	beq.n	80420da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 804209e:	4b33      	ldr	r3, [pc, #204]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80420a4:	0e1b      	lsrs	r3, r3, #24
 80420a6:	f003 030f 	and.w	r3, r3, #15
 80420aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80420ac:	4b2f      	ldr	r3, [pc, #188]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80420b2:	0f1b      	lsrs	r3, r3, #28
 80420b4:	f003 0307 	and.w	r3, r3, #7
 80420b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80420ba:	687b      	ldr	r3, [r7, #4]
 80420bc:	685b      	ldr	r3, [r3, #4]
 80420be:	019a      	lsls	r2, r3, #6
 80420c0:	687b      	ldr	r3, [r7, #4]
 80420c2:	691b      	ldr	r3, [r3, #16]
 80420c4:	041b      	lsls	r3, r3, #16
 80420c6:	431a      	orrs	r2, r3
 80420c8:	693b      	ldr	r3, [r7, #16]
 80420ca:	061b      	lsls	r3, r3, #24
 80420cc:	431a      	orrs	r2, r3
 80420ce:	68fb      	ldr	r3, [r7, #12]
 80420d0:	071b      	lsls	r3, r3, #28
 80420d2:	4926      	ldr	r1, [pc, #152]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80420d4:	4313      	orrs	r3, r2
 80420d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80420da:	687b      	ldr	r3, [r7, #4]
 80420dc:	681b      	ldr	r3, [r3, #0]
 80420de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80420e2:	2b00      	cmp	r3, #0
 80420e4:	d011      	beq.n	804210a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80420e6:	687b      	ldr	r3, [r7, #4]
 80420e8:	685b      	ldr	r3, [r3, #4]
 80420ea:	019a      	lsls	r2, r3, #6
 80420ec:	687b      	ldr	r3, [r7, #4]
 80420ee:	691b      	ldr	r3, [r3, #16]
 80420f0:	041b      	lsls	r3, r3, #16
 80420f2:	431a      	orrs	r2, r3
 80420f4:	687b      	ldr	r3, [r7, #4]
 80420f6:	68db      	ldr	r3, [r3, #12]
 80420f8:	061b      	lsls	r3, r3, #24
 80420fa:	431a      	orrs	r2, r3
 80420fc:	687b      	ldr	r3, [r7, #4]
 80420fe:	689b      	ldr	r3, [r3, #8]
 8042100:	071b      	lsls	r3, r3, #28
 8042102:	491a      	ldr	r1, [pc, #104]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042104:	4313      	orrs	r3, r2
 8042106:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 804210a:	4b18      	ldr	r3, [pc, #96]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804210c:	681b      	ldr	r3, [r3, #0]
 804210e:	4a17      	ldr	r2, [pc, #92]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042116:	f7fe fd53 	bl	8040bc0 <HAL_GetTick>
 804211a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 804211c:	e008      	b.n	8042130 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 804211e:	f7fe fd4f 	bl	8040bc0 <HAL_GetTick>
 8042122:	4602      	mov	r2, r0
 8042124:	697b      	ldr	r3, [r7, #20]
 8042126:	1ad3      	subs	r3, r2, r3
 8042128:	2b64      	cmp	r3, #100	; 0x64
 804212a:	d901      	bls.n	8042130 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804212c:	2303      	movs	r3, #3
 804212e:	e0d8      	b.n	80422e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8042130:	4b0e      	ldr	r3, [pc, #56]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042132:	681b      	ldr	r3, [r3, #0]
 8042134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8042138:	2b00      	cmp	r3, #0
 804213a:	d0f0      	beq.n	804211e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 804213c:	69bb      	ldr	r3, [r7, #24]
 804213e:	2b01      	cmp	r3, #1
 8042140:	f040 80ce 	bne.w	80422e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8042144:	4b09      	ldr	r3, [pc, #36]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8042146:	681b      	ldr	r3, [r3, #0]
 8042148:	4a08      	ldr	r2, [pc, #32]	; (804216c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 804214a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804214e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042150:	f7fe fd36 	bl	8040bc0 <HAL_GetTick>
 8042154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042156:	e00b      	b.n	8042170 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8042158:	f7fe fd32 	bl	8040bc0 <HAL_GetTick>
 804215c:	4602      	mov	r2, r0
 804215e:	697b      	ldr	r3, [r7, #20]
 8042160:	1ad3      	subs	r3, r2, r3
 8042162:	2b64      	cmp	r3, #100	; 0x64
 8042164:	d904      	bls.n	8042170 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8042166:	2303      	movs	r3, #3
 8042168:	e0bb      	b.n	80422e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 804216a:	bf00      	nop
 804216c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8042170:	4b5e      	ldr	r3, [pc, #376]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042172:	681b      	ldr	r3, [r3, #0]
 8042174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804217c:	d0ec      	beq.n	8042158 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 804217e:	687b      	ldr	r3, [r7, #4]
 8042180:	681b      	ldr	r3, [r3, #0]
 8042182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042186:	2b00      	cmp	r3, #0
 8042188:	d003      	beq.n	8042192 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 804218a:	687b      	ldr	r3, [r7, #4]
 804218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804218e:	2b00      	cmp	r3, #0
 8042190:	d009      	beq.n	80421a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8042192:	687b      	ldr	r3, [r7, #4]
 8042194:	681b      	ldr	r3, [r3, #0]
 8042196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 804219a:	2b00      	cmp	r3, #0
 804219c:	d02e      	beq.n	80421fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 804219e:	687b      	ldr	r3, [r7, #4]
 80421a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80421a2:	2b00      	cmp	r3, #0
 80421a4:	d12a      	bne.n	80421fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80421a6:	4b51      	ldr	r3, [pc, #324]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421ac:	0c1b      	lsrs	r3, r3, #16
 80421ae:	f003 0303 	and.w	r3, r3, #3
 80421b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80421b4:	4b4d      	ldr	r3, [pc, #308]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421ba:	0f1b      	lsrs	r3, r3, #28
 80421bc:	f003 0307 	and.w	r3, r3, #7
 80421c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80421c2:	687b      	ldr	r3, [r7, #4]
 80421c4:	695b      	ldr	r3, [r3, #20]
 80421c6:	019a      	lsls	r2, r3, #6
 80421c8:	693b      	ldr	r3, [r7, #16]
 80421ca:	041b      	lsls	r3, r3, #16
 80421cc:	431a      	orrs	r2, r3
 80421ce:	687b      	ldr	r3, [r7, #4]
 80421d0:	699b      	ldr	r3, [r3, #24]
 80421d2:	061b      	lsls	r3, r3, #24
 80421d4:	431a      	orrs	r2, r3
 80421d6:	68fb      	ldr	r3, [r7, #12]
 80421d8:	071b      	lsls	r3, r3, #28
 80421da:	4944      	ldr	r1, [pc, #272]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421dc:	4313      	orrs	r3, r2
 80421de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80421e2:	4b42      	ldr	r3, [pc, #264]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80421e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80421ec:	687b      	ldr	r3, [r7, #4]
 80421ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80421f0:	3b01      	subs	r3, #1
 80421f2:	021b      	lsls	r3, r3, #8
 80421f4:	493d      	ldr	r1, [pc, #244]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80421f6:	4313      	orrs	r3, r2
 80421f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80421fc:	687b      	ldr	r3, [r7, #4]
 80421fe:	681b      	ldr	r3, [r3, #0]
 8042200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042204:	2b00      	cmp	r3, #0
 8042206:	d022      	beq.n	804224e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8042208:	687b      	ldr	r3, [r7, #4]
 804220a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804220c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042210:	d11d      	bne.n	804224e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8042212:	4b36      	ldr	r3, [pc, #216]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042218:	0e1b      	lsrs	r3, r3, #24
 804221a:	f003 030f 	and.w	r3, r3, #15
 804221e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8042220:	4b32      	ldr	r3, [pc, #200]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042226:	0f1b      	lsrs	r3, r3, #28
 8042228:	f003 0307 	and.w	r3, r3, #7
 804222c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 804222e:	687b      	ldr	r3, [r7, #4]
 8042230:	695b      	ldr	r3, [r3, #20]
 8042232:	019a      	lsls	r2, r3, #6
 8042234:	687b      	ldr	r3, [r7, #4]
 8042236:	6a1b      	ldr	r3, [r3, #32]
 8042238:	041b      	lsls	r3, r3, #16
 804223a:	431a      	orrs	r2, r3
 804223c:	693b      	ldr	r3, [r7, #16]
 804223e:	061b      	lsls	r3, r3, #24
 8042240:	431a      	orrs	r2, r3
 8042242:	68fb      	ldr	r3, [r7, #12]
 8042244:	071b      	lsls	r3, r3, #28
 8042246:	4929      	ldr	r1, [pc, #164]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042248:	4313      	orrs	r3, r2
 804224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 804224e:	687b      	ldr	r3, [r7, #4]
 8042250:	681b      	ldr	r3, [r3, #0]
 8042252:	f003 0308 	and.w	r3, r3, #8
 8042256:	2b00      	cmp	r3, #0
 8042258:	d028      	beq.n	80422ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 804225a:	4b24      	ldr	r3, [pc, #144]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042260:	0e1b      	lsrs	r3, r3, #24
 8042262:	f003 030f 	and.w	r3, r3, #15
 8042266:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8042268:	4b20      	ldr	r3, [pc, #128]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 804226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804226e:	0c1b      	lsrs	r3, r3, #16
 8042270:	f003 0303 	and.w	r3, r3, #3
 8042274:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8042276:	687b      	ldr	r3, [r7, #4]
 8042278:	695b      	ldr	r3, [r3, #20]
 804227a:	019a      	lsls	r2, r3, #6
 804227c:	68fb      	ldr	r3, [r7, #12]
 804227e:	041b      	lsls	r3, r3, #16
 8042280:	431a      	orrs	r2, r3
 8042282:	693b      	ldr	r3, [r7, #16]
 8042284:	061b      	lsls	r3, r3, #24
 8042286:	431a      	orrs	r2, r3
 8042288:	687b      	ldr	r3, [r7, #4]
 804228a:	69db      	ldr	r3, [r3, #28]
 804228c:	071b      	lsls	r3, r3, #28
 804228e:	4917      	ldr	r1, [pc, #92]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042290:	4313      	orrs	r3, r2
 8042292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8042296:	4b15      	ldr	r3, [pc, #84]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8042298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804229c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80422a0:	687b      	ldr	r3, [r7, #4]
 80422a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80422a4:	4911      	ldr	r1, [pc, #68]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422a6:	4313      	orrs	r3, r2
 80422a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80422ac:	4b0f      	ldr	r3, [pc, #60]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422ae:	681b      	ldr	r3, [r3, #0]
 80422b0:	4a0e      	ldr	r2, [pc, #56]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80422b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80422b8:	f7fe fc82 	bl	8040bc0 <HAL_GetTick>
 80422bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80422be:	e008      	b.n	80422d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80422c0:	f7fe fc7e 	bl	8040bc0 <HAL_GetTick>
 80422c4:	4602      	mov	r2, r0
 80422c6:	697b      	ldr	r3, [r7, #20]
 80422c8:	1ad3      	subs	r3, r2, r3
 80422ca:	2b64      	cmp	r3, #100	; 0x64
 80422cc:	d901      	bls.n	80422d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80422ce:	2303      	movs	r3, #3
 80422d0:	e007      	b.n	80422e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80422d2:	4b06      	ldr	r3, [pc, #24]	; (80422ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80422d4:	681b      	ldr	r3, [r3, #0]
 80422d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80422da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80422de:	d1ef      	bne.n	80422c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80422e0:	2300      	movs	r3, #0
}
 80422e2:	4618      	mov	r0, r3
 80422e4:	3720      	adds	r7, #32
 80422e6:	46bd      	mov	sp, r7
 80422e8:	bd80      	pop	{r7, pc}
 80422ea:	bf00      	nop
 80422ec:	40023800 	.word	0x40023800

080422f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80422f0:	b580      	push	{r7, lr}
 80422f2:	b082      	sub	sp, #8
 80422f4:	af00      	add	r7, sp, #0
 80422f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80422f8:	687b      	ldr	r3, [r7, #4]
 80422fa:	2b00      	cmp	r3, #0
 80422fc:	d101      	bne.n	8042302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80422fe:	2301      	movs	r3, #1
 8042300:	e040      	b.n	8042384 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042302:	687b      	ldr	r3, [r7, #4]
 8042304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042306:	2b00      	cmp	r3, #0
 8042308:	d106      	bne.n	8042318 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 804230a:	687b      	ldr	r3, [r7, #4]
 804230c:	2200      	movs	r2, #0
 804230e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8042312:	6878      	ldr	r0, [r7, #4]
 8042314:	f7fe fab2 	bl	804087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042318:	687b      	ldr	r3, [r7, #4]
 804231a:	2224      	movs	r2, #36	; 0x24
 804231c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 804231e:	687b      	ldr	r3, [r7, #4]
 8042320:	681b      	ldr	r3, [r3, #0]
 8042322:	681a      	ldr	r2, [r3, #0]
 8042324:	687b      	ldr	r3, [r7, #4]
 8042326:	681b      	ldr	r3, [r3, #0]
 8042328:	f022 0201 	bic.w	r2, r2, #1
 804232c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804232e:	6878      	ldr	r0, [r7, #4]
 8042330:	f000 f8c0 	bl	80424b4 <UART_SetConfig>
 8042334:	4603      	mov	r3, r0
 8042336:	2b01      	cmp	r3, #1
 8042338:	d101      	bne.n	804233e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 804233a:	2301      	movs	r3, #1
 804233c:	e022      	b.n	8042384 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804233e:	687b      	ldr	r3, [r7, #4]
 8042340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042342:	2b00      	cmp	r3, #0
 8042344:	d002      	beq.n	804234c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8042346:	6878      	ldr	r0, [r7, #4]
 8042348:	f000 fb18 	bl	804297c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804234c:	687b      	ldr	r3, [r7, #4]
 804234e:	681b      	ldr	r3, [r3, #0]
 8042350:	685a      	ldr	r2, [r3, #4]
 8042352:	687b      	ldr	r3, [r7, #4]
 8042354:	681b      	ldr	r3, [r3, #0]
 8042356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804235a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804235c:	687b      	ldr	r3, [r7, #4]
 804235e:	681b      	ldr	r3, [r3, #0]
 8042360:	689a      	ldr	r2, [r3, #8]
 8042362:	687b      	ldr	r3, [r7, #4]
 8042364:	681b      	ldr	r3, [r3, #0]
 8042366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804236a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 804236c:	687b      	ldr	r3, [r7, #4]
 804236e:	681b      	ldr	r3, [r3, #0]
 8042370:	681a      	ldr	r2, [r3, #0]
 8042372:	687b      	ldr	r3, [r7, #4]
 8042374:	681b      	ldr	r3, [r3, #0]
 8042376:	f042 0201 	orr.w	r2, r2, #1
 804237a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 804237c:	6878      	ldr	r0, [r7, #4]
 804237e:	f000 fb9f 	bl	8042ac0 <UART_CheckIdleState>
 8042382:	4603      	mov	r3, r0
}
 8042384:	4618      	mov	r0, r3
 8042386:	3708      	adds	r7, #8
 8042388:	46bd      	mov	sp, r7
 804238a:	bd80      	pop	{r7, pc}

0804238c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804238c:	b580      	push	{r7, lr}
 804238e:	b08a      	sub	sp, #40	; 0x28
 8042390:	af02      	add	r7, sp, #8
 8042392:	60f8      	str	r0, [r7, #12]
 8042394:	60b9      	str	r1, [r7, #8]
 8042396:	603b      	str	r3, [r7, #0]
 8042398:	4613      	mov	r3, r2
 804239a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 804239c:	68fb      	ldr	r3, [r7, #12]
 804239e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80423a0:	2b20      	cmp	r3, #32
 80423a2:	f040 8081 	bne.w	80424a8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80423a6:	68bb      	ldr	r3, [r7, #8]
 80423a8:	2b00      	cmp	r3, #0
 80423aa:	d002      	beq.n	80423b2 <HAL_UART_Transmit+0x26>
 80423ac:	88fb      	ldrh	r3, [r7, #6]
 80423ae:	2b00      	cmp	r3, #0
 80423b0:	d101      	bne.n	80423b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80423b2:	2301      	movs	r3, #1
 80423b4:	e079      	b.n	80424aa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80423b6:	68fb      	ldr	r3, [r7, #12]
 80423b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80423bc:	2b01      	cmp	r3, #1
 80423be:	d101      	bne.n	80423c4 <HAL_UART_Transmit+0x38>
 80423c0:	2302      	movs	r3, #2
 80423c2:	e072      	b.n	80424aa <HAL_UART_Transmit+0x11e>
 80423c4:	68fb      	ldr	r3, [r7, #12]
 80423c6:	2201      	movs	r2, #1
 80423c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80423cc:	68fb      	ldr	r3, [r7, #12]
 80423ce:	2200      	movs	r2, #0
 80423d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80423d4:	68fb      	ldr	r3, [r7, #12]
 80423d6:	2221      	movs	r2, #33	; 0x21
 80423d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80423da:	f7fe fbf1 	bl	8040bc0 <HAL_GetTick>
 80423de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80423e0:	68fb      	ldr	r3, [r7, #12]
 80423e2:	88fa      	ldrh	r2, [r7, #6]
 80423e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80423e8:	68fb      	ldr	r3, [r7, #12]
 80423ea:	88fa      	ldrh	r2, [r7, #6]
 80423ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80423f0:	68fb      	ldr	r3, [r7, #12]
 80423f2:	689b      	ldr	r3, [r3, #8]
 80423f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80423f8:	d108      	bne.n	804240c <HAL_UART_Transmit+0x80>
 80423fa:	68fb      	ldr	r3, [r7, #12]
 80423fc:	691b      	ldr	r3, [r3, #16]
 80423fe:	2b00      	cmp	r3, #0
 8042400:	d104      	bne.n	804240c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8042402:	2300      	movs	r3, #0
 8042404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8042406:	68bb      	ldr	r3, [r7, #8]
 8042408:	61bb      	str	r3, [r7, #24]
 804240a:	e003      	b.n	8042414 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 804240c:	68bb      	ldr	r3, [r7, #8]
 804240e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8042410:	2300      	movs	r3, #0
 8042412:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8042414:	68fb      	ldr	r3, [r7, #12]
 8042416:	2200      	movs	r2, #0
 8042418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 804241c:	e02c      	b.n	8042478 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 804241e:	683b      	ldr	r3, [r7, #0]
 8042420:	9300      	str	r3, [sp, #0]
 8042422:	697b      	ldr	r3, [r7, #20]
 8042424:	2200      	movs	r2, #0
 8042426:	2180      	movs	r1, #128	; 0x80
 8042428:	68f8      	ldr	r0, [r7, #12]
 804242a:	f000 fb92 	bl	8042b52 <UART_WaitOnFlagUntilTimeout>
 804242e:	4603      	mov	r3, r0
 8042430:	2b00      	cmp	r3, #0
 8042432:	d001      	beq.n	8042438 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8042434:	2303      	movs	r3, #3
 8042436:	e038      	b.n	80424aa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8042438:	69fb      	ldr	r3, [r7, #28]
 804243a:	2b00      	cmp	r3, #0
 804243c:	d10b      	bne.n	8042456 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 804243e:	69bb      	ldr	r3, [r7, #24]
 8042440:	881b      	ldrh	r3, [r3, #0]
 8042442:	461a      	mov	r2, r3
 8042444:	68fb      	ldr	r3, [r7, #12]
 8042446:	681b      	ldr	r3, [r3, #0]
 8042448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 804244c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 804244e:	69bb      	ldr	r3, [r7, #24]
 8042450:	3302      	adds	r3, #2
 8042452:	61bb      	str	r3, [r7, #24]
 8042454:	e007      	b.n	8042466 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8042456:	69fb      	ldr	r3, [r7, #28]
 8042458:	781a      	ldrb	r2, [r3, #0]
 804245a:	68fb      	ldr	r3, [r7, #12]
 804245c:	681b      	ldr	r3, [r3, #0]
 804245e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8042460:	69fb      	ldr	r3, [r7, #28]
 8042462:	3301      	adds	r3, #1
 8042464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8042466:	68fb      	ldr	r3, [r7, #12]
 8042468:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 804246c:	b29b      	uxth	r3, r3
 804246e:	3b01      	subs	r3, #1
 8042470:	b29a      	uxth	r2, r3
 8042472:	68fb      	ldr	r3, [r7, #12]
 8042474:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8042478:	68fb      	ldr	r3, [r7, #12]
 804247a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 804247e:	b29b      	uxth	r3, r3
 8042480:	2b00      	cmp	r3, #0
 8042482:	d1cc      	bne.n	804241e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8042484:	683b      	ldr	r3, [r7, #0]
 8042486:	9300      	str	r3, [sp, #0]
 8042488:	697b      	ldr	r3, [r7, #20]
 804248a:	2200      	movs	r2, #0
 804248c:	2140      	movs	r1, #64	; 0x40
 804248e:	68f8      	ldr	r0, [r7, #12]
 8042490:	f000 fb5f 	bl	8042b52 <UART_WaitOnFlagUntilTimeout>
 8042494:	4603      	mov	r3, r0
 8042496:	2b00      	cmp	r3, #0
 8042498:	d001      	beq.n	804249e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 804249a:	2303      	movs	r3, #3
 804249c:	e005      	b.n	80424aa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 804249e:	68fb      	ldr	r3, [r7, #12]
 80424a0:	2220      	movs	r2, #32
 80424a2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80424a4:	2300      	movs	r3, #0
 80424a6:	e000      	b.n	80424aa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80424a8:	2302      	movs	r3, #2
  }
}
 80424aa:	4618      	mov	r0, r3
 80424ac:	3720      	adds	r7, #32
 80424ae:	46bd      	mov	sp, r7
 80424b0:	bd80      	pop	{r7, pc}
	...

080424b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80424b4:	b580      	push	{r7, lr}
 80424b6:	b088      	sub	sp, #32
 80424b8:	af00      	add	r7, sp, #0
 80424ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80424bc:	2300      	movs	r3, #0
 80424be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80424c0:	687b      	ldr	r3, [r7, #4]
 80424c2:	689a      	ldr	r2, [r3, #8]
 80424c4:	687b      	ldr	r3, [r7, #4]
 80424c6:	691b      	ldr	r3, [r3, #16]
 80424c8:	431a      	orrs	r2, r3
 80424ca:	687b      	ldr	r3, [r7, #4]
 80424cc:	695b      	ldr	r3, [r3, #20]
 80424ce:	431a      	orrs	r2, r3
 80424d0:	687b      	ldr	r3, [r7, #4]
 80424d2:	69db      	ldr	r3, [r3, #28]
 80424d4:	4313      	orrs	r3, r2
 80424d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80424d8:	687b      	ldr	r3, [r7, #4]
 80424da:	681b      	ldr	r3, [r3, #0]
 80424dc:	681a      	ldr	r2, [r3, #0]
 80424de:	4ba6      	ldr	r3, [pc, #664]	; (8042778 <UART_SetConfig+0x2c4>)
 80424e0:	4013      	ands	r3, r2
 80424e2:	687a      	ldr	r2, [r7, #4]
 80424e4:	6812      	ldr	r2, [r2, #0]
 80424e6:	6979      	ldr	r1, [r7, #20]
 80424e8:	430b      	orrs	r3, r1
 80424ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80424ec:	687b      	ldr	r3, [r7, #4]
 80424ee:	681b      	ldr	r3, [r3, #0]
 80424f0:	685b      	ldr	r3, [r3, #4]
 80424f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80424f6:	687b      	ldr	r3, [r7, #4]
 80424f8:	68da      	ldr	r2, [r3, #12]
 80424fa:	687b      	ldr	r3, [r7, #4]
 80424fc:	681b      	ldr	r3, [r3, #0]
 80424fe:	430a      	orrs	r2, r1
 8042500:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	699b      	ldr	r3, [r3, #24]
 8042506:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8042508:	687b      	ldr	r3, [r7, #4]
 804250a:	6a1b      	ldr	r3, [r3, #32]
 804250c:	697a      	ldr	r2, [r7, #20]
 804250e:	4313      	orrs	r3, r2
 8042510:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042512:	687b      	ldr	r3, [r7, #4]
 8042514:	681b      	ldr	r3, [r3, #0]
 8042516:	689b      	ldr	r3, [r3, #8]
 8042518:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 804251c:	687b      	ldr	r3, [r7, #4]
 804251e:	681b      	ldr	r3, [r3, #0]
 8042520:	697a      	ldr	r2, [r7, #20]
 8042522:	430a      	orrs	r2, r1
 8042524:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8042526:	687b      	ldr	r3, [r7, #4]
 8042528:	681b      	ldr	r3, [r3, #0]
 804252a:	4a94      	ldr	r2, [pc, #592]	; (804277c <UART_SetConfig+0x2c8>)
 804252c:	4293      	cmp	r3, r2
 804252e:	d120      	bne.n	8042572 <UART_SetConfig+0xbe>
 8042530:	4b93      	ldr	r3, [pc, #588]	; (8042780 <UART_SetConfig+0x2cc>)
 8042532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042536:	f003 0303 	and.w	r3, r3, #3
 804253a:	2b03      	cmp	r3, #3
 804253c:	d816      	bhi.n	804256c <UART_SetConfig+0xb8>
 804253e:	a201      	add	r2, pc, #4	; (adr r2, 8042544 <UART_SetConfig+0x90>)
 8042540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042544:	08042555 	.word	0x08042555
 8042548:	08042561 	.word	0x08042561
 804254c:	0804255b 	.word	0x0804255b
 8042550:	08042567 	.word	0x08042567
 8042554:	2301      	movs	r3, #1
 8042556:	77fb      	strb	r3, [r7, #31]
 8042558:	e150      	b.n	80427fc <UART_SetConfig+0x348>
 804255a:	2302      	movs	r3, #2
 804255c:	77fb      	strb	r3, [r7, #31]
 804255e:	e14d      	b.n	80427fc <UART_SetConfig+0x348>
 8042560:	2304      	movs	r3, #4
 8042562:	77fb      	strb	r3, [r7, #31]
 8042564:	e14a      	b.n	80427fc <UART_SetConfig+0x348>
 8042566:	2308      	movs	r3, #8
 8042568:	77fb      	strb	r3, [r7, #31]
 804256a:	e147      	b.n	80427fc <UART_SetConfig+0x348>
 804256c:	2310      	movs	r3, #16
 804256e:	77fb      	strb	r3, [r7, #31]
 8042570:	e144      	b.n	80427fc <UART_SetConfig+0x348>
 8042572:	687b      	ldr	r3, [r7, #4]
 8042574:	681b      	ldr	r3, [r3, #0]
 8042576:	4a83      	ldr	r2, [pc, #524]	; (8042784 <UART_SetConfig+0x2d0>)
 8042578:	4293      	cmp	r3, r2
 804257a:	d132      	bne.n	80425e2 <UART_SetConfig+0x12e>
 804257c:	4b80      	ldr	r3, [pc, #512]	; (8042780 <UART_SetConfig+0x2cc>)
 804257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042582:	f003 030c 	and.w	r3, r3, #12
 8042586:	2b0c      	cmp	r3, #12
 8042588:	d828      	bhi.n	80425dc <UART_SetConfig+0x128>
 804258a:	a201      	add	r2, pc, #4	; (adr r2, 8042590 <UART_SetConfig+0xdc>)
 804258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042590:	080425c5 	.word	0x080425c5
 8042594:	080425dd 	.word	0x080425dd
 8042598:	080425dd 	.word	0x080425dd
 804259c:	080425dd 	.word	0x080425dd
 80425a0:	080425d1 	.word	0x080425d1
 80425a4:	080425dd 	.word	0x080425dd
 80425a8:	080425dd 	.word	0x080425dd
 80425ac:	080425dd 	.word	0x080425dd
 80425b0:	080425cb 	.word	0x080425cb
 80425b4:	080425dd 	.word	0x080425dd
 80425b8:	080425dd 	.word	0x080425dd
 80425bc:	080425dd 	.word	0x080425dd
 80425c0:	080425d7 	.word	0x080425d7
 80425c4:	2300      	movs	r3, #0
 80425c6:	77fb      	strb	r3, [r7, #31]
 80425c8:	e118      	b.n	80427fc <UART_SetConfig+0x348>
 80425ca:	2302      	movs	r3, #2
 80425cc:	77fb      	strb	r3, [r7, #31]
 80425ce:	e115      	b.n	80427fc <UART_SetConfig+0x348>
 80425d0:	2304      	movs	r3, #4
 80425d2:	77fb      	strb	r3, [r7, #31]
 80425d4:	e112      	b.n	80427fc <UART_SetConfig+0x348>
 80425d6:	2308      	movs	r3, #8
 80425d8:	77fb      	strb	r3, [r7, #31]
 80425da:	e10f      	b.n	80427fc <UART_SetConfig+0x348>
 80425dc:	2310      	movs	r3, #16
 80425de:	77fb      	strb	r3, [r7, #31]
 80425e0:	e10c      	b.n	80427fc <UART_SetConfig+0x348>
 80425e2:	687b      	ldr	r3, [r7, #4]
 80425e4:	681b      	ldr	r3, [r3, #0]
 80425e6:	4a68      	ldr	r2, [pc, #416]	; (8042788 <UART_SetConfig+0x2d4>)
 80425e8:	4293      	cmp	r3, r2
 80425ea:	d120      	bne.n	804262e <UART_SetConfig+0x17a>
 80425ec:	4b64      	ldr	r3, [pc, #400]	; (8042780 <UART_SetConfig+0x2cc>)
 80425ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80425f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80425f6:	2b30      	cmp	r3, #48	; 0x30
 80425f8:	d013      	beq.n	8042622 <UART_SetConfig+0x16e>
 80425fa:	2b30      	cmp	r3, #48	; 0x30
 80425fc:	d814      	bhi.n	8042628 <UART_SetConfig+0x174>
 80425fe:	2b20      	cmp	r3, #32
 8042600:	d009      	beq.n	8042616 <UART_SetConfig+0x162>
 8042602:	2b20      	cmp	r3, #32
 8042604:	d810      	bhi.n	8042628 <UART_SetConfig+0x174>
 8042606:	2b00      	cmp	r3, #0
 8042608:	d002      	beq.n	8042610 <UART_SetConfig+0x15c>
 804260a:	2b10      	cmp	r3, #16
 804260c:	d006      	beq.n	804261c <UART_SetConfig+0x168>
 804260e:	e00b      	b.n	8042628 <UART_SetConfig+0x174>
 8042610:	2300      	movs	r3, #0
 8042612:	77fb      	strb	r3, [r7, #31]
 8042614:	e0f2      	b.n	80427fc <UART_SetConfig+0x348>
 8042616:	2302      	movs	r3, #2
 8042618:	77fb      	strb	r3, [r7, #31]
 804261a:	e0ef      	b.n	80427fc <UART_SetConfig+0x348>
 804261c:	2304      	movs	r3, #4
 804261e:	77fb      	strb	r3, [r7, #31]
 8042620:	e0ec      	b.n	80427fc <UART_SetConfig+0x348>
 8042622:	2308      	movs	r3, #8
 8042624:	77fb      	strb	r3, [r7, #31]
 8042626:	e0e9      	b.n	80427fc <UART_SetConfig+0x348>
 8042628:	2310      	movs	r3, #16
 804262a:	77fb      	strb	r3, [r7, #31]
 804262c:	e0e6      	b.n	80427fc <UART_SetConfig+0x348>
 804262e:	687b      	ldr	r3, [r7, #4]
 8042630:	681b      	ldr	r3, [r3, #0]
 8042632:	4a56      	ldr	r2, [pc, #344]	; (804278c <UART_SetConfig+0x2d8>)
 8042634:	4293      	cmp	r3, r2
 8042636:	d120      	bne.n	804267a <UART_SetConfig+0x1c6>
 8042638:	4b51      	ldr	r3, [pc, #324]	; (8042780 <UART_SetConfig+0x2cc>)
 804263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804263e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042642:	2bc0      	cmp	r3, #192	; 0xc0
 8042644:	d013      	beq.n	804266e <UART_SetConfig+0x1ba>
 8042646:	2bc0      	cmp	r3, #192	; 0xc0
 8042648:	d814      	bhi.n	8042674 <UART_SetConfig+0x1c0>
 804264a:	2b80      	cmp	r3, #128	; 0x80
 804264c:	d009      	beq.n	8042662 <UART_SetConfig+0x1ae>
 804264e:	2b80      	cmp	r3, #128	; 0x80
 8042650:	d810      	bhi.n	8042674 <UART_SetConfig+0x1c0>
 8042652:	2b00      	cmp	r3, #0
 8042654:	d002      	beq.n	804265c <UART_SetConfig+0x1a8>
 8042656:	2b40      	cmp	r3, #64	; 0x40
 8042658:	d006      	beq.n	8042668 <UART_SetConfig+0x1b4>
 804265a:	e00b      	b.n	8042674 <UART_SetConfig+0x1c0>
 804265c:	2300      	movs	r3, #0
 804265e:	77fb      	strb	r3, [r7, #31]
 8042660:	e0cc      	b.n	80427fc <UART_SetConfig+0x348>
 8042662:	2302      	movs	r3, #2
 8042664:	77fb      	strb	r3, [r7, #31]
 8042666:	e0c9      	b.n	80427fc <UART_SetConfig+0x348>
 8042668:	2304      	movs	r3, #4
 804266a:	77fb      	strb	r3, [r7, #31]
 804266c:	e0c6      	b.n	80427fc <UART_SetConfig+0x348>
 804266e:	2308      	movs	r3, #8
 8042670:	77fb      	strb	r3, [r7, #31]
 8042672:	e0c3      	b.n	80427fc <UART_SetConfig+0x348>
 8042674:	2310      	movs	r3, #16
 8042676:	77fb      	strb	r3, [r7, #31]
 8042678:	e0c0      	b.n	80427fc <UART_SetConfig+0x348>
 804267a:	687b      	ldr	r3, [r7, #4]
 804267c:	681b      	ldr	r3, [r3, #0]
 804267e:	4a44      	ldr	r2, [pc, #272]	; (8042790 <UART_SetConfig+0x2dc>)
 8042680:	4293      	cmp	r3, r2
 8042682:	d125      	bne.n	80426d0 <UART_SetConfig+0x21c>
 8042684:	4b3e      	ldr	r3, [pc, #248]	; (8042780 <UART_SetConfig+0x2cc>)
 8042686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804268e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042692:	d017      	beq.n	80426c4 <UART_SetConfig+0x210>
 8042694:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042698:	d817      	bhi.n	80426ca <UART_SetConfig+0x216>
 804269a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804269e:	d00b      	beq.n	80426b8 <UART_SetConfig+0x204>
 80426a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80426a4:	d811      	bhi.n	80426ca <UART_SetConfig+0x216>
 80426a6:	2b00      	cmp	r3, #0
 80426a8:	d003      	beq.n	80426b2 <UART_SetConfig+0x1fe>
 80426aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80426ae:	d006      	beq.n	80426be <UART_SetConfig+0x20a>
 80426b0:	e00b      	b.n	80426ca <UART_SetConfig+0x216>
 80426b2:	2300      	movs	r3, #0
 80426b4:	77fb      	strb	r3, [r7, #31]
 80426b6:	e0a1      	b.n	80427fc <UART_SetConfig+0x348>
 80426b8:	2302      	movs	r3, #2
 80426ba:	77fb      	strb	r3, [r7, #31]
 80426bc:	e09e      	b.n	80427fc <UART_SetConfig+0x348>
 80426be:	2304      	movs	r3, #4
 80426c0:	77fb      	strb	r3, [r7, #31]
 80426c2:	e09b      	b.n	80427fc <UART_SetConfig+0x348>
 80426c4:	2308      	movs	r3, #8
 80426c6:	77fb      	strb	r3, [r7, #31]
 80426c8:	e098      	b.n	80427fc <UART_SetConfig+0x348>
 80426ca:	2310      	movs	r3, #16
 80426cc:	77fb      	strb	r3, [r7, #31]
 80426ce:	e095      	b.n	80427fc <UART_SetConfig+0x348>
 80426d0:	687b      	ldr	r3, [r7, #4]
 80426d2:	681b      	ldr	r3, [r3, #0]
 80426d4:	4a2f      	ldr	r2, [pc, #188]	; (8042794 <UART_SetConfig+0x2e0>)
 80426d6:	4293      	cmp	r3, r2
 80426d8:	d125      	bne.n	8042726 <UART_SetConfig+0x272>
 80426da:	4b29      	ldr	r3, [pc, #164]	; (8042780 <UART_SetConfig+0x2cc>)
 80426dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80426e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80426e8:	d017      	beq.n	804271a <UART_SetConfig+0x266>
 80426ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80426ee:	d817      	bhi.n	8042720 <UART_SetConfig+0x26c>
 80426f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80426f4:	d00b      	beq.n	804270e <UART_SetConfig+0x25a>
 80426f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80426fa:	d811      	bhi.n	8042720 <UART_SetConfig+0x26c>
 80426fc:	2b00      	cmp	r3, #0
 80426fe:	d003      	beq.n	8042708 <UART_SetConfig+0x254>
 8042700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042704:	d006      	beq.n	8042714 <UART_SetConfig+0x260>
 8042706:	e00b      	b.n	8042720 <UART_SetConfig+0x26c>
 8042708:	2301      	movs	r3, #1
 804270a:	77fb      	strb	r3, [r7, #31]
 804270c:	e076      	b.n	80427fc <UART_SetConfig+0x348>
 804270e:	2302      	movs	r3, #2
 8042710:	77fb      	strb	r3, [r7, #31]
 8042712:	e073      	b.n	80427fc <UART_SetConfig+0x348>
 8042714:	2304      	movs	r3, #4
 8042716:	77fb      	strb	r3, [r7, #31]
 8042718:	e070      	b.n	80427fc <UART_SetConfig+0x348>
 804271a:	2308      	movs	r3, #8
 804271c:	77fb      	strb	r3, [r7, #31]
 804271e:	e06d      	b.n	80427fc <UART_SetConfig+0x348>
 8042720:	2310      	movs	r3, #16
 8042722:	77fb      	strb	r3, [r7, #31]
 8042724:	e06a      	b.n	80427fc <UART_SetConfig+0x348>
 8042726:	687b      	ldr	r3, [r7, #4]
 8042728:	681b      	ldr	r3, [r3, #0]
 804272a:	4a1b      	ldr	r2, [pc, #108]	; (8042798 <UART_SetConfig+0x2e4>)
 804272c:	4293      	cmp	r3, r2
 804272e:	d138      	bne.n	80427a2 <UART_SetConfig+0x2ee>
 8042730:	4b13      	ldr	r3, [pc, #76]	; (8042780 <UART_SetConfig+0x2cc>)
 8042732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042736:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 804273a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 804273e:	d017      	beq.n	8042770 <UART_SetConfig+0x2bc>
 8042740:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042744:	d82a      	bhi.n	804279c <UART_SetConfig+0x2e8>
 8042746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804274a:	d00b      	beq.n	8042764 <UART_SetConfig+0x2b0>
 804274c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042750:	d824      	bhi.n	804279c <UART_SetConfig+0x2e8>
 8042752:	2b00      	cmp	r3, #0
 8042754:	d003      	beq.n	804275e <UART_SetConfig+0x2aa>
 8042756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804275a:	d006      	beq.n	804276a <UART_SetConfig+0x2b6>
 804275c:	e01e      	b.n	804279c <UART_SetConfig+0x2e8>
 804275e:	2300      	movs	r3, #0
 8042760:	77fb      	strb	r3, [r7, #31]
 8042762:	e04b      	b.n	80427fc <UART_SetConfig+0x348>
 8042764:	2302      	movs	r3, #2
 8042766:	77fb      	strb	r3, [r7, #31]
 8042768:	e048      	b.n	80427fc <UART_SetConfig+0x348>
 804276a:	2304      	movs	r3, #4
 804276c:	77fb      	strb	r3, [r7, #31]
 804276e:	e045      	b.n	80427fc <UART_SetConfig+0x348>
 8042770:	2308      	movs	r3, #8
 8042772:	77fb      	strb	r3, [r7, #31]
 8042774:	e042      	b.n	80427fc <UART_SetConfig+0x348>
 8042776:	bf00      	nop
 8042778:	efff69f3 	.word	0xefff69f3
 804277c:	40011000 	.word	0x40011000
 8042780:	40023800 	.word	0x40023800
 8042784:	40004400 	.word	0x40004400
 8042788:	40004800 	.word	0x40004800
 804278c:	40004c00 	.word	0x40004c00
 8042790:	40005000 	.word	0x40005000
 8042794:	40011400 	.word	0x40011400
 8042798:	40007800 	.word	0x40007800
 804279c:	2310      	movs	r3, #16
 804279e:	77fb      	strb	r3, [r7, #31]
 80427a0:	e02c      	b.n	80427fc <UART_SetConfig+0x348>
 80427a2:	687b      	ldr	r3, [r7, #4]
 80427a4:	681b      	ldr	r3, [r3, #0]
 80427a6:	4a72      	ldr	r2, [pc, #456]	; (8042970 <UART_SetConfig+0x4bc>)
 80427a8:	4293      	cmp	r3, r2
 80427aa:	d125      	bne.n	80427f8 <UART_SetConfig+0x344>
 80427ac:	4b71      	ldr	r3, [pc, #452]	; (8042974 <UART_SetConfig+0x4c0>)
 80427ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80427b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80427b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80427ba:	d017      	beq.n	80427ec <UART_SetConfig+0x338>
 80427bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80427c0:	d817      	bhi.n	80427f2 <UART_SetConfig+0x33e>
 80427c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80427c6:	d00b      	beq.n	80427e0 <UART_SetConfig+0x32c>
 80427c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80427cc:	d811      	bhi.n	80427f2 <UART_SetConfig+0x33e>
 80427ce:	2b00      	cmp	r3, #0
 80427d0:	d003      	beq.n	80427da <UART_SetConfig+0x326>
 80427d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80427d6:	d006      	beq.n	80427e6 <UART_SetConfig+0x332>
 80427d8:	e00b      	b.n	80427f2 <UART_SetConfig+0x33e>
 80427da:	2300      	movs	r3, #0
 80427dc:	77fb      	strb	r3, [r7, #31]
 80427de:	e00d      	b.n	80427fc <UART_SetConfig+0x348>
 80427e0:	2302      	movs	r3, #2
 80427e2:	77fb      	strb	r3, [r7, #31]
 80427e4:	e00a      	b.n	80427fc <UART_SetConfig+0x348>
 80427e6:	2304      	movs	r3, #4
 80427e8:	77fb      	strb	r3, [r7, #31]
 80427ea:	e007      	b.n	80427fc <UART_SetConfig+0x348>
 80427ec:	2308      	movs	r3, #8
 80427ee:	77fb      	strb	r3, [r7, #31]
 80427f0:	e004      	b.n	80427fc <UART_SetConfig+0x348>
 80427f2:	2310      	movs	r3, #16
 80427f4:	77fb      	strb	r3, [r7, #31]
 80427f6:	e001      	b.n	80427fc <UART_SetConfig+0x348>
 80427f8:	2310      	movs	r3, #16
 80427fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80427fc:	687b      	ldr	r3, [r7, #4]
 80427fe:	69db      	ldr	r3, [r3, #28]
 8042800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042804:	d15c      	bne.n	80428c0 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8042806:	7ffb      	ldrb	r3, [r7, #31]
 8042808:	2b08      	cmp	r3, #8
 804280a:	d828      	bhi.n	804285e <UART_SetConfig+0x3aa>
 804280c:	a201      	add	r2, pc, #4	; (adr r2, 8042814 <UART_SetConfig+0x360>)
 804280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042812:	bf00      	nop
 8042814:	08042839 	.word	0x08042839
 8042818:	08042841 	.word	0x08042841
 804281c:	08042849 	.word	0x08042849
 8042820:	0804285f 	.word	0x0804285f
 8042824:	0804284f 	.word	0x0804284f
 8042828:	0804285f 	.word	0x0804285f
 804282c:	0804285f 	.word	0x0804285f
 8042830:	0804285f 	.word	0x0804285f
 8042834:	08042857 	.word	0x08042857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042838:	f7ff f90a 	bl	8041a50 <HAL_RCC_GetPCLK1Freq>
 804283c:	61b8      	str	r0, [r7, #24]
        break;
 804283e:	e013      	b.n	8042868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042840:	f7ff f91a 	bl	8041a78 <HAL_RCC_GetPCLK2Freq>
 8042844:	61b8      	str	r0, [r7, #24]
        break;
 8042846:	e00f      	b.n	8042868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042848:	4b4b      	ldr	r3, [pc, #300]	; (8042978 <UART_SetConfig+0x4c4>)
 804284a:	61bb      	str	r3, [r7, #24]
        break;
 804284c:	e00c      	b.n	8042868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804284e:	f7ff f82d 	bl	80418ac <HAL_RCC_GetSysClockFreq>
 8042852:	61b8      	str	r0, [r7, #24]
        break;
 8042854:	e008      	b.n	8042868 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804285a:	61bb      	str	r3, [r7, #24]
        break;
 804285c:	e004      	b.n	8042868 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 804285e:	2300      	movs	r3, #0
 8042860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8042862:	2301      	movs	r3, #1
 8042864:	77bb      	strb	r3, [r7, #30]
        break;
 8042866:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042868:	69bb      	ldr	r3, [r7, #24]
 804286a:	2b00      	cmp	r3, #0
 804286c:	d074      	beq.n	8042958 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 804286e:	69bb      	ldr	r3, [r7, #24]
 8042870:	005a      	lsls	r2, r3, #1
 8042872:	687b      	ldr	r3, [r7, #4]
 8042874:	685b      	ldr	r3, [r3, #4]
 8042876:	085b      	lsrs	r3, r3, #1
 8042878:	441a      	add	r2, r3
 804287a:	687b      	ldr	r3, [r7, #4]
 804287c:	685b      	ldr	r3, [r3, #4]
 804287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8042882:	b29b      	uxth	r3, r3
 8042884:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042886:	693b      	ldr	r3, [r7, #16]
 8042888:	2b0f      	cmp	r3, #15
 804288a:	d916      	bls.n	80428ba <UART_SetConfig+0x406>
 804288c:	693b      	ldr	r3, [r7, #16]
 804288e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042892:	d212      	bcs.n	80428ba <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8042894:	693b      	ldr	r3, [r7, #16]
 8042896:	b29b      	uxth	r3, r3
 8042898:	f023 030f 	bic.w	r3, r3, #15
 804289c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804289e:	693b      	ldr	r3, [r7, #16]
 80428a0:	085b      	lsrs	r3, r3, #1
 80428a2:	b29b      	uxth	r3, r3
 80428a4:	f003 0307 	and.w	r3, r3, #7
 80428a8:	b29a      	uxth	r2, r3
 80428aa:	89fb      	ldrh	r3, [r7, #14]
 80428ac:	4313      	orrs	r3, r2
 80428ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80428b0:	687b      	ldr	r3, [r7, #4]
 80428b2:	681b      	ldr	r3, [r3, #0]
 80428b4:	89fa      	ldrh	r2, [r7, #14]
 80428b6:	60da      	str	r2, [r3, #12]
 80428b8:	e04e      	b.n	8042958 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80428ba:	2301      	movs	r3, #1
 80428bc:	77bb      	strb	r3, [r7, #30]
 80428be:	e04b      	b.n	8042958 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80428c0:	7ffb      	ldrb	r3, [r7, #31]
 80428c2:	2b08      	cmp	r3, #8
 80428c4:	d827      	bhi.n	8042916 <UART_SetConfig+0x462>
 80428c6:	a201      	add	r2, pc, #4	; (adr r2, 80428cc <UART_SetConfig+0x418>)
 80428c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80428cc:	080428f1 	.word	0x080428f1
 80428d0:	080428f9 	.word	0x080428f9
 80428d4:	08042901 	.word	0x08042901
 80428d8:	08042917 	.word	0x08042917
 80428dc:	08042907 	.word	0x08042907
 80428e0:	08042917 	.word	0x08042917
 80428e4:	08042917 	.word	0x08042917
 80428e8:	08042917 	.word	0x08042917
 80428ec:	0804290f 	.word	0x0804290f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80428f0:	f7ff f8ae 	bl	8041a50 <HAL_RCC_GetPCLK1Freq>
 80428f4:	61b8      	str	r0, [r7, #24]
        break;
 80428f6:	e013      	b.n	8042920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80428f8:	f7ff f8be 	bl	8041a78 <HAL_RCC_GetPCLK2Freq>
 80428fc:	61b8      	str	r0, [r7, #24]
        break;
 80428fe:	e00f      	b.n	8042920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042900:	4b1d      	ldr	r3, [pc, #116]	; (8042978 <UART_SetConfig+0x4c4>)
 8042902:	61bb      	str	r3, [r7, #24]
        break;
 8042904:	e00c      	b.n	8042920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042906:	f7fe ffd1 	bl	80418ac <HAL_RCC_GetSysClockFreq>
 804290a:	61b8      	str	r0, [r7, #24]
        break;
 804290c:	e008      	b.n	8042920 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804290e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042912:	61bb      	str	r3, [r7, #24]
        break;
 8042914:	e004      	b.n	8042920 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8042916:	2300      	movs	r3, #0
 8042918:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 804291a:	2301      	movs	r3, #1
 804291c:	77bb      	strb	r3, [r7, #30]
        break;
 804291e:	bf00      	nop
    }

    if (pclk != 0U)
 8042920:	69bb      	ldr	r3, [r7, #24]
 8042922:	2b00      	cmp	r3, #0
 8042924:	d018      	beq.n	8042958 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8042926:	687b      	ldr	r3, [r7, #4]
 8042928:	685b      	ldr	r3, [r3, #4]
 804292a:	085a      	lsrs	r2, r3, #1
 804292c:	69bb      	ldr	r3, [r7, #24]
 804292e:	441a      	add	r2, r3
 8042930:	687b      	ldr	r3, [r7, #4]
 8042932:	685b      	ldr	r3, [r3, #4]
 8042934:	fbb2 f3f3 	udiv	r3, r2, r3
 8042938:	b29b      	uxth	r3, r3
 804293a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804293c:	693b      	ldr	r3, [r7, #16]
 804293e:	2b0f      	cmp	r3, #15
 8042940:	d908      	bls.n	8042954 <UART_SetConfig+0x4a0>
 8042942:	693b      	ldr	r3, [r7, #16]
 8042944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042948:	d204      	bcs.n	8042954 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 804294a:	687b      	ldr	r3, [r7, #4]
 804294c:	681b      	ldr	r3, [r3, #0]
 804294e:	693a      	ldr	r2, [r7, #16]
 8042950:	60da      	str	r2, [r3, #12]
 8042952:	e001      	b.n	8042958 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8042954:	2301      	movs	r3, #1
 8042956:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042958:	687b      	ldr	r3, [r7, #4]
 804295a:	2200      	movs	r2, #0
 804295c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 804295e:	687b      	ldr	r3, [r7, #4]
 8042960:	2200      	movs	r2, #0
 8042962:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8042964:	7fbb      	ldrb	r3, [r7, #30]
}
 8042966:	4618      	mov	r0, r3
 8042968:	3720      	adds	r7, #32
 804296a:	46bd      	mov	sp, r7
 804296c:	bd80      	pop	{r7, pc}
 804296e:	bf00      	nop
 8042970:	40007c00 	.word	0x40007c00
 8042974:	40023800 	.word	0x40023800
 8042978:	00f42400 	.word	0x00f42400

0804297c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 804297c:	b480      	push	{r7}
 804297e:	b083      	sub	sp, #12
 8042980:	af00      	add	r7, sp, #0
 8042982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042984:	687b      	ldr	r3, [r7, #4]
 8042986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042988:	f003 0301 	and.w	r3, r3, #1
 804298c:	2b00      	cmp	r3, #0
 804298e:	d00a      	beq.n	80429a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042990:	687b      	ldr	r3, [r7, #4]
 8042992:	681b      	ldr	r3, [r3, #0]
 8042994:	685b      	ldr	r3, [r3, #4]
 8042996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 804299a:	687b      	ldr	r3, [r7, #4]
 804299c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804299e:	687b      	ldr	r3, [r7, #4]
 80429a0:	681b      	ldr	r3, [r3, #0]
 80429a2:	430a      	orrs	r2, r1
 80429a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80429a6:	687b      	ldr	r3, [r7, #4]
 80429a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429aa:	f003 0302 	and.w	r3, r3, #2
 80429ae:	2b00      	cmp	r3, #0
 80429b0:	d00a      	beq.n	80429c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80429b2:	687b      	ldr	r3, [r7, #4]
 80429b4:	681b      	ldr	r3, [r3, #0]
 80429b6:	685b      	ldr	r3, [r3, #4]
 80429b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80429bc:	687b      	ldr	r3, [r7, #4]
 80429be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80429c0:	687b      	ldr	r3, [r7, #4]
 80429c2:	681b      	ldr	r3, [r3, #0]
 80429c4:	430a      	orrs	r2, r1
 80429c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80429c8:	687b      	ldr	r3, [r7, #4]
 80429ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429cc:	f003 0304 	and.w	r3, r3, #4
 80429d0:	2b00      	cmp	r3, #0
 80429d2:	d00a      	beq.n	80429ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80429d4:	687b      	ldr	r3, [r7, #4]
 80429d6:	681b      	ldr	r3, [r3, #0]
 80429d8:	685b      	ldr	r3, [r3, #4]
 80429da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80429de:	687b      	ldr	r3, [r7, #4]
 80429e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80429e2:	687b      	ldr	r3, [r7, #4]
 80429e4:	681b      	ldr	r3, [r3, #0]
 80429e6:	430a      	orrs	r2, r1
 80429e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80429ea:	687b      	ldr	r3, [r7, #4]
 80429ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429ee:	f003 0308 	and.w	r3, r3, #8
 80429f2:	2b00      	cmp	r3, #0
 80429f4:	d00a      	beq.n	8042a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80429f6:	687b      	ldr	r3, [r7, #4]
 80429f8:	681b      	ldr	r3, [r3, #0]
 80429fa:	685b      	ldr	r3, [r3, #4]
 80429fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8042a00:	687b      	ldr	r3, [r7, #4]
 8042a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042a04:	687b      	ldr	r3, [r7, #4]
 8042a06:	681b      	ldr	r3, [r3, #0]
 8042a08:	430a      	orrs	r2, r1
 8042a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042a0c:	687b      	ldr	r3, [r7, #4]
 8042a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a10:	f003 0310 	and.w	r3, r3, #16
 8042a14:	2b00      	cmp	r3, #0
 8042a16:	d00a      	beq.n	8042a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042a18:	687b      	ldr	r3, [r7, #4]
 8042a1a:	681b      	ldr	r3, [r3, #0]
 8042a1c:	689b      	ldr	r3, [r3, #8]
 8042a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8042a22:	687b      	ldr	r3, [r7, #4]
 8042a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8042a26:	687b      	ldr	r3, [r7, #4]
 8042a28:	681b      	ldr	r3, [r3, #0]
 8042a2a:	430a      	orrs	r2, r1
 8042a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042a2e:	687b      	ldr	r3, [r7, #4]
 8042a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a32:	f003 0320 	and.w	r3, r3, #32
 8042a36:	2b00      	cmp	r3, #0
 8042a38:	d00a      	beq.n	8042a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042a3a:	687b      	ldr	r3, [r7, #4]
 8042a3c:	681b      	ldr	r3, [r3, #0]
 8042a3e:	689b      	ldr	r3, [r3, #8]
 8042a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8042a44:	687b      	ldr	r3, [r7, #4]
 8042a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042a48:	687b      	ldr	r3, [r7, #4]
 8042a4a:	681b      	ldr	r3, [r3, #0]
 8042a4c:	430a      	orrs	r2, r1
 8042a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042a50:	687b      	ldr	r3, [r7, #4]
 8042a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042a58:	2b00      	cmp	r3, #0
 8042a5a:	d01a      	beq.n	8042a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042a5c:	687b      	ldr	r3, [r7, #4]
 8042a5e:	681b      	ldr	r3, [r3, #0]
 8042a60:	685b      	ldr	r3, [r3, #4]
 8042a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8042a66:	687b      	ldr	r3, [r7, #4]
 8042a68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042a6a:	687b      	ldr	r3, [r7, #4]
 8042a6c:	681b      	ldr	r3, [r3, #0]
 8042a6e:	430a      	orrs	r2, r1
 8042a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042a72:	687b      	ldr	r3, [r7, #4]
 8042a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042a7a:	d10a      	bne.n	8042a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042a7c:	687b      	ldr	r3, [r7, #4]
 8042a7e:	681b      	ldr	r3, [r3, #0]
 8042a80:	685b      	ldr	r3, [r3, #4]
 8042a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8042a86:	687b      	ldr	r3, [r7, #4]
 8042a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8042a8a:	687b      	ldr	r3, [r7, #4]
 8042a8c:	681b      	ldr	r3, [r3, #0]
 8042a8e:	430a      	orrs	r2, r1
 8042a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042a92:	687b      	ldr	r3, [r7, #4]
 8042a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042a9a:	2b00      	cmp	r3, #0
 8042a9c:	d00a      	beq.n	8042ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042a9e:	687b      	ldr	r3, [r7, #4]
 8042aa0:	681b      	ldr	r3, [r3, #0]
 8042aa2:	685b      	ldr	r3, [r3, #4]
 8042aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8042aa8:	687b      	ldr	r3, [r7, #4]
 8042aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8042aac:	687b      	ldr	r3, [r7, #4]
 8042aae:	681b      	ldr	r3, [r3, #0]
 8042ab0:	430a      	orrs	r2, r1
 8042ab2:	605a      	str	r2, [r3, #4]
  }
}
 8042ab4:	bf00      	nop
 8042ab6:	370c      	adds	r7, #12
 8042ab8:	46bd      	mov	sp, r7
 8042aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042abe:	4770      	bx	lr

08042ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042ac0:	b580      	push	{r7, lr}
 8042ac2:	b086      	sub	sp, #24
 8042ac4:	af02      	add	r7, sp, #8
 8042ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042ac8:	687b      	ldr	r3, [r7, #4]
 8042aca:	2200      	movs	r2, #0
 8042acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042ad0:	f7fe f876 	bl	8040bc0 <HAL_GetTick>
 8042ad4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042ad6:	687b      	ldr	r3, [r7, #4]
 8042ad8:	681b      	ldr	r3, [r3, #0]
 8042ada:	681b      	ldr	r3, [r3, #0]
 8042adc:	f003 0308 	and.w	r3, r3, #8
 8042ae0:	2b08      	cmp	r3, #8
 8042ae2:	d10e      	bne.n	8042b02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042ae8:	9300      	str	r3, [sp, #0]
 8042aea:	68fb      	ldr	r3, [r7, #12]
 8042aec:	2200      	movs	r2, #0
 8042aee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8042af2:	6878      	ldr	r0, [r7, #4]
 8042af4:	f000 f82d 	bl	8042b52 <UART_WaitOnFlagUntilTimeout>
 8042af8:	4603      	mov	r3, r0
 8042afa:	2b00      	cmp	r3, #0
 8042afc:	d001      	beq.n	8042b02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042afe:	2303      	movs	r3, #3
 8042b00:	e023      	b.n	8042b4a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042b02:	687b      	ldr	r3, [r7, #4]
 8042b04:	681b      	ldr	r3, [r3, #0]
 8042b06:	681b      	ldr	r3, [r3, #0]
 8042b08:	f003 0304 	and.w	r3, r3, #4
 8042b0c:	2b04      	cmp	r3, #4
 8042b0e:	d10e      	bne.n	8042b2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042b14:	9300      	str	r3, [sp, #0]
 8042b16:	68fb      	ldr	r3, [r7, #12]
 8042b18:	2200      	movs	r2, #0
 8042b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8042b1e:	6878      	ldr	r0, [r7, #4]
 8042b20:	f000 f817 	bl	8042b52 <UART_WaitOnFlagUntilTimeout>
 8042b24:	4603      	mov	r3, r0
 8042b26:	2b00      	cmp	r3, #0
 8042b28:	d001      	beq.n	8042b2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042b2a:	2303      	movs	r3, #3
 8042b2c:	e00d      	b.n	8042b4a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	2220      	movs	r2, #32
 8042b32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8042b34:	687b      	ldr	r3, [r7, #4]
 8042b36:	2220      	movs	r2, #32
 8042b38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042b3a:	687b      	ldr	r3, [r7, #4]
 8042b3c:	2200      	movs	r2, #0
 8042b3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8042b40:	687b      	ldr	r3, [r7, #4]
 8042b42:	2200      	movs	r2, #0
 8042b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8042b48:	2300      	movs	r3, #0
}
 8042b4a:	4618      	mov	r0, r3
 8042b4c:	3710      	adds	r7, #16
 8042b4e:	46bd      	mov	sp, r7
 8042b50:	bd80      	pop	{r7, pc}

08042b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042b52:	b580      	push	{r7, lr}
 8042b54:	b084      	sub	sp, #16
 8042b56:	af00      	add	r7, sp, #0
 8042b58:	60f8      	str	r0, [r7, #12]
 8042b5a:	60b9      	str	r1, [r7, #8]
 8042b5c:	603b      	str	r3, [r7, #0]
 8042b5e:	4613      	mov	r3, r2
 8042b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042b62:	e05e      	b.n	8042c22 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042b64:	69bb      	ldr	r3, [r7, #24]
 8042b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042b6a:	d05a      	beq.n	8042c22 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042b6c:	f7fe f828 	bl	8040bc0 <HAL_GetTick>
 8042b70:	4602      	mov	r2, r0
 8042b72:	683b      	ldr	r3, [r7, #0]
 8042b74:	1ad3      	subs	r3, r2, r3
 8042b76:	69ba      	ldr	r2, [r7, #24]
 8042b78:	429a      	cmp	r2, r3
 8042b7a:	d302      	bcc.n	8042b82 <UART_WaitOnFlagUntilTimeout+0x30>
 8042b7c:	69bb      	ldr	r3, [r7, #24]
 8042b7e:	2b00      	cmp	r3, #0
 8042b80:	d11b      	bne.n	8042bba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8042b82:	68fb      	ldr	r3, [r7, #12]
 8042b84:	681b      	ldr	r3, [r3, #0]
 8042b86:	681a      	ldr	r2, [r3, #0]
 8042b88:	68fb      	ldr	r3, [r7, #12]
 8042b8a:	681b      	ldr	r3, [r3, #0]
 8042b8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042b90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042b92:	68fb      	ldr	r3, [r7, #12]
 8042b94:	681b      	ldr	r3, [r3, #0]
 8042b96:	689a      	ldr	r2, [r3, #8]
 8042b98:	68fb      	ldr	r3, [r7, #12]
 8042b9a:	681b      	ldr	r3, [r3, #0]
 8042b9c:	f022 0201 	bic.w	r2, r2, #1
 8042ba0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8042ba2:	68fb      	ldr	r3, [r7, #12]
 8042ba4:	2220      	movs	r2, #32
 8042ba6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8042ba8:	68fb      	ldr	r3, [r7, #12]
 8042baa:	2220      	movs	r2, #32
 8042bac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8042bae:	68fb      	ldr	r3, [r7, #12]
 8042bb0:	2200      	movs	r2, #0
 8042bb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8042bb6:	2303      	movs	r3, #3
 8042bb8:	e043      	b.n	8042c42 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8042bba:	68fb      	ldr	r3, [r7, #12]
 8042bbc:	681b      	ldr	r3, [r3, #0]
 8042bbe:	681b      	ldr	r3, [r3, #0]
 8042bc0:	f003 0304 	and.w	r3, r3, #4
 8042bc4:	2b00      	cmp	r3, #0
 8042bc6:	d02c      	beq.n	8042c22 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042bc8:	68fb      	ldr	r3, [r7, #12]
 8042bca:	681b      	ldr	r3, [r3, #0]
 8042bcc:	69db      	ldr	r3, [r3, #28]
 8042bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042bd6:	d124      	bne.n	8042c22 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042bd8:	68fb      	ldr	r3, [r7, #12]
 8042bda:	681b      	ldr	r3, [r3, #0]
 8042bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042be0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8042be2:	68fb      	ldr	r3, [r7, #12]
 8042be4:	681b      	ldr	r3, [r3, #0]
 8042be6:	681a      	ldr	r2, [r3, #0]
 8042be8:	68fb      	ldr	r3, [r7, #12]
 8042bea:	681b      	ldr	r3, [r3, #0]
 8042bec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8042bf0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042bf2:	68fb      	ldr	r3, [r7, #12]
 8042bf4:	681b      	ldr	r3, [r3, #0]
 8042bf6:	689a      	ldr	r2, [r3, #8]
 8042bf8:	68fb      	ldr	r3, [r7, #12]
 8042bfa:	681b      	ldr	r3, [r3, #0]
 8042bfc:	f022 0201 	bic.w	r2, r2, #1
 8042c00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8042c02:	68fb      	ldr	r3, [r7, #12]
 8042c04:	2220      	movs	r2, #32
 8042c06:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8042c08:	68fb      	ldr	r3, [r7, #12]
 8042c0a:	2220      	movs	r2, #32
 8042c0c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042c0e:	68fb      	ldr	r3, [r7, #12]
 8042c10:	2220      	movs	r2, #32
 8042c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042c16:	68fb      	ldr	r3, [r7, #12]
 8042c18:	2200      	movs	r2, #0
 8042c1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8042c1e:	2303      	movs	r3, #3
 8042c20:	e00f      	b.n	8042c42 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042c22:	68fb      	ldr	r3, [r7, #12]
 8042c24:	681b      	ldr	r3, [r3, #0]
 8042c26:	69da      	ldr	r2, [r3, #28]
 8042c28:	68bb      	ldr	r3, [r7, #8]
 8042c2a:	4013      	ands	r3, r2
 8042c2c:	68ba      	ldr	r2, [r7, #8]
 8042c2e:	429a      	cmp	r2, r3
 8042c30:	bf0c      	ite	eq
 8042c32:	2301      	moveq	r3, #1
 8042c34:	2300      	movne	r3, #0
 8042c36:	b2db      	uxtb	r3, r3
 8042c38:	461a      	mov	r2, r3
 8042c3a:	79fb      	ldrb	r3, [r7, #7]
 8042c3c:	429a      	cmp	r2, r3
 8042c3e:	d091      	beq.n	8042b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042c40:	2300      	movs	r3, #0
}
 8042c42:	4618      	mov	r0, r3
 8042c44:	3710      	adds	r7, #16
 8042c46:	46bd      	mov	sp, r7
 8042c48:	bd80      	pop	{r7, pc}
	...

08042c4c <__errno>:
 8042c4c:	4b01      	ldr	r3, [pc, #4]	; (8042c54 <__errno+0x8>)
 8042c4e:	6818      	ldr	r0, [r3, #0]
 8042c50:	4770      	bx	lr
 8042c52:	bf00      	nop
 8042c54:	2000000c 	.word	0x2000000c

08042c58 <__libc_init_array>:
 8042c58:	b570      	push	{r4, r5, r6, lr}
 8042c5a:	4d0d      	ldr	r5, [pc, #52]	; (8042c90 <__libc_init_array+0x38>)
 8042c5c:	4c0d      	ldr	r4, [pc, #52]	; (8042c94 <__libc_init_array+0x3c>)
 8042c5e:	1b64      	subs	r4, r4, r5
 8042c60:	10a4      	asrs	r4, r4, #2
 8042c62:	2600      	movs	r6, #0
 8042c64:	42a6      	cmp	r6, r4
 8042c66:	d109      	bne.n	8042c7c <__libc_init_array+0x24>
 8042c68:	4d0b      	ldr	r5, [pc, #44]	; (8042c98 <__libc_init_array+0x40>)
 8042c6a:	4c0c      	ldr	r4, [pc, #48]	; (8042c9c <__libc_init_array+0x44>)
 8042c6c:	f000 ffae 	bl	8043bcc <_init>
 8042c70:	1b64      	subs	r4, r4, r5
 8042c72:	10a4      	asrs	r4, r4, #2
 8042c74:	2600      	movs	r6, #0
 8042c76:	42a6      	cmp	r6, r4
 8042c78:	d105      	bne.n	8042c86 <__libc_init_array+0x2e>
 8042c7a:	bd70      	pop	{r4, r5, r6, pc}
 8042c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8042c80:	4798      	blx	r3
 8042c82:	3601      	adds	r6, #1
 8042c84:	e7ee      	b.n	8042c64 <__libc_init_array+0xc>
 8042c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8042c8a:	4798      	blx	r3
 8042c8c:	3601      	adds	r6, #1
 8042c8e:	e7f2      	b.n	8042c76 <__libc_init_array+0x1e>
 8042c90:	08043cbc 	.word	0x08043cbc
 8042c94:	08043cbc 	.word	0x08043cbc
 8042c98:	08043cbc 	.word	0x08043cbc
 8042c9c:	08043cc0 	.word	0x08043cc0

08042ca0 <memset>:
 8042ca0:	4402      	add	r2, r0
 8042ca2:	4603      	mov	r3, r0
 8042ca4:	4293      	cmp	r3, r2
 8042ca6:	d100      	bne.n	8042caa <memset+0xa>
 8042ca8:	4770      	bx	lr
 8042caa:	f803 1b01 	strb.w	r1, [r3], #1
 8042cae:	e7f9      	b.n	8042ca4 <memset+0x4>

08042cb0 <iprintf>:
 8042cb0:	b40f      	push	{r0, r1, r2, r3}
 8042cb2:	4b0a      	ldr	r3, [pc, #40]	; (8042cdc <iprintf+0x2c>)
 8042cb4:	b513      	push	{r0, r1, r4, lr}
 8042cb6:	681c      	ldr	r4, [r3, #0]
 8042cb8:	b124      	cbz	r4, 8042cc4 <iprintf+0x14>
 8042cba:	69a3      	ldr	r3, [r4, #24]
 8042cbc:	b913      	cbnz	r3, 8042cc4 <iprintf+0x14>
 8042cbe:	4620      	mov	r0, r4
 8042cc0:	f000 f866 	bl	8042d90 <__sinit>
 8042cc4:	ab05      	add	r3, sp, #20
 8042cc6:	9a04      	ldr	r2, [sp, #16]
 8042cc8:	68a1      	ldr	r1, [r4, #8]
 8042cca:	9301      	str	r3, [sp, #4]
 8042ccc:	4620      	mov	r0, r4
 8042cce:	f000 f9bd 	bl	804304c <_vfiprintf_r>
 8042cd2:	b002      	add	sp, #8
 8042cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042cd8:	b004      	add	sp, #16
 8042cda:	4770      	bx	lr
 8042cdc:	2000000c 	.word	0x2000000c

08042ce0 <std>:
 8042ce0:	2300      	movs	r3, #0
 8042ce2:	b510      	push	{r4, lr}
 8042ce4:	4604      	mov	r4, r0
 8042ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8042cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8042cee:	6083      	str	r3, [r0, #8]
 8042cf0:	8181      	strh	r1, [r0, #12]
 8042cf2:	6643      	str	r3, [r0, #100]	; 0x64
 8042cf4:	81c2      	strh	r2, [r0, #14]
 8042cf6:	6183      	str	r3, [r0, #24]
 8042cf8:	4619      	mov	r1, r3
 8042cfa:	2208      	movs	r2, #8
 8042cfc:	305c      	adds	r0, #92	; 0x5c
 8042cfe:	f7ff ffcf 	bl	8042ca0 <memset>
 8042d02:	4b05      	ldr	r3, [pc, #20]	; (8042d18 <std+0x38>)
 8042d04:	6263      	str	r3, [r4, #36]	; 0x24
 8042d06:	4b05      	ldr	r3, [pc, #20]	; (8042d1c <std+0x3c>)
 8042d08:	62a3      	str	r3, [r4, #40]	; 0x28
 8042d0a:	4b05      	ldr	r3, [pc, #20]	; (8042d20 <std+0x40>)
 8042d0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8042d0e:	4b05      	ldr	r3, [pc, #20]	; (8042d24 <std+0x44>)
 8042d10:	6224      	str	r4, [r4, #32]
 8042d12:	6323      	str	r3, [r4, #48]	; 0x30
 8042d14:	bd10      	pop	{r4, pc}
 8042d16:	bf00      	nop
 8042d18:	080435f5 	.word	0x080435f5
 8042d1c:	08043617 	.word	0x08043617
 8042d20:	0804364f 	.word	0x0804364f
 8042d24:	08043673 	.word	0x08043673

08042d28 <_cleanup_r>:
 8042d28:	4901      	ldr	r1, [pc, #4]	; (8042d30 <_cleanup_r+0x8>)
 8042d2a:	f000 b8af 	b.w	8042e8c <_fwalk_reent>
 8042d2e:	bf00      	nop
 8042d30:	0804394d 	.word	0x0804394d

08042d34 <__sfmoreglue>:
 8042d34:	b570      	push	{r4, r5, r6, lr}
 8042d36:	2268      	movs	r2, #104	; 0x68
 8042d38:	1e4d      	subs	r5, r1, #1
 8042d3a:	4355      	muls	r5, r2
 8042d3c:	460e      	mov	r6, r1
 8042d3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8042d42:	f000 f8e5 	bl	8042f10 <_malloc_r>
 8042d46:	4604      	mov	r4, r0
 8042d48:	b140      	cbz	r0, 8042d5c <__sfmoreglue+0x28>
 8042d4a:	2100      	movs	r1, #0
 8042d4c:	e9c0 1600 	strd	r1, r6, [r0]
 8042d50:	300c      	adds	r0, #12
 8042d52:	60a0      	str	r0, [r4, #8]
 8042d54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8042d58:	f7ff ffa2 	bl	8042ca0 <memset>
 8042d5c:	4620      	mov	r0, r4
 8042d5e:	bd70      	pop	{r4, r5, r6, pc}

08042d60 <__sfp_lock_acquire>:
 8042d60:	4801      	ldr	r0, [pc, #4]	; (8042d68 <__sfp_lock_acquire+0x8>)
 8042d62:	f000 b8b3 	b.w	8042ecc <__retarget_lock_acquire_recursive>
 8042d66:	bf00      	nop
 8042d68:	20000119 	.word	0x20000119

08042d6c <__sfp_lock_release>:
 8042d6c:	4801      	ldr	r0, [pc, #4]	; (8042d74 <__sfp_lock_release+0x8>)
 8042d6e:	f000 b8ae 	b.w	8042ece <__retarget_lock_release_recursive>
 8042d72:	bf00      	nop
 8042d74:	20000119 	.word	0x20000119

08042d78 <__sinit_lock_acquire>:
 8042d78:	4801      	ldr	r0, [pc, #4]	; (8042d80 <__sinit_lock_acquire+0x8>)
 8042d7a:	f000 b8a7 	b.w	8042ecc <__retarget_lock_acquire_recursive>
 8042d7e:	bf00      	nop
 8042d80:	2000011a 	.word	0x2000011a

08042d84 <__sinit_lock_release>:
 8042d84:	4801      	ldr	r0, [pc, #4]	; (8042d8c <__sinit_lock_release+0x8>)
 8042d86:	f000 b8a2 	b.w	8042ece <__retarget_lock_release_recursive>
 8042d8a:	bf00      	nop
 8042d8c:	2000011a 	.word	0x2000011a

08042d90 <__sinit>:
 8042d90:	b510      	push	{r4, lr}
 8042d92:	4604      	mov	r4, r0
 8042d94:	f7ff fff0 	bl	8042d78 <__sinit_lock_acquire>
 8042d98:	69a3      	ldr	r3, [r4, #24]
 8042d9a:	b11b      	cbz	r3, 8042da4 <__sinit+0x14>
 8042d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8042da0:	f7ff bff0 	b.w	8042d84 <__sinit_lock_release>
 8042da4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8042da8:	6523      	str	r3, [r4, #80]	; 0x50
 8042daa:	4b13      	ldr	r3, [pc, #76]	; (8042df8 <__sinit+0x68>)
 8042dac:	4a13      	ldr	r2, [pc, #76]	; (8042dfc <__sinit+0x6c>)
 8042dae:	681b      	ldr	r3, [r3, #0]
 8042db0:	62a2      	str	r2, [r4, #40]	; 0x28
 8042db2:	42a3      	cmp	r3, r4
 8042db4:	bf04      	itt	eq
 8042db6:	2301      	moveq	r3, #1
 8042db8:	61a3      	streq	r3, [r4, #24]
 8042dba:	4620      	mov	r0, r4
 8042dbc:	f000 f820 	bl	8042e00 <__sfp>
 8042dc0:	6060      	str	r0, [r4, #4]
 8042dc2:	4620      	mov	r0, r4
 8042dc4:	f000 f81c 	bl	8042e00 <__sfp>
 8042dc8:	60a0      	str	r0, [r4, #8]
 8042dca:	4620      	mov	r0, r4
 8042dcc:	f000 f818 	bl	8042e00 <__sfp>
 8042dd0:	2200      	movs	r2, #0
 8042dd2:	60e0      	str	r0, [r4, #12]
 8042dd4:	2104      	movs	r1, #4
 8042dd6:	6860      	ldr	r0, [r4, #4]
 8042dd8:	f7ff ff82 	bl	8042ce0 <std>
 8042ddc:	68a0      	ldr	r0, [r4, #8]
 8042dde:	2201      	movs	r2, #1
 8042de0:	2109      	movs	r1, #9
 8042de2:	f7ff ff7d 	bl	8042ce0 <std>
 8042de6:	68e0      	ldr	r0, [r4, #12]
 8042de8:	2202      	movs	r2, #2
 8042dea:	2112      	movs	r1, #18
 8042dec:	f7ff ff78 	bl	8042ce0 <std>
 8042df0:	2301      	movs	r3, #1
 8042df2:	61a3      	str	r3, [r4, #24]
 8042df4:	e7d2      	b.n	8042d9c <__sinit+0xc>
 8042df6:	bf00      	nop
 8042df8:	08043c1c 	.word	0x08043c1c
 8042dfc:	08042d29 	.word	0x08042d29

08042e00 <__sfp>:
 8042e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042e02:	4607      	mov	r7, r0
 8042e04:	f7ff ffac 	bl	8042d60 <__sfp_lock_acquire>
 8042e08:	4b1e      	ldr	r3, [pc, #120]	; (8042e84 <__sfp+0x84>)
 8042e0a:	681e      	ldr	r6, [r3, #0]
 8042e0c:	69b3      	ldr	r3, [r6, #24]
 8042e0e:	b913      	cbnz	r3, 8042e16 <__sfp+0x16>
 8042e10:	4630      	mov	r0, r6
 8042e12:	f7ff ffbd 	bl	8042d90 <__sinit>
 8042e16:	3648      	adds	r6, #72	; 0x48
 8042e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8042e1c:	3b01      	subs	r3, #1
 8042e1e:	d503      	bpl.n	8042e28 <__sfp+0x28>
 8042e20:	6833      	ldr	r3, [r6, #0]
 8042e22:	b30b      	cbz	r3, 8042e68 <__sfp+0x68>
 8042e24:	6836      	ldr	r6, [r6, #0]
 8042e26:	e7f7      	b.n	8042e18 <__sfp+0x18>
 8042e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8042e2c:	b9d5      	cbnz	r5, 8042e64 <__sfp+0x64>
 8042e2e:	4b16      	ldr	r3, [pc, #88]	; (8042e88 <__sfp+0x88>)
 8042e30:	60e3      	str	r3, [r4, #12]
 8042e32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8042e36:	6665      	str	r5, [r4, #100]	; 0x64
 8042e38:	f000 f847 	bl	8042eca <__retarget_lock_init_recursive>
 8042e3c:	f7ff ff96 	bl	8042d6c <__sfp_lock_release>
 8042e40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8042e44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8042e48:	6025      	str	r5, [r4, #0]
 8042e4a:	61a5      	str	r5, [r4, #24]
 8042e4c:	2208      	movs	r2, #8
 8042e4e:	4629      	mov	r1, r5
 8042e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8042e54:	f7ff ff24 	bl	8042ca0 <memset>
 8042e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8042e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8042e60:	4620      	mov	r0, r4
 8042e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8042e64:	3468      	adds	r4, #104	; 0x68
 8042e66:	e7d9      	b.n	8042e1c <__sfp+0x1c>
 8042e68:	2104      	movs	r1, #4
 8042e6a:	4638      	mov	r0, r7
 8042e6c:	f7ff ff62 	bl	8042d34 <__sfmoreglue>
 8042e70:	4604      	mov	r4, r0
 8042e72:	6030      	str	r0, [r6, #0]
 8042e74:	2800      	cmp	r0, #0
 8042e76:	d1d5      	bne.n	8042e24 <__sfp+0x24>
 8042e78:	f7ff ff78 	bl	8042d6c <__sfp_lock_release>
 8042e7c:	230c      	movs	r3, #12
 8042e7e:	603b      	str	r3, [r7, #0]
 8042e80:	e7ee      	b.n	8042e60 <__sfp+0x60>
 8042e82:	bf00      	nop
 8042e84:	08043c1c 	.word	0x08043c1c
 8042e88:	ffff0001 	.word	0xffff0001

08042e8c <_fwalk_reent>:
 8042e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8042e90:	4606      	mov	r6, r0
 8042e92:	4688      	mov	r8, r1
 8042e94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8042e98:	2700      	movs	r7, #0
 8042e9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8042e9e:	f1b9 0901 	subs.w	r9, r9, #1
 8042ea2:	d505      	bpl.n	8042eb0 <_fwalk_reent+0x24>
 8042ea4:	6824      	ldr	r4, [r4, #0]
 8042ea6:	2c00      	cmp	r4, #0
 8042ea8:	d1f7      	bne.n	8042e9a <_fwalk_reent+0xe>
 8042eaa:	4638      	mov	r0, r7
 8042eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8042eb0:	89ab      	ldrh	r3, [r5, #12]
 8042eb2:	2b01      	cmp	r3, #1
 8042eb4:	d907      	bls.n	8042ec6 <_fwalk_reent+0x3a>
 8042eb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8042eba:	3301      	adds	r3, #1
 8042ebc:	d003      	beq.n	8042ec6 <_fwalk_reent+0x3a>
 8042ebe:	4629      	mov	r1, r5
 8042ec0:	4630      	mov	r0, r6
 8042ec2:	47c0      	blx	r8
 8042ec4:	4307      	orrs	r7, r0
 8042ec6:	3568      	adds	r5, #104	; 0x68
 8042ec8:	e7e9      	b.n	8042e9e <_fwalk_reent+0x12>

08042eca <__retarget_lock_init_recursive>:
 8042eca:	4770      	bx	lr

08042ecc <__retarget_lock_acquire_recursive>:
 8042ecc:	4770      	bx	lr

08042ece <__retarget_lock_release_recursive>:
 8042ece:	4770      	bx	lr

08042ed0 <sbrk_aligned>:
 8042ed0:	b570      	push	{r4, r5, r6, lr}
 8042ed2:	4e0e      	ldr	r6, [pc, #56]	; (8042f0c <sbrk_aligned+0x3c>)
 8042ed4:	460c      	mov	r4, r1
 8042ed6:	6831      	ldr	r1, [r6, #0]
 8042ed8:	4605      	mov	r5, r0
 8042eda:	b911      	cbnz	r1, 8042ee2 <sbrk_aligned+0x12>
 8042edc:	f000 fb7a 	bl	80435d4 <_sbrk_r>
 8042ee0:	6030      	str	r0, [r6, #0]
 8042ee2:	4621      	mov	r1, r4
 8042ee4:	4628      	mov	r0, r5
 8042ee6:	f000 fb75 	bl	80435d4 <_sbrk_r>
 8042eea:	1c43      	adds	r3, r0, #1
 8042eec:	d00a      	beq.n	8042f04 <sbrk_aligned+0x34>
 8042eee:	1cc4      	adds	r4, r0, #3
 8042ef0:	f024 0403 	bic.w	r4, r4, #3
 8042ef4:	42a0      	cmp	r0, r4
 8042ef6:	d007      	beq.n	8042f08 <sbrk_aligned+0x38>
 8042ef8:	1a21      	subs	r1, r4, r0
 8042efa:	4628      	mov	r0, r5
 8042efc:	f000 fb6a 	bl	80435d4 <_sbrk_r>
 8042f00:	3001      	adds	r0, #1
 8042f02:	d101      	bne.n	8042f08 <sbrk_aligned+0x38>
 8042f04:	f04f 34ff 	mov.w	r4, #4294967295
 8042f08:	4620      	mov	r0, r4
 8042f0a:	bd70      	pop	{r4, r5, r6, pc}
 8042f0c:	20000120 	.word	0x20000120

08042f10 <_malloc_r>:
 8042f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042f14:	1ccd      	adds	r5, r1, #3
 8042f16:	f025 0503 	bic.w	r5, r5, #3
 8042f1a:	3508      	adds	r5, #8
 8042f1c:	2d0c      	cmp	r5, #12
 8042f1e:	bf38      	it	cc
 8042f20:	250c      	movcc	r5, #12
 8042f22:	2d00      	cmp	r5, #0
 8042f24:	4607      	mov	r7, r0
 8042f26:	db01      	blt.n	8042f2c <_malloc_r+0x1c>
 8042f28:	42a9      	cmp	r1, r5
 8042f2a:	d905      	bls.n	8042f38 <_malloc_r+0x28>
 8042f2c:	230c      	movs	r3, #12
 8042f2e:	603b      	str	r3, [r7, #0]
 8042f30:	2600      	movs	r6, #0
 8042f32:	4630      	mov	r0, r6
 8042f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042f38:	4e2e      	ldr	r6, [pc, #184]	; (8042ff4 <_malloc_r+0xe4>)
 8042f3a:	f000 fdbb 	bl	8043ab4 <__malloc_lock>
 8042f3e:	6833      	ldr	r3, [r6, #0]
 8042f40:	461c      	mov	r4, r3
 8042f42:	bb34      	cbnz	r4, 8042f92 <_malloc_r+0x82>
 8042f44:	4629      	mov	r1, r5
 8042f46:	4638      	mov	r0, r7
 8042f48:	f7ff ffc2 	bl	8042ed0 <sbrk_aligned>
 8042f4c:	1c43      	adds	r3, r0, #1
 8042f4e:	4604      	mov	r4, r0
 8042f50:	d14d      	bne.n	8042fee <_malloc_r+0xde>
 8042f52:	6834      	ldr	r4, [r6, #0]
 8042f54:	4626      	mov	r6, r4
 8042f56:	2e00      	cmp	r6, #0
 8042f58:	d140      	bne.n	8042fdc <_malloc_r+0xcc>
 8042f5a:	6823      	ldr	r3, [r4, #0]
 8042f5c:	4631      	mov	r1, r6
 8042f5e:	4638      	mov	r0, r7
 8042f60:	eb04 0803 	add.w	r8, r4, r3
 8042f64:	f000 fb36 	bl	80435d4 <_sbrk_r>
 8042f68:	4580      	cmp	r8, r0
 8042f6a:	d13a      	bne.n	8042fe2 <_malloc_r+0xd2>
 8042f6c:	6821      	ldr	r1, [r4, #0]
 8042f6e:	3503      	adds	r5, #3
 8042f70:	1a6d      	subs	r5, r5, r1
 8042f72:	f025 0503 	bic.w	r5, r5, #3
 8042f76:	3508      	adds	r5, #8
 8042f78:	2d0c      	cmp	r5, #12
 8042f7a:	bf38      	it	cc
 8042f7c:	250c      	movcc	r5, #12
 8042f7e:	4629      	mov	r1, r5
 8042f80:	4638      	mov	r0, r7
 8042f82:	f7ff ffa5 	bl	8042ed0 <sbrk_aligned>
 8042f86:	3001      	adds	r0, #1
 8042f88:	d02b      	beq.n	8042fe2 <_malloc_r+0xd2>
 8042f8a:	6823      	ldr	r3, [r4, #0]
 8042f8c:	442b      	add	r3, r5
 8042f8e:	6023      	str	r3, [r4, #0]
 8042f90:	e00e      	b.n	8042fb0 <_malloc_r+0xa0>
 8042f92:	6822      	ldr	r2, [r4, #0]
 8042f94:	1b52      	subs	r2, r2, r5
 8042f96:	d41e      	bmi.n	8042fd6 <_malloc_r+0xc6>
 8042f98:	2a0b      	cmp	r2, #11
 8042f9a:	d916      	bls.n	8042fca <_malloc_r+0xba>
 8042f9c:	1961      	adds	r1, r4, r5
 8042f9e:	42a3      	cmp	r3, r4
 8042fa0:	6025      	str	r5, [r4, #0]
 8042fa2:	bf18      	it	ne
 8042fa4:	6059      	strne	r1, [r3, #4]
 8042fa6:	6863      	ldr	r3, [r4, #4]
 8042fa8:	bf08      	it	eq
 8042faa:	6031      	streq	r1, [r6, #0]
 8042fac:	5162      	str	r2, [r4, r5]
 8042fae:	604b      	str	r3, [r1, #4]
 8042fb0:	4638      	mov	r0, r7
 8042fb2:	f104 060b 	add.w	r6, r4, #11
 8042fb6:	f000 fd83 	bl	8043ac0 <__malloc_unlock>
 8042fba:	f026 0607 	bic.w	r6, r6, #7
 8042fbe:	1d23      	adds	r3, r4, #4
 8042fc0:	1af2      	subs	r2, r6, r3
 8042fc2:	d0b6      	beq.n	8042f32 <_malloc_r+0x22>
 8042fc4:	1b9b      	subs	r3, r3, r6
 8042fc6:	50a3      	str	r3, [r4, r2]
 8042fc8:	e7b3      	b.n	8042f32 <_malloc_r+0x22>
 8042fca:	6862      	ldr	r2, [r4, #4]
 8042fcc:	42a3      	cmp	r3, r4
 8042fce:	bf0c      	ite	eq
 8042fd0:	6032      	streq	r2, [r6, #0]
 8042fd2:	605a      	strne	r2, [r3, #4]
 8042fd4:	e7ec      	b.n	8042fb0 <_malloc_r+0xa0>
 8042fd6:	4623      	mov	r3, r4
 8042fd8:	6864      	ldr	r4, [r4, #4]
 8042fda:	e7b2      	b.n	8042f42 <_malloc_r+0x32>
 8042fdc:	4634      	mov	r4, r6
 8042fde:	6876      	ldr	r6, [r6, #4]
 8042fe0:	e7b9      	b.n	8042f56 <_malloc_r+0x46>
 8042fe2:	230c      	movs	r3, #12
 8042fe4:	603b      	str	r3, [r7, #0]
 8042fe6:	4638      	mov	r0, r7
 8042fe8:	f000 fd6a 	bl	8043ac0 <__malloc_unlock>
 8042fec:	e7a1      	b.n	8042f32 <_malloc_r+0x22>
 8042fee:	6025      	str	r5, [r4, #0]
 8042ff0:	e7de      	b.n	8042fb0 <_malloc_r+0xa0>
 8042ff2:	bf00      	nop
 8042ff4:	2000011c 	.word	0x2000011c

08042ff8 <__sfputc_r>:
 8042ff8:	6893      	ldr	r3, [r2, #8]
 8042ffa:	3b01      	subs	r3, #1
 8042ffc:	2b00      	cmp	r3, #0
 8042ffe:	b410      	push	{r4}
 8043000:	6093      	str	r3, [r2, #8]
 8043002:	da08      	bge.n	8043016 <__sfputc_r+0x1e>
 8043004:	6994      	ldr	r4, [r2, #24]
 8043006:	42a3      	cmp	r3, r4
 8043008:	db01      	blt.n	804300e <__sfputc_r+0x16>
 804300a:	290a      	cmp	r1, #10
 804300c:	d103      	bne.n	8043016 <__sfputc_r+0x1e>
 804300e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8043012:	f000 bb33 	b.w	804367c <__swbuf_r>
 8043016:	6813      	ldr	r3, [r2, #0]
 8043018:	1c58      	adds	r0, r3, #1
 804301a:	6010      	str	r0, [r2, #0]
 804301c:	7019      	strb	r1, [r3, #0]
 804301e:	4608      	mov	r0, r1
 8043020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8043024:	4770      	bx	lr

08043026 <__sfputs_r>:
 8043026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043028:	4606      	mov	r6, r0
 804302a:	460f      	mov	r7, r1
 804302c:	4614      	mov	r4, r2
 804302e:	18d5      	adds	r5, r2, r3
 8043030:	42ac      	cmp	r4, r5
 8043032:	d101      	bne.n	8043038 <__sfputs_r+0x12>
 8043034:	2000      	movs	r0, #0
 8043036:	e007      	b.n	8043048 <__sfputs_r+0x22>
 8043038:	f814 1b01 	ldrb.w	r1, [r4], #1
 804303c:	463a      	mov	r2, r7
 804303e:	4630      	mov	r0, r6
 8043040:	f7ff ffda 	bl	8042ff8 <__sfputc_r>
 8043044:	1c43      	adds	r3, r0, #1
 8043046:	d1f3      	bne.n	8043030 <__sfputs_r+0xa>
 8043048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804304c <_vfiprintf_r>:
 804304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043050:	460d      	mov	r5, r1
 8043052:	b09d      	sub	sp, #116	; 0x74
 8043054:	4614      	mov	r4, r2
 8043056:	4698      	mov	r8, r3
 8043058:	4606      	mov	r6, r0
 804305a:	b118      	cbz	r0, 8043064 <_vfiprintf_r+0x18>
 804305c:	6983      	ldr	r3, [r0, #24]
 804305e:	b90b      	cbnz	r3, 8043064 <_vfiprintf_r+0x18>
 8043060:	f7ff fe96 	bl	8042d90 <__sinit>
 8043064:	4b89      	ldr	r3, [pc, #548]	; (804328c <_vfiprintf_r+0x240>)
 8043066:	429d      	cmp	r5, r3
 8043068:	d11b      	bne.n	80430a2 <_vfiprintf_r+0x56>
 804306a:	6875      	ldr	r5, [r6, #4]
 804306c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804306e:	07d9      	lsls	r1, r3, #31
 8043070:	d405      	bmi.n	804307e <_vfiprintf_r+0x32>
 8043072:	89ab      	ldrh	r3, [r5, #12]
 8043074:	059a      	lsls	r2, r3, #22
 8043076:	d402      	bmi.n	804307e <_vfiprintf_r+0x32>
 8043078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804307a:	f7ff ff27 	bl	8042ecc <__retarget_lock_acquire_recursive>
 804307e:	89ab      	ldrh	r3, [r5, #12]
 8043080:	071b      	lsls	r3, r3, #28
 8043082:	d501      	bpl.n	8043088 <_vfiprintf_r+0x3c>
 8043084:	692b      	ldr	r3, [r5, #16]
 8043086:	b9eb      	cbnz	r3, 80430c4 <_vfiprintf_r+0x78>
 8043088:	4629      	mov	r1, r5
 804308a:	4630      	mov	r0, r6
 804308c:	f000 fb5a 	bl	8043744 <__swsetup_r>
 8043090:	b1c0      	cbz	r0, 80430c4 <_vfiprintf_r+0x78>
 8043092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8043094:	07dc      	lsls	r4, r3, #31
 8043096:	d50e      	bpl.n	80430b6 <_vfiprintf_r+0x6a>
 8043098:	f04f 30ff 	mov.w	r0, #4294967295
 804309c:	b01d      	add	sp, #116	; 0x74
 804309e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80430a2:	4b7b      	ldr	r3, [pc, #492]	; (8043290 <_vfiprintf_r+0x244>)
 80430a4:	429d      	cmp	r5, r3
 80430a6:	d101      	bne.n	80430ac <_vfiprintf_r+0x60>
 80430a8:	68b5      	ldr	r5, [r6, #8]
 80430aa:	e7df      	b.n	804306c <_vfiprintf_r+0x20>
 80430ac:	4b79      	ldr	r3, [pc, #484]	; (8043294 <_vfiprintf_r+0x248>)
 80430ae:	429d      	cmp	r5, r3
 80430b0:	bf08      	it	eq
 80430b2:	68f5      	ldreq	r5, [r6, #12]
 80430b4:	e7da      	b.n	804306c <_vfiprintf_r+0x20>
 80430b6:	89ab      	ldrh	r3, [r5, #12]
 80430b8:	0598      	lsls	r0, r3, #22
 80430ba:	d4ed      	bmi.n	8043098 <_vfiprintf_r+0x4c>
 80430bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80430be:	f7ff ff06 	bl	8042ece <__retarget_lock_release_recursive>
 80430c2:	e7e9      	b.n	8043098 <_vfiprintf_r+0x4c>
 80430c4:	2300      	movs	r3, #0
 80430c6:	9309      	str	r3, [sp, #36]	; 0x24
 80430c8:	2320      	movs	r3, #32
 80430ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80430ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80430d2:	2330      	movs	r3, #48	; 0x30
 80430d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8043298 <_vfiprintf_r+0x24c>
 80430d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80430dc:	f04f 0901 	mov.w	r9, #1
 80430e0:	4623      	mov	r3, r4
 80430e2:	469a      	mov	sl, r3
 80430e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80430e8:	b10a      	cbz	r2, 80430ee <_vfiprintf_r+0xa2>
 80430ea:	2a25      	cmp	r2, #37	; 0x25
 80430ec:	d1f9      	bne.n	80430e2 <_vfiprintf_r+0x96>
 80430ee:	ebba 0b04 	subs.w	fp, sl, r4
 80430f2:	d00b      	beq.n	804310c <_vfiprintf_r+0xc0>
 80430f4:	465b      	mov	r3, fp
 80430f6:	4622      	mov	r2, r4
 80430f8:	4629      	mov	r1, r5
 80430fa:	4630      	mov	r0, r6
 80430fc:	f7ff ff93 	bl	8043026 <__sfputs_r>
 8043100:	3001      	adds	r0, #1
 8043102:	f000 80aa 	beq.w	804325a <_vfiprintf_r+0x20e>
 8043106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8043108:	445a      	add	r2, fp
 804310a:	9209      	str	r2, [sp, #36]	; 0x24
 804310c:	f89a 3000 	ldrb.w	r3, [sl]
 8043110:	2b00      	cmp	r3, #0
 8043112:	f000 80a2 	beq.w	804325a <_vfiprintf_r+0x20e>
 8043116:	2300      	movs	r3, #0
 8043118:	f04f 32ff 	mov.w	r2, #4294967295
 804311c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8043120:	f10a 0a01 	add.w	sl, sl, #1
 8043124:	9304      	str	r3, [sp, #16]
 8043126:	9307      	str	r3, [sp, #28]
 8043128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804312c:	931a      	str	r3, [sp, #104]	; 0x68
 804312e:	4654      	mov	r4, sl
 8043130:	2205      	movs	r2, #5
 8043132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043136:	4858      	ldr	r0, [pc, #352]	; (8043298 <_vfiprintf_r+0x24c>)
 8043138:	f7fd f882 	bl	8040240 <memchr>
 804313c:	9a04      	ldr	r2, [sp, #16]
 804313e:	b9d8      	cbnz	r0, 8043178 <_vfiprintf_r+0x12c>
 8043140:	06d1      	lsls	r1, r2, #27
 8043142:	bf44      	itt	mi
 8043144:	2320      	movmi	r3, #32
 8043146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804314a:	0713      	lsls	r3, r2, #28
 804314c:	bf44      	itt	mi
 804314e:	232b      	movmi	r3, #43	; 0x2b
 8043150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8043154:	f89a 3000 	ldrb.w	r3, [sl]
 8043158:	2b2a      	cmp	r3, #42	; 0x2a
 804315a:	d015      	beq.n	8043188 <_vfiprintf_r+0x13c>
 804315c:	9a07      	ldr	r2, [sp, #28]
 804315e:	4654      	mov	r4, sl
 8043160:	2000      	movs	r0, #0
 8043162:	f04f 0c0a 	mov.w	ip, #10
 8043166:	4621      	mov	r1, r4
 8043168:	f811 3b01 	ldrb.w	r3, [r1], #1
 804316c:	3b30      	subs	r3, #48	; 0x30
 804316e:	2b09      	cmp	r3, #9
 8043170:	d94e      	bls.n	8043210 <_vfiprintf_r+0x1c4>
 8043172:	b1b0      	cbz	r0, 80431a2 <_vfiprintf_r+0x156>
 8043174:	9207      	str	r2, [sp, #28]
 8043176:	e014      	b.n	80431a2 <_vfiprintf_r+0x156>
 8043178:	eba0 0308 	sub.w	r3, r0, r8
 804317c:	fa09 f303 	lsl.w	r3, r9, r3
 8043180:	4313      	orrs	r3, r2
 8043182:	9304      	str	r3, [sp, #16]
 8043184:	46a2      	mov	sl, r4
 8043186:	e7d2      	b.n	804312e <_vfiprintf_r+0xe2>
 8043188:	9b03      	ldr	r3, [sp, #12]
 804318a:	1d19      	adds	r1, r3, #4
 804318c:	681b      	ldr	r3, [r3, #0]
 804318e:	9103      	str	r1, [sp, #12]
 8043190:	2b00      	cmp	r3, #0
 8043192:	bfbb      	ittet	lt
 8043194:	425b      	neglt	r3, r3
 8043196:	f042 0202 	orrlt.w	r2, r2, #2
 804319a:	9307      	strge	r3, [sp, #28]
 804319c:	9307      	strlt	r3, [sp, #28]
 804319e:	bfb8      	it	lt
 80431a0:	9204      	strlt	r2, [sp, #16]
 80431a2:	7823      	ldrb	r3, [r4, #0]
 80431a4:	2b2e      	cmp	r3, #46	; 0x2e
 80431a6:	d10c      	bne.n	80431c2 <_vfiprintf_r+0x176>
 80431a8:	7863      	ldrb	r3, [r4, #1]
 80431aa:	2b2a      	cmp	r3, #42	; 0x2a
 80431ac:	d135      	bne.n	804321a <_vfiprintf_r+0x1ce>
 80431ae:	9b03      	ldr	r3, [sp, #12]
 80431b0:	1d1a      	adds	r2, r3, #4
 80431b2:	681b      	ldr	r3, [r3, #0]
 80431b4:	9203      	str	r2, [sp, #12]
 80431b6:	2b00      	cmp	r3, #0
 80431b8:	bfb8      	it	lt
 80431ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80431be:	3402      	adds	r4, #2
 80431c0:	9305      	str	r3, [sp, #20]
 80431c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80432a8 <_vfiprintf_r+0x25c>
 80431c6:	7821      	ldrb	r1, [r4, #0]
 80431c8:	2203      	movs	r2, #3
 80431ca:	4650      	mov	r0, sl
 80431cc:	f7fd f838 	bl	8040240 <memchr>
 80431d0:	b140      	cbz	r0, 80431e4 <_vfiprintf_r+0x198>
 80431d2:	2340      	movs	r3, #64	; 0x40
 80431d4:	eba0 000a 	sub.w	r0, r0, sl
 80431d8:	fa03 f000 	lsl.w	r0, r3, r0
 80431dc:	9b04      	ldr	r3, [sp, #16]
 80431de:	4303      	orrs	r3, r0
 80431e0:	3401      	adds	r4, #1
 80431e2:	9304      	str	r3, [sp, #16]
 80431e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80431e8:	482c      	ldr	r0, [pc, #176]	; (804329c <_vfiprintf_r+0x250>)
 80431ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80431ee:	2206      	movs	r2, #6
 80431f0:	f7fd f826 	bl	8040240 <memchr>
 80431f4:	2800      	cmp	r0, #0
 80431f6:	d03f      	beq.n	8043278 <_vfiprintf_r+0x22c>
 80431f8:	4b29      	ldr	r3, [pc, #164]	; (80432a0 <_vfiprintf_r+0x254>)
 80431fa:	bb1b      	cbnz	r3, 8043244 <_vfiprintf_r+0x1f8>
 80431fc:	9b03      	ldr	r3, [sp, #12]
 80431fe:	3307      	adds	r3, #7
 8043200:	f023 0307 	bic.w	r3, r3, #7
 8043204:	3308      	adds	r3, #8
 8043206:	9303      	str	r3, [sp, #12]
 8043208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804320a:	443b      	add	r3, r7
 804320c:	9309      	str	r3, [sp, #36]	; 0x24
 804320e:	e767      	b.n	80430e0 <_vfiprintf_r+0x94>
 8043210:	fb0c 3202 	mla	r2, ip, r2, r3
 8043214:	460c      	mov	r4, r1
 8043216:	2001      	movs	r0, #1
 8043218:	e7a5      	b.n	8043166 <_vfiprintf_r+0x11a>
 804321a:	2300      	movs	r3, #0
 804321c:	3401      	adds	r4, #1
 804321e:	9305      	str	r3, [sp, #20]
 8043220:	4619      	mov	r1, r3
 8043222:	f04f 0c0a 	mov.w	ip, #10
 8043226:	4620      	mov	r0, r4
 8043228:	f810 2b01 	ldrb.w	r2, [r0], #1
 804322c:	3a30      	subs	r2, #48	; 0x30
 804322e:	2a09      	cmp	r2, #9
 8043230:	d903      	bls.n	804323a <_vfiprintf_r+0x1ee>
 8043232:	2b00      	cmp	r3, #0
 8043234:	d0c5      	beq.n	80431c2 <_vfiprintf_r+0x176>
 8043236:	9105      	str	r1, [sp, #20]
 8043238:	e7c3      	b.n	80431c2 <_vfiprintf_r+0x176>
 804323a:	fb0c 2101 	mla	r1, ip, r1, r2
 804323e:	4604      	mov	r4, r0
 8043240:	2301      	movs	r3, #1
 8043242:	e7f0      	b.n	8043226 <_vfiprintf_r+0x1da>
 8043244:	ab03      	add	r3, sp, #12
 8043246:	9300      	str	r3, [sp, #0]
 8043248:	462a      	mov	r2, r5
 804324a:	4b16      	ldr	r3, [pc, #88]	; (80432a4 <_vfiprintf_r+0x258>)
 804324c:	a904      	add	r1, sp, #16
 804324e:	4630      	mov	r0, r6
 8043250:	f3af 8000 	nop.w
 8043254:	4607      	mov	r7, r0
 8043256:	1c78      	adds	r0, r7, #1
 8043258:	d1d6      	bne.n	8043208 <_vfiprintf_r+0x1bc>
 804325a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804325c:	07d9      	lsls	r1, r3, #31
 804325e:	d405      	bmi.n	804326c <_vfiprintf_r+0x220>
 8043260:	89ab      	ldrh	r3, [r5, #12]
 8043262:	059a      	lsls	r2, r3, #22
 8043264:	d402      	bmi.n	804326c <_vfiprintf_r+0x220>
 8043266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8043268:	f7ff fe31 	bl	8042ece <__retarget_lock_release_recursive>
 804326c:	89ab      	ldrh	r3, [r5, #12]
 804326e:	065b      	lsls	r3, r3, #25
 8043270:	f53f af12 	bmi.w	8043098 <_vfiprintf_r+0x4c>
 8043274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8043276:	e711      	b.n	804309c <_vfiprintf_r+0x50>
 8043278:	ab03      	add	r3, sp, #12
 804327a:	9300      	str	r3, [sp, #0]
 804327c:	462a      	mov	r2, r5
 804327e:	4b09      	ldr	r3, [pc, #36]	; (80432a4 <_vfiprintf_r+0x258>)
 8043280:	a904      	add	r1, sp, #16
 8043282:	4630      	mov	r0, r6
 8043284:	f000 f880 	bl	8043388 <_printf_i>
 8043288:	e7e4      	b.n	8043254 <_vfiprintf_r+0x208>
 804328a:	bf00      	nop
 804328c:	08043c40 	.word	0x08043c40
 8043290:	08043c60 	.word	0x08043c60
 8043294:	08043c20 	.word	0x08043c20
 8043298:	08043c80 	.word	0x08043c80
 804329c:	08043c8a 	.word	0x08043c8a
 80432a0:	00000000 	.word	0x00000000
 80432a4:	08043027 	.word	0x08043027
 80432a8:	08043c86 	.word	0x08043c86

080432ac <_printf_common>:
 80432ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80432b0:	4616      	mov	r6, r2
 80432b2:	4699      	mov	r9, r3
 80432b4:	688a      	ldr	r2, [r1, #8]
 80432b6:	690b      	ldr	r3, [r1, #16]
 80432b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80432bc:	4293      	cmp	r3, r2
 80432be:	bfb8      	it	lt
 80432c0:	4613      	movlt	r3, r2
 80432c2:	6033      	str	r3, [r6, #0]
 80432c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80432c8:	4607      	mov	r7, r0
 80432ca:	460c      	mov	r4, r1
 80432cc:	b10a      	cbz	r2, 80432d2 <_printf_common+0x26>
 80432ce:	3301      	adds	r3, #1
 80432d0:	6033      	str	r3, [r6, #0]
 80432d2:	6823      	ldr	r3, [r4, #0]
 80432d4:	0699      	lsls	r1, r3, #26
 80432d6:	bf42      	ittt	mi
 80432d8:	6833      	ldrmi	r3, [r6, #0]
 80432da:	3302      	addmi	r3, #2
 80432dc:	6033      	strmi	r3, [r6, #0]
 80432de:	6825      	ldr	r5, [r4, #0]
 80432e0:	f015 0506 	ands.w	r5, r5, #6
 80432e4:	d106      	bne.n	80432f4 <_printf_common+0x48>
 80432e6:	f104 0a19 	add.w	sl, r4, #25
 80432ea:	68e3      	ldr	r3, [r4, #12]
 80432ec:	6832      	ldr	r2, [r6, #0]
 80432ee:	1a9b      	subs	r3, r3, r2
 80432f0:	42ab      	cmp	r3, r5
 80432f2:	dc26      	bgt.n	8043342 <_printf_common+0x96>
 80432f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80432f8:	1e13      	subs	r3, r2, #0
 80432fa:	6822      	ldr	r2, [r4, #0]
 80432fc:	bf18      	it	ne
 80432fe:	2301      	movne	r3, #1
 8043300:	0692      	lsls	r2, r2, #26
 8043302:	d42b      	bmi.n	804335c <_printf_common+0xb0>
 8043304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8043308:	4649      	mov	r1, r9
 804330a:	4638      	mov	r0, r7
 804330c:	47c0      	blx	r8
 804330e:	3001      	adds	r0, #1
 8043310:	d01e      	beq.n	8043350 <_printf_common+0xa4>
 8043312:	6823      	ldr	r3, [r4, #0]
 8043314:	68e5      	ldr	r5, [r4, #12]
 8043316:	6832      	ldr	r2, [r6, #0]
 8043318:	f003 0306 	and.w	r3, r3, #6
 804331c:	2b04      	cmp	r3, #4
 804331e:	bf08      	it	eq
 8043320:	1aad      	subeq	r5, r5, r2
 8043322:	68a3      	ldr	r3, [r4, #8]
 8043324:	6922      	ldr	r2, [r4, #16]
 8043326:	bf0c      	ite	eq
 8043328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804332c:	2500      	movne	r5, #0
 804332e:	4293      	cmp	r3, r2
 8043330:	bfc4      	itt	gt
 8043332:	1a9b      	subgt	r3, r3, r2
 8043334:	18ed      	addgt	r5, r5, r3
 8043336:	2600      	movs	r6, #0
 8043338:	341a      	adds	r4, #26
 804333a:	42b5      	cmp	r5, r6
 804333c:	d11a      	bne.n	8043374 <_printf_common+0xc8>
 804333e:	2000      	movs	r0, #0
 8043340:	e008      	b.n	8043354 <_printf_common+0xa8>
 8043342:	2301      	movs	r3, #1
 8043344:	4652      	mov	r2, sl
 8043346:	4649      	mov	r1, r9
 8043348:	4638      	mov	r0, r7
 804334a:	47c0      	blx	r8
 804334c:	3001      	adds	r0, #1
 804334e:	d103      	bne.n	8043358 <_printf_common+0xac>
 8043350:	f04f 30ff 	mov.w	r0, #4294967295
 8043354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8043358:	3501      	adds	r5, #1
 804335a:	e7c6      	b.n	80432ea <_printf_common+0x3e>
 804335c:	18e1      	adds	r1, r4, r3
 804335e:	1c5a      	adds	r2, r3, #1
 8043360:	2030      	movs	r0, #48	; 0x30
 8043362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8043366:	4422      	add	r2, r4
 8043368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804336c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8043370:	3302      	adds	r3, #2
 8043372:	e7c7      	b.n	8043304 <_printf_common+0x58>
 8043374:	2301      	movs	r3, #1
 8043376:	4622      	mov	r2, r4
 8043378:	4649      	mov	r1, r9
 804337a:	4638      	mov	r0, r7
 804337c:	47c0      	blx	r8
 804337e:	3001      	adds	r0, #1
 8043380:	d0e6      	beq.n	8043350 <_printf_common+0xa4>
 8043382:	3601      	adds	r6, #1
 8043384:	e7d9      	b.n	804333a <_printf_common+0x8e>
	...

08043388 <_printf_i>:
 8043388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804338c:	7e0f      	ldrb	r7, [r1, #24]
 804338e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8043390:	2f78      	cmp	r7, #120	; 0x78
 8043392:	4691      	mov	r9, r2
 8043394:	4680      	mov	r8, r0
 8043396:	460c      	mov	r4, r1
 8043398:	469a      	mov	sl, r3
 804339a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804339e:	d807      	bhi.n	80433b0 <_printf_i+0x28>
 80433a0:	2f62      	cmp	r7, #98	; 0x62
 80433a2:	d80a      	bhi.n	80433ba <_printf_i+0x32>
 80433a4:	2f00      	cmp	r7, #0
 80433a6:	f000 80d8 	beq.w	804355a <_printf_i+0x1d2>
 80433aa:	2f58      	cmp	r7, #88	; 0x58
 80433ac:	f000 80a3 	beq.w	80434f6 <_printf_i+0x16e>
 80433b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80433b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80433b8:	e03a      	b.n	8043430 <_printf_i+0xa8>
 80433ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80433be:	2b15      	cmp	r3, #21
 80433c0:	d8f6      	bhi.n	80433b0 <_printf_i+0x28>
 80433c2:	a101      	add	r1, pc, #4	; (adr r1, 80433c8 <_printf_i+0x40>)
 80433c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80433c8:	08043421 	.word	0x08043421
 80433cc:	08043435 	.word	0x08043435
 80433d0:	080433b1 	.word	0x080433b1
 80433d4:	080433b1 	.word	0x080433b1
 80433d8:	080433b1 	.word	0x080433b1
 80433dc:	080433b1 	.word	0x080433b1
 80433e0:	08043435 	.word	0x08043435
 80433e4:	080433b1 	.word	0x080433b1
 80433e8:	080433b1 	.word	0x080433b1
 80433ec:	080433b1 	.word	0x080433b1
 80433f0:	080433b1 	.word	0x080433b1
 80433f4:	08043541 	.word	0x08043541
 80433f8:	08043465 	.word	0x08043465
 80433fc:	08043523 	.word	0x08043523
 8043400:	080433b1 	.word	0x080433b1
 8043404:	080433b1 	.word	0x080433b1
 8043408:	08043563 	.word	0x08043563
 804340c:	080433b1 	.word	0x080433b1
 8043410:	08043465 	.word	0x08043465
 8043414:	080433b1 	.word	0x080433b1
 8043418:	080433b1 	.word	0x080433b1
 804341c:	0804352b 	.word	0x0804352b
 8043420:	682b      	ldr	r3, [r5, #0]
 8043422:	1d1a      	adds	r2, r3, #4
 8043424:	681b      	ldr	r3, [r3, #0]
 8043426:	602a      	str	r2, [r5, #0]
 8043428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804342c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8043430:	2301      	movs	r3, #1
 8043432:	e0a3      	b.n	804357c <_printf_i+0x1f4>
 8043434:	6820      	ldr	r0, [r4, #0]
 8043436:	6829      	ldr	r1, [r5, #0]
 8043438:	0606      	lsls	r6, r0, #24
 804343a:	f101 0304 	add.w	r3, r1, #4
 804343e:	d50a      	bpl.n	8043456 <_printf_i+0xce>
 8043440:	680e      	ldr	r6, [r1, #0]
 8043442:	602b      	str	r3, [r5, #0]
 8043444:	2e00      	cmp	r6, #0
 8043446:	da03      	bge.n	8043450 <_printf_i+0xc8>
 8043448:	232d      	movs	r3, #45	; 0x2d
 804344a:	4276      	negs	r6, r6
 804344c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8043450:	485e      	ldr	r0, [pc, #376]	; (80435cc <_printf_i+0x244>)
 8043452:	230a      	movs	r3, #10
 8043454:	e019      	b.n	804348a <_printf_i+0x102>
 8043456:	680e      	ldr	r6, [r1, #0]
 8043458:	602b      	str	r3, [r5, #0]
 804345a:	f010 0f40 	tst.w	r0, #64	; 0x40
 804345e:	bf18      	it	ne
 8043460:	b236      	sxthne	r6, r6
 8043462:	e7ef      	b.n	8043444 <_printf_i+0xbc>
 8043464:	682b      	ldr	r3, [r5, #0]
 8043466:	6820      	ldr	r0, [r4, #0]
 8043468:	1d19      	adds	r1, r3, #4
 804346a:	6029      	str	r1, [r5, #0]
 804346c:	0601      	lsls	r1, r0, #24
 804346e:	d501      	bpl.n	8043474 <_printf_i+0xec>
 8043470:	681e      	ldr	r6, [r3, #0]
 8043472:	e002      	b.n	804347a <_printf_i+0xf2>
 8043474:	0646      	lsls	r6, r0, #25
 8043476:	d5fb      	bpl.n	8043470 <_printf_i+0xe8>
 8043478:	881e      	ldrh	r6, [r3, #0]
 804347a:	4854      	ldr	r0, [pc, #336]	; (80435cc <_printf_i+0x244>)
 804347c:	2f6f      	cmp	r7, #111	; 0x6f
 804347e:	bf0c      	ite	eq
 8043480:	2308      	moveq	r3, #8
 8043482:	230a      	movne	r3, #10
 8043484:	2100      	movs	r1, #0
 8043486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804348a:	6865      	ldr	r5, [r4, #4]
 804348c:	60a5      	str	r5, [r4, #8]
 804348e:	2d00      	cmp	r5, #0
 8043490:	bfa2      	ittt	ge
 8043492:	6821      	ldrge	r1, [r4, #0]
 8043494:	f021 0104 	bicge.w	r1, r1, #4
 8043498:	6021      	strge	r1, [r4, #0]
 804349a:	b90e      	cbnz	r6, 80434a0 <_printf_i+0x118>
 804349c:	2d00      	cmp	r5, #0
 804349e:	d04d      	beq.n	804353c <_printf_i+0x1b4>
 80434a0:	4615      	mov	r5, r2
 80434a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80434a6:	fb03 6711 	mls	r7, r3, r1, r6
 80434aa:	5dc7      	ldrb	r7, [r0, r7]
 80434ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80434b0:	4637      	mov	r7, r6
 80434b2:	42bb      	cmp	r3, r7
 80434b4:	460e      	mov	r6, r1
 80434b6:	d9f4      	bls.n	80434a2 <_printf_i+0x11a>
 80434b8:	2b08      	cmp	r3, #8
 80434ba:	d10b      	bne.n	80434d4 <_printf_i+0x14c>
 80434bc:	6823      	ldr	r3, [r4, #0]
 80434be:	07de      	lsls	r6, r3, #31
 80434c0:	d508      	bpl.n	80434d4 <_printf_i+0x14c>
 80434c2:	6923      	ldr	r3, [r4, #16]
 80434c4:	6861      	ldr	r1, [r4, #4]
 80434c6:	4299      	cmp	r1, r3
 80434c8:	bfde      	ittt	le
 80434ca:	2330      	movle	r3, #48	; 0x30
 80434cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80434d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80434d4:	1b52      	subs	r2, r2, r5
 80434d6:	6122      	str	r2, [r4, #16]
 80434d8:	f8cd a000 	str.w	sl, [sp]
 80434dc:	464b      	mov	r3, r9
 80434de:	aa03      	add	r2, sp, #12
 80434e0:	4621      	mov	r1, r4
 80434e2:	4640      	mov	r0, r8
 80434e4:	f7ff fee2 	bl	80432ac <_printf_common>
 80434e8:	3001      	adds	r0, #1
 80434ea:	d14c      	bne.n	8043586 <_printf_i+0x1fe>
 80434ec:	f04f 30ff 	mov.w	r0, #4294967295
 80434f0:	b004      	add	sp, #16
 80434f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80434f6:	4835      	ldr	r0, [pc, #212]	; (80435cc <_printf_i+0x244>)
 80434f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80434fc:	6829      	ldr	r1, [r5, #0]
 80434fe:	6823      	ldr	r3, [r4, #0]
 8043500:	f851 6b04 	ldr.w	r6, [r1], #4
 8043504:	6029      	str	r1, [r5, #0]
 8043506:	061d      	lsls	r5, r3, #24
 8043508:	d514      	bpl.n	8043534 <_printf_i+0x1ac>
 804350a:	07df      	lsls	r7, r3, #31
 804350c:	bf44      	itt	mi
 804350e:	f043 0320 	orrmi.w	r3, r3, #32
 8043512:	6023      	strmi	r3, [r4, #0]
 8043514:	b91e      	cbnz	r6, 804351e <_printf_i+0x196>
 8043516:	6823      	ldr	r3, [r4, #0]
 8043518:	f023 0320 	bic.w	r3, r3, #32
 804351c:	6023      	str	r3, [r4, #0]
 804351e:	2310      	movs	r3, #16
 8043520:	e7b0      	b.n	8043484 <_printf_i+0xfc>
 8043522:	6823      	ldr	r3, [r4, #0]
 8043524:	f043 0320 	orr.w	r3, r3, #32
 8043528:	6023      	str	r3, [r4, #0]
 804352a:	2378      	movs	r3, #120	; 0x78
 804352c:	4828      	ldr	r0, [pc, #160]	; (80435d0 <_printf_i+0x248>)
 804352e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8043532:	e7e3      	b.n	80434fc <_printf_i+0x174>
 8043534:	0659      	lsls	r1, r3, #25
 8043536:	bf48      	it	mi
 8043538:	b2b6      	uxthmi	r6, r6
 804353a:	e7e6      	b.n	804350a <_printf_i+0x182>
 804353c:	4615      	mov	r5, r2
 804353e:	e7bb      	b.n	80434b8 <_printf_i+0x130>
 8043540:	682b      	ldr	r3, [r5, #0]
 8043542:	6826      	ldr	r6, [r4, #0]
 8043544:	6961      	ldr	r1, [r4, #20]
 8043546:	1d18      	adds	r0, r3, #4
 8043548:	6028      	str	r0, [r5, #0]
 804354a:	0635      	lsls	r5, r6, #24
 804354c:	681b      	ldr	r3, [r3, #0]
 804354e:	d501      	bpl.n	8043554 <_printf_i+0x1cc>
 8043550:	6019      	str	r1, [r3, #0]
 8043552:	e002      	b.n	804355a <_printf_i+0x1d2>
 8043554:	0670      	lsls	r0, r6, #25
 8043556:	d5fb      	bpl.n	8043550 <_printf_i+0x1c8>
 8043558:	8019      	strh	r1, [r3, #0]
 804355a:	2300      	movs	r3, #0
 804355c:	6123      	str	r3, [r4, #16]
 804355e:	4615      	mov	r5, r2
 8043560:	e7ba      	b.n	80434d8 <_printf_i+0x150>
 8043562:	682b      	ldr	r3, [r5, #0]
 8043564:	1d1a      	adds	r2, r3, #4
 8043566:	602a      	str	r2, [r5, #0]
 8043568:	681d      	ldr	r5, [r3, #0]
 804356a:	6862      	ldr	r2, [r4, #4]
 804356c:	2100      	movs	r1, #0
 804356e:	4628      	mov	r0, r5
 8043570:	f7fc fe66 	bl	8040240 <memchr>
 8043574:	b108      	cbz	r0, 804357a <_printf_i+0x1f2>
 8043576:	1b40      	subs	r0, r0, r5
 8043578:	6060      	str	r0, [r4, #4]
 804357a:	6863      	ldr	r3, [r4, #4]
 804357c:	6123      	str	r3, [r4, #16]
 804357e:	2300      	movs	r3, #0
 8043580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8043584:	e7a8      	b.n	80434d8 <_printf_i+0x150>
 8043586:	6923      	ldr	r3, [r4, #16]
 8043588:	462a      	mov	r2, r5
 804358a:	4649      	mov	r1, r9
 804358c:	4640      	mov	r0, r8
 804358e:	47d0      	blx	sl
 8043590:	3001      	adds	r0, #1
 8043592:	d0ab      	beq.n	80434ec <_printf_i+0x164>
 8043594:	6823      	ldr	r3, [r4, #0]
 8043596:	079b      	lsls	r3, r3, #30
 8043598:	d413      	bmi.n	80435c2 <_printf_i+0x23a>
 804359a:	68e0      	ldr	r0, [r4, #12]
 804359c:	9b03      	ldr	r3, [sp, #12]
 804359e:	4298      	cmp	r0, r3
 80435a0:	bfb8      	it	lt
 80435a2:	4618      	movlt	r0, r3
 80435a4:	e7a4      	b.n	80434f0 <_printf_i+0x168>
 80435a6:	2301      	movs	r3, #1
 80435a8:	4632      	mov	r2, r6
 80435aa:	4649      	mov	r1, r9
 80435ac:	4640      	mov	r0, r8
 80435ae:	47d0      	blx	sl
 80435b0:	3001      	adds	r0, #1
 80435b2:	d09b      	beq.n	80434ec <_printf_i+0x164>
 80435b4:	3501      	adds	r5, #1
 80435b6:	68e3      	ldr	r3, [r4, #12]
 80435b8:	9903      	ldr	r1, [sp, #12]
 80435ba:	1a5b      	subs	r3, r3, r1
 80435bc:	42ab      	cmp	r3, r5
 80435be:	dcf2      	bgt.n	80435a6 <_printf_i+0x21e>
 80435c0:	e7eb      	b.n	804359a <_printf_i+0x212>
 80435c2:	2500      	movs	r5, #0
 80435c4:	f104 0619 	add.w	r6, r4, #25
 80435c8:	e7f5      	b.n	80435b6 <_printf_i+0x22e>
 80435ca:	bf00      	nop
 80435cc:	08043c91 	.word	0x08043c91
 80435d0:	08043ca2 	.word	0x08043ca2

080435d4 <_sbrk_r>:
 80435d4:	b538      	push	{r3, r4, r5, lr}
 80435d6:	4d06      	ldr	r5, [pc, #24]	; (80435f0 <_sbrk_r+0x1c>)
 80435d8:	2300      	movs	r3, #0
 80435da:	4604      	mov	r4, r0
 80435dc:	4608      	mov	r0, r1
 80435de:	602b      	str	r3, [r5, #0]
 80435e0:	f7fd fa28 	bl	8040a34 <_sbrk>
 80435e4:	1c43      	adds	r3, r0, #1
 80435e6:	d102      	bne.n	80435ee <_sbrk_r+0x1a>
 80435e8:	682b      	ldr	r3, [r5, #0]
 80435ea:	b103      	cbz	r3, 80435ee <_sbrk_r+0x1a>
 80435ec:	6023      	str	r3, [r4, #0]
 80435ee:	bd38      	pop	{r3, r4, r5, pc}
 80435f0:	20000124 	.word	0x20000124

080435f4 <__sread>:
 80435f4:	b510      	push	{r4, lr}
 80435f6:	460c      	mov	r4, r1
 80435f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80435fc:	f000 fab2 	bl	8043b64 <_read_r>
 8043600:	2800      	cmp	r0, #0
 8043602:	bfab      	itete	ge
 8043604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8043606:	89a3      	ldrhlt	r3, [r4, #12]
 8043608:	181b      	addge	r3, r3, r0
 804360a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804360e:	bfac      	ite	ge
 8043610:	6563      	strge	r3, [r4, #84]	; 0x54
 8043612:	81a3      	strhlt	r3, [r4, #12]
 8043614:	bd10      	pop	{r4, pc}

08043616 <__swrite>:
 8043616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804361a:	461f      	mov	r7, r3
 804361c:	898b      	ldrh	r3, [r1, #12]
 804361e:	05db      	lsls	r3, r3, #23
 8043620:	4605      	mov	r5, r0
 8043622:	460c      	mov	r4, r1
 8043624:	4616      	mov	r6, r2
 8043626:	d505      	bpl.n	8043634 <__swrite+0x1e>
 8043628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804362c:	2302      	movs	r3, #2
 804362e:	2200      	movs	r2, #0
 8043630:	f000 f9c8 	bl	80439c4 <_lseek_r>
 8043634:	89a3      	ldrh	r3, [r4, #12]
 8043636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804363a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804363e:	81a3      	strh	r3, [r4, #12]
 8043640:	4632      	mov	r2, r6
 8043642:	463b      	mov	r3, r7
 8043644:	4628      	mov	r0, r5
 8043646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804364a:	f000 b869 	b.w	8043720 <_write_r>

0804364e <__sseek>:
 804364e:	b510      	push	{r4, lr}
 8043650:	460c      	mov	r4, r1
 8043652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8043656:	f000 f9b5 	bl	80439c4 <_lseek_r>
 804365a:	1c43      	adds	r3, r0, #1
 804365c:	89a3      	ldrh	r3, [r4, #12]
 804365e:	bf15      	itete	ne
 8043660:	6560      	strne	r0, [r4, #84]	; 0x54
 8043662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8043666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804366a:	81a3      	strheq	r3, [r4, #12]
 804366c:	bf18      	it	ne
 804366e:	81a3      	strhne	r3, [r4, #12]
 8043670:	bd10      	pop	{r4, pc}

08043672 <__sclose>:
 8043672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8043676:	f000 b8d3 	b.w	8043820 <_close_r>
	...

0804367c <__swbuf_r>:
 804367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804367e:	460e      	mov	r6, r1
 8043680:	4614      	mov	r4, r2
 8043682:	4605      	mov	r5, r0
 8043684:	b118      	cbz	r0, 804368e <__swbuf_r+0x12>
 8043686:	6983      	ldr	r3, [r0, #24]
 8043688:	b90b      	cbnz	r3, 804368e <__swbuf_r+0x12>
 804368a:	f7ff fb81 	bl	8042d90 <__sinit>
 804368e:	4b21      	ldr	r3, [pc, #132]	; (8043714 <__swbuf_r+0x98>)
 8043690:	429c      	cmp	r4, r3
 8043692:	d12b      	bne.n	80436ec <__swbuf_r+0x70>
 8043694:	686c      	ldr	r4, [r5, #4]
 8043696:	69a3      	ldr	r3, [r4, #24]
 8043698:	60a3      	str	r3, [r4, #8]
 804369a:	89a3      	ldrh	r3, [r4, #12]
 804369c:	071a      	lsls	r2, r3, #28
 804369e:	d52f      	bpl.n	8043700 <__swbuf_r+0x84>
 80436a0:	6923      	ldr	r3, [r4, #16]
 80436a2:	b36b      	cbz	r3, 8043700 <__swbuf_r+0x84>
 80436a4:	6923      	ldr	r3, [r4, #16]
 80436a6:	6820      	ldr	r0, [r4, #0]
 80436a8:	1ac0      	subs	r0, r0, r3
 80436aa:	6963      	ldr	r3, [r4, #20]
 80436ac:	b2f6      	uxtb	r6, r6
 80436ae:	4283      	cmp	r3, r0
 80436b0:	4637      	mov	r7, r6
 80436b2:	dc04      	bgt.n	80436be <__swbuf_r+0x42>
 80436b4:	4621      	mov	r1, r4
 80436b6:	4628      	mov	r0, r5
 80436b8:	f000 f948 	bl	804394c <_fflush_r>
 80436bc:	bb30      	cbnz	r0, 804370c <__swbuf_r+0x90>
 80436be:	68a3      	ldr	r3, [r4, #8]
 80436c0:	3b01      	subs	r3, #1
 80436c2:	60a3      	str	r3, [r4, #8]
 80436c4:	6823      	ldr	r3, [r4, #0]
 80436c6:	1c5a      	adds	r2, r3, #1
 80436c8:	6022      	str	r2, [r4, #0]
 80436ca:	701e      	strb	r6, [r3, #0]
 80436cc:	6963      	ldr	r3, [r4, #20]
 80436ce:	3001      	adds	r0, #1
 80436d0:	4283      	cmp	r3, r0
 80436d2:	d004      	beq.n	80436de <__swbuf_r+0x62>
 80436d4:	89a3      	ldrh	r3, [r4, #12]
 80436d6:	07db      	lsls	r3, r3, #31
 80436d8:	d506      	bpl.n	80436e8 <__swbuf_r+0x6c>
 80436da:	2e0a      	cmp	r6, #10
 80436dc:	d104      	bne.n	80436e8 <__swbuf_r+0x6c>
 80436de:	4621      	mov	r1, r4
 80436e0:	4628      	mov	r0, r5
 80436e2:	f000 f933 	bl	804394c <_fflush_r>
 80436e6:	b988      	cbnz	r0, 804370c <__swbuf_r+0x90>
 80436e8:	4638      	mov	r0, r7
 80436ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80436ec:	4b0a      	ldr	r3, [pc, #40]	; (8043718 <__swbuf_r+0x9c>)
 80436ee:	429c      	cmp	r4, r3
 80436f0:	d101      	bne.n	80436f6 <__swbuf_r+0x7a>
 80436f2:	68ac      	ldr	r4, [r5, #8]
 80436f4:	e7cf      	b.n	8043696 <__swbuf_r+0x1a>
 80436f6:	4b09      	ldr	r3, [pc, #36]	; (804371c <__swbuf_r+0xa0>)
 80436f8:	429c      	cmp	r4, r3
 80436fa:	bf08      	it	eq
 80436fc:	68ec      	ldreq	r4, [r5, #12]
 80436fe:	e7ca      	b.n	8043696 <__swbuf_r+0x1a>
 8043700:	4621      	mov	r1, r4
 8043702:	4628      	mov	r0, r5
 8043704:	f000 f81e 	bl	8043744 <__swsetup_r>
 8043708:	2800      	cmp	r0, #0
 804370a:	d0cb      	beq.n	80436a4 <__swbuf_r+0x28>
 804370c:	f04f 37ff 	mov.w	r7, #4294967295
 8043710:	e7ea      	b.n	80436e8 <__swbuf_r+0x6c>
 8043712:	bf00      	nop
 8043714:	08043c40 	.word	0x08043c40
 8043718:	08043c60 	.word	0x08043c60
 804371c:	08043c20 	.word	0x08043c20

08043720 <_write_r>:
 8043720:	b538      	push	{r3, r4, r5, lr}
 8043722:	4d07      	ldr	r5, [pc, #28]	; (8043740 <_write_r+0x20>)
 8043724:	4604      	mov	r4, r0
 8043726:	4608      	mov	r0, r1
 8043728:	4611      	mov	r1, r2
 804372a:	2200      	movs	r2, #0
 804372c:	602a      	str	r2, [r5, #0]
 804372e:	461a      	mov	r2, r3
 8043730:	f7fd f92f 	bl	8040992 <_write>
 8043734:	1c43      	adds	r3, r0, #1
 8043736:	d102      	bne.n	804373e <_write_r+0x1e>
 8043738:	682b      	ldr	r3, [r5, #0]
 804373a:	b103      	cbz	r3, 804373e <_write_r+0x1e>
 804373c:	6023      	str	r3, [r4, #0]
 804373e:	bd38      	pop	{r3, r4, r5, pc}
 8043740:	20000124 	.word	0x20000124

08043744 <__swsetup_r>:
 8043744:	4b32      	ldr	r3, [pc, #200]	; (8043810 <__swsetup_r+0xcc>)
 8043746:	b570      	push	{r4, r5, r6, lr}
 8043748:	681d      	ldr	r5, [r3, #0]
 804374a:	4606      	mov	r6, r0
 804374c:	460c      	mov	r4, r1
 804374e:	b125      	cbz	r5, 804375a <__swsetup_r+0x16>
 8043750:	69ab      	ldr	r3, [r5, #24]
 8043752:	b913      	cbnz	r3, 804375a <__swsetup_r+0x16>
 8043754:	4628      	mov	r0, r5
 8043756:	f7ff fb1b 	bl	8042d90 <__sinit>
 804375a:	4b2e      	ldr	r3, [pc, #184]	; (8043814 <__swsetup_r+0xd0>)
 804375c:	429c      	cmp	r4, r3
 804375e:	d10f      	bne.n	8043780 <__swsetup_r+0x3c>
 8043760:	686c      	ldr	r4, [r5, #4]
 8043762:	89a3      	ldrh	r3, [r4, #12]
 8043764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8043768:	0719      	lsls	r1, r3, #28
 804376a:	d42c      	bmi.n	80437c6 <__swsetup_r+0x82>
 804376c:	06dd      	lsls	r5, r3, #27
 804376e:	d411      	bmi.n	8043794 <__swsetup_r+0x50>
 8043770:	2309      	movs	r3, #9
 8043772:	6033      	str	r3, [r6, #0]
 8043774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8043778:	81a3      	strh	r3, [r4, #12]
 804377a:	f04f 30ff 	mov.w	r0, #4294967295
 804377e:	e03e      	b.n	80437fe <__swsetup_r+0xba>
 8043780:	4b25      	ldr	r3, [pc, #148]	; (8043818 <__swsetup_r+0xd4>)
 8043782:	429c      	cmp	r4, r3
 8043784:	d101      	bne.n	804378a <__swsetup_r+0x46>
 8043786:	68ac      	ldr	r4, [r5, #8]
 8043788:	e7eb      	b.n	8043762 <__swsetup_r+0x1e>
 804378a:	4b24      	ldr	r3, [pc, #144]	; (804381c <__swsetup_r+0xd8>)
 804378c:	429c      	cmp	r4, r3
 804378e:	bf08      	it	eq
 8043790:	68ec      	ldreq	r4, [r5, #12]
 8043792:	e7e6      	b.n	8043762 <__swsetup_r+0x1e>
 8043794:	0758      	lsls	r0, r3, #29
 8043796:	d512      	bpl.n	80437be <__swsetup_r+0x7a>
 8043798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804379a:	b141      	cbz	r1, 80437ae <__swsetup_r+0x6a>
 804379c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80437a0:	4299      	cmp	r1, r3
 80437a2:	d002      	beq.n	80437aa <__swsetup_r+0x66>
 80437a4:	4630      	mov	r0, r6
 80437a6:	f000 f991 	bl	8043acc <_free_r>
 80437aa:	2300      	movs	r3, #0
 80437ac:	6363      	str	r3, [r4, #52]	; 0x34
 80437ae:	89a3      	ldrh	r3, [r4, #12]
 80437b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80437b4:	81a3      	strh	r3, [r4, #12]
 80437b6:	2300      	movs	r3, #0
 80437b8:	6063      	str	r3, [r4, #4]
 80437ba:	6923      	ldr	r3, [r4, #16]
 80437bc:	6023      	str	r3, [r4, #0]
 80437be:	89a3      	ldrh	r3, [r4, #12]
 80437c0:	f043 0308 	orr.w	r3, r3, #8
 80437c4:	81a3      	strh	r3, [r4, #12]
 80437c6:	6923      	ldr	r3, [r4, #16]
 80437c8:	b94b      	cbnz	r3, 80437de <__swsetup_r+0x9a>
 80437ca:	89a3      	ldrh	r3, [r4, #12]
 80437cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80437d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80437d4:	d003      	beq.n	80437de <__swsetup_r+0x9a>
 80437d6:	4621      	mov	r1, r4
 80437d8:	4630      	mov	r0, r6
 80437da:	f000 f92b 	bl	8043a34 <__smakebuf_r>
 80437de:	89a0      	ldrh	r0, [r4, #12]
 80437e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80437e4:	f010 0301 	ands.w	r3, r0, #1
 80437e8:	d00a      	beq.n	8043800 <__swsetup_r+0xbc>
 80437ea:	2300      	movs	r3, #0
 80437ec:	60a3      	str	r3, [r4, #8]
 80437ee:	6963      	ldr	r3, [r4, #20]
 80437f0:	425b      	negs	r3, r3
 80437f2:	61a3      	str	r3, [r4, #24]
 80437f4:	6923      	ldr	r3, [r4, #16]
 80437f6:	b943      	cbnz	r3, 804380a <__swsetup_r+0xc6>
 80437f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80437fc:	d1ba      	bne.n	8043774 <__swsetup_r+0x30>
 80437fe:	bd70      	pop	{r4, r5, r6, pc}
 8043800:	0781      	lsls	r1, r0, #30
 8043802:	bf58      	it	pl
 8043804:	6963      	ldrpl	r3, [r4, #20]
 8043806:	60a3      	str	r3, [r4, #8]
 8043808:	e7f4      	b.n	80437f4 <__swsetup_r+0xb0>
 804380a:	2000      	movs	r0, #0
 804380c:	e7f7      	b.n	80437fe <__swsetup_r+0xba>
 804380e:	bf00      	nop
 8043810:	2000000c 	.word	0x2000000c
 8043814:	08043c40 	.word	0x08043c40
 8043818:	08043c60 	.word	0x08043c60
 804381c:	08043c20 	.word	0x08043c20

08043820 <_close_r>:
 8043820:	b538      	push	{r3, r4, r5, lr}
 8043822:	4d06      	ldr	r5, [pc, #24]	; (804383c <_close_r+0x1c>)
 8043824:	2300      	movs	r3, #0
 8043826:	4604      	mov	r4, r0
 8043828:	4608      	mov	r0, r1
 804382a:	602b      	str	r3, [r5, #0]
 804382c:	f7fd f8cd 	bl	80409ca <_close>
 8043830:	1c43      	adds	r3, r0, #1
 8043832:	d102      	bne.n	804383a <_close_r+0x1a>
 8043834:	682b      	ldr	r3, [r5, #0]
 8043836:	b103      	cbz	r3, 804383a <_close_r+0x1a>
 8043838:	6023      	str	r3, [r4, #0]
 804383a:	bd38      	pop	{r3, r4, r5, pc}
 804383c:	20000124 	.word	0x20000124

08043840 <__sflush_r>:
 8043840:	898a      	ldrh	r2, [r1, #12]
 8043842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8043846:	4605      	mov	r5, r0
 8043848:	0710      	lsls	r0, r2, #28
 804384a:	460c      	mov	r4, r1
 804384c:	d458      	bmi.n	8043900 <__sflush_r+0xc0>
 804384e:	684b      	ldr	r3, [r1, #4]
 8043850:	2b00      	cmp	r3, #0
 8043852:	dc05      	bgt.n	8043860 <__sflush_r+0x20>
 8043854:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8043856:	2b00      	cmp	r3, #0
 8043858:	dc02      	bgt.n	8043860 <__sflush_r+0x20>
 804385a:	2000      	movs	r0, #0
 804385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8043860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8043862:	2e00      	cmp	r6, #0
 8043864:	d0f9      	beq.n	804385a <__sflush_r+0x1a>
 8043866:	2300      	movs	r3, #0
 8043868:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804386c:	682f      	ldr	r7, [r5, #0]
 804386e:	602b      	str	r3, [r5, #0]
 8043870:	d032      	beq.n	80438d8 <__sflush_r+0x98>
 8043872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8043874:	89a3      	ldrh	r3, [r4, #12]
 8043876:	075a      	lsls	r2, r3, #29
 8043878:	d505      	bpl.n	8043886 <__sflush_r+0x46>
 804387a:	6863      	ldr	r3, [r4, #4]
 804387c:	1ac0      	subs	r0, r0, r3
 804387e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8043880:	b10b      	cbz	r3, 8043886 <__sflush_r+0x46>
 8043882:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8043884:	1ac0      	subs	r0, r0, r3
 8043886:	2300      	movs	r3, #0
 8043888:	4602      	mov	r2, r0
 804388a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804388c:	6a21      	ldr	r1, [r4, #32]
 804388e:	4628      	mov	r0, r5
 8043890:	47b0      	blx	r6
 8043892:	1c43      	adds	r3, r0, #1
 8043894:	89a3      	ldrh	r3, [r4, #12]
 8043896:	d106      	bne.n	80438a6 <__sflush_r+0x66>
 8043898:	6829      	ldr	r1, [r5, #0]
 804389a:	291d      	cmp	r1, #29
 804389c:	d82c      	bhi.n	80438f8 <__sflush_r+0xb8>
 804389e:	4a2a      	ldr	r2, [pc, #168]	; (8043948 <__sflush_r+0x108>)
 80438a0:	40ca      	lsrs	r2, r1
 80438a2:	07d6      	lsls	r6, r2, #31
 80438a4:	d528      	bpl.n	80438f8 <__sflush_r+0xb8>
 80438a6:	2200      	movs	r2, #0
 80438a8:	6062      	str	r2, [r4, #4]
 80438aa:	04d9      	lsls	r1, r3, #19
 80438ac:	6922      	ldr	r2, [r4, #16]
 80438ae:	6022      	str	r2, [r4, #0]
 80438b0:	d504      	bpl.n	80438bc <__sflush_r+0x7c>
 80438b2:	1c42      	adds	r2, r0, #1
 80438b4:	d101      	bne.n	80438ba <__sflush_r+0x7a>
 80438b6:	682b      	ldr	r3, [r5, #0]
 80438b8:	b903      	cbnz	r3, 80438bc <__sflush_r+0x7c>
 80438ba:	6560      	str	r0, [r4, #84]	; 0x54
 80438bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80438be:	602f      	str	r7, [r5, #0]
 80438c0:	2900      	cmp	r1, #0
 80438c2:	d0ca      	beq.n	804385a <__sflush_r+0x1a>
 80438c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80438c8:	4299      	cmp	r1, r3
 80438ca:	d002      	beq.n	80438d2 <__sflush_r+0x92>
 80438cc:	4628      	mov	r0, r5
 80438ce:	f000 f8fd 	bl	8043acc <_free_r>
 80438d2:	2000      	movs	r0, #0
 80438d4:	6360      	str	r0, [r4, #52]	; 0x34
 80438d6:	e7c1      	b.n	804385c <__sflush_r+0x1c>
 80438d8:	6a21      	ldr	r1, [r4, #32]
 80438da:	2301      	movs	r3, #1
 80438dc:	4628      	mov	r0, r5
 80438de:	47b0      	blx	r6
 80438e0:	1c41      	adds	r1, r0, #1
 80438e2:	d1c7      	bne.n	8043874 <__sflush_r+0x34>
 80438e4:	682b      	ldr	r3, [r5, #0]
 80438e6:	2b00      	cmp	r3, #0
 80438e8:	d0c4      	beq.n	8043874 <__sflush_r+0x34>
 80438ea:	2b1d      	cmp	r3, #29
 80438ec:	d001      	beq.n	80438f2 <__sflush_r+0xb2>
 80438ee:	2b16      	cmp	r3, #22
 80438f0:	d101      	bne.n	80438f6 <__sflush_r+0xb6>
 80438f2:	602f      	str	r7, [r5, #0]
 80438f4:	e7b1      	b.n	804385a <__sflush_r+0x1a>
 80438f6:	89a3      	ldrh	r3, [r4, #12]
 80438f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80438fc:	81a3      	strh	r3, [r4, #12]
 80438fe:	e7ad      	b.n	804385c <__sflush_r+0x1c>
 8043900:	690f      	ldr	r7, [r1, #16]
 8043902:	2f00      	cmp	r7, #0
 8043904:	d0a9      	beq.n	804385a <__sflush_r+0x1a>
 8043906:	0793      	lsls	r3, r2, #30
 8043908:	680e      	ldr	r6, [r1, #0]
 804390a:	bf08      	it	eq
 804390c:	694b      	ldreq	r3, [r1, #20]
 804390e:	600f      	str	r7, [r1, #0]
 8043910:	bf18      	it	ne
 8043912:	2300      	movne	r3, #0
 8043914:	eba6 0807 	sub.w	r8, r6, r7
 8043918:	608b      	str	r3, [r1, #8]
 804391a:	f1b8 0f00 	cmp.w	r8, #0
 804391e:	dd9c      	ble.n	804385a <__sflush_r+0x1a>
 8043920:	6a21      	ldr	r1, [r4, #32]
 8043922:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8043924:	4643      	mov	r3, r8
 8043926:	463a      	mov	r2, r7
 8043928:	4628      	mov	r0, r5
 804392a:	47b0      	blx	r6
 804392c:	2800      	cmp	r0, #0
 804392e:	dc06      	bgt.n	804393e <__sflush_r+0xfe>
 8043930:	89a3      	ldrh	r3, [r4, #12]
 8043932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043936:	81a3      	strh	r3, [r4, #12]
 8043938:	f04f 30ff 	mov.w	r0, #4294967295
 804393c:	e78e      	b.n	804385c <__sflush_r+0x1c>
 804393e:	4407      	add	r7, r0
 8043940:	eba8 0800 	sub.w	r8, r8, r0
 8043944:	e7e9      	b.n	804391a <__sflush_r+0xda>
 8043946:	bf00      	nop
 8043948:	20400001 	.word	0x20400001

0804394c <_fflush_r>:
 804394c:	b538      	push	{r3, r4, r5, lr}
 804394e:	690b      	ldr	r3, [r1, #16]
 8043950:	4605      	mov	r5, r0
 8043952:	460c      	mov	r4, r1
 8043954:	b913      	cbnz	r3, 804395c <_fflush_r+0x10>
 8043956:	2500      	movs	r5, #0
 8043958:	4628      	mov	r0, r5
 804395a:	bd38      	pop	{r3, r4, r5, pc}
 804395c:	b118      	cbz	r0, 8043966 <_fflush_r+0x1a>
 804395e:	6983      	ldr	r3, [r0, #24]
 8043960:	b90b      	cbnz	r3, 8043966 <_fflush_r+0x1a>
 8043962:	f7ff fa15 	bl	8042d90 <__sinit>
 8043966:	4b14      	ldr	r3, [pc, #80]	; (80439b8 <_fflush_r+0x6c>)
 8043968:	429c      	cmp	r4, r3
 804396a:	d11b      	bne.n	80439a4 <_fflush_r+0x58>
 804396c:	686c      	ldr	r4, [r5, #4]
 804396e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043972:	2b00      	cmp	r3, #0
 8043974:	d0ef      	beq.n	8043956 <_fflush_r+0xa>
 8043976:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8043978:	07d0      	lsls	r0, r2, #31
 804397a:	d404      	bmi.n	8043986 <_fflush_r+0x3a>
 804397c:	0599      	lsls	r1, r3, #22
 804397e:	d402      	bmi.n	8043986 <_fflush_r+0x3a>
 8043980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8043982:	f7ff faa3 	bl	8042ecc <__retarget_lock_acquire_recursive>
 8043986:	4628      	mov	r0, r5
 8043988:	4621      	mov	r1, r4
 804398a:	f7ff ff59 	bl	8043840 <__sflush_r>
 804398e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8043990:	07da      	lsls	r2, r3, #31
 8043992:	4605      	mov	r5, r0
 8043994:	d4e0      	bmi.n	8043958 <_fflush_r+0xc>
 8043996:	89a3      	ldrh	r3, [r4, #12]
 8043998:	059b      	lsls	r3, r3, #22
 804399a:	d4dd      	bmi.n	8043958 <_fflush_r+0xc>
 804399c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804399e:	f7ff fa96 	bl	8042ece <__retarget_lock_release_recursive>
 80439a2:	e7d9      	b.n	8043958 <_fflush_r+0xc>
 80439a4:	4b05      	ldr	r3, [pc, #20]	; (80439bc <_fflush_r+0x70>)
 80439a6:	429c      	cmp	r4, r3
 80439a8:	d101      	bne.n	80439ae <_fflush_r+0x62>
 80439aa:	68ac      	ldr	r4, [r5, #8]
 80439ac:	e7df      	b.n	804396e <_fflush_r+0x22>
 80439ae:	4b04      	ldr	r3, [pc, #16]	; (80439c0 <_fflush_r+0x74>)
 80439b0:	429c      	cmp	r4, r3
 80439b2:	bf08      	it	eq
 80439b4:	68ec      	ldreq	r4, [r5, #12]
 80439b6:	e7da      	b.n	804396e <_fflush_r+0x22>
 80439b8:	08043c40 	.word	0x08043c40
 80439bc:	08043c60 	.word	0x08043c60
 80439c0:	08043c20 	.word	0x08043c20

080439c4 <_lseek_r>:
 80439c4:	b538      	push	{r3, r4, r5, lr}
 80439c6:	4d07      	ldr	r5, [pc, #28]	; (80439e4 <_lseek_r+0x20>)
 80439c8:	4604      	mov	r4, r0
 80439ca:	4608      	mov	r0, r1
 80439cc:	4611      	mov	r1, r2
 80439ce:	2200      	movs	r2, #0
 80439d0:	602a      	str	r2, [r5, #0]
 80439d2:	461a      	mov	r2, r3
 80439d4:	f7fd f820 	bl	8040a18 <_lseek>
 80439d8:	1c43      	adds	r3, r0, #1
 80439da:	d102      	bne.n	80439e2 <_lseek_r+0x1e>
 80439dc:	682b      	ldr	r3, [r5, #0]
 80439de:	b103      	cbz	r3, 80439e2 <_lseek_r+0x1e>
 80439e0:	6023      	str	r3, [r4, #0]
 80439e2:	bd38      	pop	{r3, r4, r5, pc}
 80439e4:	20000124 	.word	0x20000124

080439e8 <__swhatbuf_r>:
 80439e8:	b570      	push	{r4, r5, r6, lr}
 80439ea:	460e      	mov	r6, r1
 80439ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80439f0:	2900      	cmp	r1, #0
 80439f2:	b096      	sub	sp, #88	; 0x58
 80439f4:	4614      	mov	r4, r2
 80439f6:	461d      	mov	r5, r3
 80439f8:	da08      	bge.n	8043a0c <__swhatbuf_r+0x24>
 80439fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80439fe:	2200      	movs	r2, #0
 8043a00:	602a      	str	r2, [r5, #0]
 8043a02:	061a      	lsls	r2, r3, #24
 8043a04:	d410      	bmi.n	8043a28 <__swhatbuf_r+0x40>
 8043a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8043a0a:	e00e      	b.n	8043a2a <__swhatbuf_r+0x42>
 8043a0c:	466a      	mov	r2, sp
 8043a0e:	f000 f8bb 	bl	8043b88 <_fstat_r>
 8043a12:	2800      	cmp	r0, #0
 8043a14:	dbf1      	blt.n	80439fa <__swhatbuf_r+0x12>
 8043a16:	9a01      	ldr	r2, [sp, #4]
 8043a18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8043a1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8043a20:	425a      	negs	r2, r3
 8043a22:	415a      	adcs	r2, r3
 8043a24:	602a      	str	r2, [r5, #0]
 8043a26:	e7ee      	b.n	8043a06 <__swhatbuf_r+0x1e>
 8043a28:	2340      	movs	r3, #64	; 0x40
 8043a2a:	2000      	movs	r0, #0
 8043a2c:	6023      	str	r3, [r4, #0]
 8043a2e:	b016      	add	sp, #88	; 0x58
 8043a30:	bd70      	pop	{r4, r5, r6, pc}
	...

08043a34 <__smakebuf_r>:
 8043a34:	898b      	ldrh	r3, [r1, #12]
 8043a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8043a38:	079d      	lsls	r5, r3, #30
 8043a3a:	4606      	mov	r6, r0
 8043a3c:	460c      	mov	r4, r1
 8043a3e:	d507      	bpl.n	8043a50 <__smakebuf_r+0x1c>
 8043a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8043a44:	6023      	str	r3, [r4, #0]
 8043a46:	6123      	str	r3, [r4, #16]
 8043a48:	2301      	movs	r3, #1
 8043a4a:	6163      	str	r3, [r4, #20]
 8043a4c:	b002      	add	sp, #8
 8043a4e:	bd70      	pop	{r4, r5, r6, pc}
 8043a50:	ab01      	add	r3, sp, #4
 8043a52:	466a      	mov	r2, sp
 8043a54:	f7ff ffc8 	bl	80439e8 <__swhatbuf_r>
 8043a58:	9900      	ldr	r1, [sp, #0]
 8043a5a:	4605      	mov	r5, r0
 8043a5c:	4630      	mov	r0, r6
 8043a5e:	f7ff fa57 	bl	8042f10 <_malloc_r>
 8043a62:	b948      	cbnz	r0, 8043a78 <__smakebuf_r+0x44>
 8043a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8043a68:	059a      	lsls	r2, r3, #22
 8043a6a:	d4ef      	bmi.n	8043a4c <__smakebuf_r+0x18>
 8043a6c:	f023 0303 	bic.w	r3, r3, #3
 8043a70:	f043 0302 	orr.w	r3, r3, #2
 8043a74:	81a3      	strh	r3, [r4, #12]
 8043a76:	e7e3      	b.n	8043a40 <__smakebuf_r+0xc>
 8043a78:	4b0d      	ldr	r3, [pc, #52]	; (8043ab0 <__smakebuf_r+0x7c>)
 8043a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8043a7c:	89a3      	ldrh	r3, [r4, #12]
 8043a7e:	6020      	str	r0, [r4, #0]
 8043a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043a84:	81a3      	strh	r3, [r4, #12]
 8043a86:	9b00      	ldr	r3, [sp, #0]
 8043a88:	6163      	str	r3, [r4, #20]
 8043a8a:	9b01      	ldr	r3, [sp, #4]
 8043a8c:	6120      	str	r0, [r4, #16]
 8043a8e:	b15b      	cbz	r3, 8043aa8 <__smakebuf_r+0x74>
 8043a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8043a94:	4630      	mov	r0, r6
 8043a96:	f000 f889 	bl	8043bac <_isatty_r>
 8043a9a:	b128      	cbz	r0, 8043aa8 <__smakebuf_r+0x74>
 8043a9c:	89a3      	ldrh	r3, [r4, #12]
 8043a9e:	f023 0303 	bic.w	r3, r3, #3
 8043aa2:	f043 0301 	orr.w	r3, r3, #1
 8043aa6:	81a3      	strh	r3, [r4, #12]
 8043aa8:	89a0      	ldrh	r0, [r4, #12]
 8043aaa:	4305      	orrs	r5, r0
 8043aac:	81a5      	strh	r5, [r4, #12]
 8043aae:	e7cd      	b.n	8043a4c <__smakebuf_r+0x18>
 8043ab0:	08042d29 	.word	0x08042d29

08043ab4 <__malloc_lock>:
 8043ab4:	4801      	ldr	r0, [pc, #4]	; (8043abc <__malloc_lock+0x8>)
 8043ab6:	f7ff ba09 	b.w	8042ecc <__retarget_lock_acquire_recursive>
 8043aba:	bf00      	nop
 8043abc:	20000118 	.word	0x20000118

08043ac0 <__malloc_unlock>:
 8043ac0:	4801      	ldr	r0, [pc, #4]	; (8043ac8 <__malloc_unlock+0x8>)
 8043ac2:	f7ff ba04 	b.w	8042ece <__retarget_lock_release_recursive>
 8043ac6:	bf00      	nop
 8043ac8:	20000118 	.word	0x20000118

08043acc <_free_r>:
 8043acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8043ace:	2900      	cmp	r1, #0
 8043ad0:	d044      	beq.n	8043b5c <_free_r+0x90>
 8043ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8043ad6:	9001      	str	r0, [sp, #4]
 8043ad8:	2b00      	cmp	r3, #0
 8043ada:	f1a1 0404 	sub.w	r4, r1, #4
 8043ade:	bfb8      	it	lt
 8043ae0:	18e4      	addlt	r4, r4, r3
 8043ae2:	f7ff ffe7 	bl	8043ab4 <__malloc_lock>
 8043ae6:	4a1e      	ldr	r2, [pc, #120]	; (8043b60 <_free_r+0x94>)
 8043ae8:	9801      	ldr	r0, [sp, #4]
 8043aea:	6813      	ldr	r3, [r2, #0]
 8043aec:	b933      	cbnz	r3, 8043afc <_free_r+0x30>
 8043aee:	6063      	str	r3, [r4, #4]
 8043af0:	6014      	str	r4, [r2, #0]
 8043af2:	b003      	add	sp, #12
 8043af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8043af8:	f7ff bfe2 	b.w	8043ac0 <__malloc_unlock>
 8043afc:	42a3      	cmp	r3, r4
 8043afe:	d908      	bls.n	8043b12 <_free_r+0x46>
 8043b00:	6825      	ldr	r5, [r4, #0]
 8043b02:	1961      	adds	r1, r4, r5
 8043b04:	428b      	cmp	r3, r1
 8043b06:	bf01      	itttt	eq
 8043b08:	6819      	ldreq	r1, [r3, #0]
 8043b0a:	685b      	ldreq	r3, [r3, #4]
 8043b0c:	1949      	addeq	r1, r1, r5
 8043b0e:	6021      	streq	r1, [r4, #0]
 8043b10:	e7ed      	b.n	8043aee <_free_r+0x22>
 8043b12:	461a      	mov	r2, r3
 8043b14:	685b      	ldr	r3, [r3, #4]
 8043b16:	b10b      	cbz	r3, 8043b1c <_free_r+0x50>
 8043b18:	42a3      	cmp	r3, r4
 8043b1a:	d9fa      	bls.n	8043b12 <_free_r+0x46>
 8043b1c:	6811      	ldr	r1, [r2, #0]
 8043b1e:	1855      	adds	r5, r2, r1
 8043b20:	42a5      	cmp	r5, r4
 8043b22:	d10b      	bne.n	8043b3c <_free_r+0x70>
 8043b24:	6824      	ldr	r4, [r4, #0]
 8043b26:	4421      	add	r1, r4
 8043b28:	1854      	adds	r4, r2, r1
 8043b2a:	42a3      	cmp	r3, r4
 8043b2c:	6011      	str	r1, [r2, #0]
 8043b2e:	d1e0      	bne.n	8043af2 <_free_r+0x26>
 8043b30:	681c      	ldr	r4, [r3, #0]
 8043b32:	685b      	ldr	r3, [r3, #4]
 8043b34:	6053      	str	r3, [r2, #4]
 8043b36:	4421      	add	r1, r4
 8043b38:	6011      	str	r1, [r2, #0]
 8043b3a:	e7da      	b.n	8043af2 <_free_r+0x26>
 8043b3c:	d902      	bls.n	8043b44 <_free_r+0x78>
 8043b3e:	230c      	movs	r3, #12
 8043b40:	6003      	str	r3, [r0, #0]
 8043b42:	e7d6      	b.n	8043af2 <_free_r+0x26>
 8043b44:	6825      	ldr	r5, [r4, #0]
 8043b46:	1961      	adds	r1, r4, r5
 8043b48:	428b      	cmp	r3, r1
 8043b4a:	bf04      	itt	eq
 8043b4c:	6819      	ldreq	r1, [r3, #0]
 8043b4e:	685b      	ldreq	r3, [r3, #4]
 8043b50:	6063      	str	r3, [r4, #4]
 8043b52:	bf04      	itt	eq
 8043b54:	1949      	addeq	r1, r1, r5
 8043b56:	6021      	streq	r1, [r4, #0]
 8043b58:	6054      	str	r4, [r2, #4]
 8043b5a:	e7ca      	b.n	8043af2 <_free_r+0x26>
 8043b5c:	b003      	add	sp, #12
 8043b5e:	bd30      	pop	{r4, r5, pc}
 8043b60:	2000011c 	.word	0x2000011c

08043b64 <_read_r>:
 8043b64:	b538      	push	{r3, r4, r5, lr}
 8043b66:	4d07      	ldr	r5, [pc, #28]	; (8043b84 <_read_r+0x20>)
 8043b68:	4604      	mov	r4, r0
 8043b6a:	4608      	mov	r0, r1
 8043b6c:	4611      	mov	r1, r2
 8043b6e:	2200      	movs	r2, #0
 8043b70:	602a      	str	r2, [r5, #0]
 8043b72:	461a      	mov	r2, r3
 8043b74:	f7fc fef0 	bl	8040958 <_read>
 8043b78:	1c43      	adds	r3, r0, #1
 8043b7a:	d102      	bne.n	8043b82 <_read_r+0x1e>
 8043b7c:	682b      	ldr	r3, [r5, #0]
 8043b7e:	b103      	cbz	r3, 8043b82 <_read_r+0x1e>
 8043b80:	6023      	str	r3, [r4, #0]
 8043b82:	bd38      	pop	{r3, r4, r5, pc}
 8043b84:	20000124 	.word	0x20000124

08043b88 <_fstat_r>:
 8043b88:	b538      	push	{r3, r4, r5, lr}
 8043b8a:	4d07      	ldr	r5, [pc, #28]	; (8043ba8 <_fstat_r+0x20>)
 8043b8c:	2300      	movs	r3, #0
 8043b8e:	4604      	mov	r4, r0
 8043b90:	4608      	mov	r0, r1
 8043b92:	4611      	mov	r1, r2
 8043b94:	602b      	str	r3, [r5, #0]
 8043b96:	f7fc ff24 	bl	80409e2 <_fstat>
 8043b9a:	1c43      	adds	r3, r0, #1
 8043b9c:	d102      	bne.n	8043ba4 <_fstat_r+0x1c>
 8043b9e:	682b      	ldr	r3, [r5, #0]
 8043ba0:	b103      	cbz	r3, 8043ba4 <_fstat_r+0x1c>
 8043ba2:	6023      	str	r3, [r4, #0]
 8043ba4:	bd38      	pop	{r3, r4, r5, pc}
 8043ba6:	bf00      	nop
 8043ba8:	20000124 	.word	0x20000124

08043bac <_isatty_r>:
 8043bac:	b538      	push	{r3, r4, r5, lr}
 8043bae:	4d06      	ldr	r5, [pc, #24]	; (8043bc8 <_isatty_r+0x1c>)
 8043bb0:	2300      	movs	r3, #0
 8043bb2:	4604      	mov	r4, r0
 8043bb4:	4608      	mov	r0, r1
 8043bb6:	602b      	str	r3, [r5, #0]
 8043bb8:	f7fc ff23 	bl	8040a02 <_isatty>
 8043bbc:	1c43      	adds	r3, r0, #1
 8043bbe:	d102      	bne.n	8043bc6 <_isatty_r+0x1a>
 8043bc0:	682b      	ldr	r3, [r5, #0]
 8043bc2:	b103      	cbz	r3, 8043bc6 <_isatty_r+0x1a>
 8043bc4:	6023      	str	r3, [r4, #0]
 8043bc6:	bd38      	pop	{r3, r4, r5, pc}
 8043bc8:	20000124 	.word	0x20000124

08043bcc <_init>:
 8043bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043bce:	bf00      	nop
 8043bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043bd2:	bc08      	pop	{r3}
 8043bd4:	469e      	mov	lr, r3
 8043bd6:	4770      	bx	lr

08043bd8 <_fini>:
 8043bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043bda:	bf00      	nop
 8043bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043bde:	bc08      	pop	{r3}
 8043be0:	469e      	mov	lr, r3
 8043be2:	4770      	bx	lr
