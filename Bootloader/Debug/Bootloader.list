
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c4c  08003c4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c54  08003c54  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c58  08003c58  00013c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08003c6c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003c6c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097a0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f81  00000000  00000000  000297de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000848  00000000  00000000  0002c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272ef  00000000  00000000  0002c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6bc  00000000  00000000  00053bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f82  00000000  00000000  0005f273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001501f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000235c  00000000  00000000  00150248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08003b20 	.word	0x08003b20

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08003b20 	.word	0x08003b20

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <flash_erase>:
/**
 * @brief   This function erases the flash memory sector based on the address.
 * @param   address: First address in the sector to be erased.
 * @return  flash_status: Status of the erase operation.
 */
flash_status flash_erase(uint32_t address) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef hal_status;

    // Unlock the Flash memory for write operations
    HAL_FLASH_Unlock();
 8000544:	f000 ffae 	bl	80014a4 <HAL_FLASH_Unlock>

    // Determine the sector to erase based on the address
    FLASH_EraseInitTypeDef erase_init = {
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]
 8000558:	2301      	movs	r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
        .TypeErase = FLASH_TYPEERASE_SECTORS,
        .Sector = GetSector(address),
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f87b 	bl	8000658 <GetSector>
 8000562:	4603      	mov	r3, r0
    FLASH_EraseInitTypeDef erase_init = {
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	2301      	movs	r3, #1
 8000568:	617b      	str	r3, [r7, #20]
        .Banks = FLASH_BANK_1,
        .NbSectors = 1
    };

    // Perform the erase operation
    hal_status = HAL_FLASHEx_Erase(&erase_init, NULL);
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f001 f8f9 	bl	8001768 <HAL_FLASHEx_Erase>
 8000576:	4603      	mov	r3, r0
 8000578:	77fb      	strb	r3, [r7, #31]

    // Lock the Flash memory
    HAL_FLASH_Lock();
 800057a:	f000 ffb5 	bl	80014e8 <HAL_FLASH_Lock>

    // Handle the result
    if (hal_status == HAL_OK) {
 800057e:	7ffb      	ldrb	r3, [r7, #31]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d101      	bne.n	8000588 <flash_erase+0x4c>
        return FLASH_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	e000      	b.n	800058a <flash_erase+0x4e>
    } else {
        return FLASH_ERROR;
 8000588:	23ff      	movs	r3, #255	; 0xff
    }
}
 800058a:	4618      	mov	r0, r3
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <flash_write>:
 * @param   *data:   Pointer to the data array to write.
 * @param   length:  Number of 32-bit words to write.
 * @return  flash_status: Status of the write operation.
 */
flash_status flash_write(uint32_t address, uint32_t *data, uint32_t length)
{
 8000592:	b5b0      	push	{r4, r5, r7, lr}
 8000594:	b086      	sub	sp, #24
 8000596:	af00      	add	r7, sp, #0
 8000598:	60f8      	str	r0, [r7, #12]
 800059a:	60b9      	str	r1, [r7, #8]
 800059c:	607a      	str	r2, [r7, #4]
    flash_status status = FLASH_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	75fb      	strb	r3, [r7, #23]

    // Unlock the Flash memory for write operations
    HAL_FLASH_Unlock();
 80005a2:	f000 ff7f 	bl	80014a4 <HAL_FLASH_Unlock>

    // Loop through the array and write each word
    for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	e027      	b.n	80005fc <flash_write+0x6a>
    {
        // Program the flash memory word by word
        if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data[i]))
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	4413      	add	r3, r2
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2200      	movs	r2, #0
 80005b8:	461c      	mov	r4, r3
 80005ba:	4615      	mov	r5, r2
 80005bc:	4622      	mov	r2, r4
 80005be:	462b      	mov	r3, r5
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	2002      	movs	r0, #2
 80005c4:	f000 ff12 	bl	80013ec <HAL_FLASH_Program>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d003      	beq.n	80005d6 <flash_write+0x44>
        {
            status |= FLASH_ERROR_WRITE;
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	75fb      	strb	r3, [r7, #23]
        }

        // Read back the content of the memory to confirm
        if (data[i] != (*(volatile uint32_t*)address))
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	4413      	add	r3, r2
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d003      	beq.n	80005f0 <flash_write+0x5e>
        {
            status |= FLASH_ERROR_READBACK;
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	75fb      	strb	r3, [r7, #23]
        }

        // Move to the next word
        address += 4u;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	3304      	adds	r3, #4
 80005f4:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	3301      	adds	r3, #1
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693a      	ldr	r2, [r7, #16]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	d202      	bcs.n	800060a <flash_write+0x78>
 8000604:	7dfb      	ldrb	r3, [r7, #23]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0d0      	beq.n	80005ac <flash_write+0x1a>
    }

    // Lock the Flash memory
    HAL_FLASH_Lock();
 800060a:	f000 ff6d 	bl	80014e8 <HAL_FLASH_Lock>

    return status;
 800060e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}

08000618 <flash_jump_to_app>:

/**
 * @brief   Jump to the user application in flash memory.
 */
void flash_jump_to_app(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2101      	movs	r1, #1
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <flash_jump_to_app+0x34>)
 8000624:	f001 fb4a 	bl	8001cbc <HAL_GPIO_WritePin>

    /* Function pointer to the address of the user application. */
    fnc_ptr jump_to_app;
    jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_APP_START_ADDRESS + 4u));
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <flash_jump_to_app+0x38>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	607b      	str	r3, [r7, #4]

    // De-initialize HAL and reset peripherals
    HAL_DeInit();
 800062e:	f000 fcf7 	bl	8001020 <HAL_DeInit>

    // Set the main stack pointer
    __set_MSP(*(volatile uint32_t*)FLASH_APP_START_ADDRESS);
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <flash_jump_to_app+0x3c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f383 8808 	msr	MSP, r3
}
 800063e:	bf00      	nop
    jump_to_app();
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4798      	blx	r3
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40020400 	.word	0x40020400
 8000650:	08040004 	.word	0x08040004
 8000654:	08040000 	.word	0x08040000

08000658 <GetSector>:
/**
 * @brief   Determine the flash memory sector for a given address.
 * @param   address: Flash memory address.
 * @return  uint32_t: Sector number corresponding to the address.
 */
static uint32_t GetSector(uint32_t address) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    if (address >= 0x08000000 && address < 0x08004000) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000666:	d305      	bcc.n	8000674 <GetSector+0x1c>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a3d      	ldr	r2, [pc, #244]	; (8000760 <GetSector+0x108>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d201      	bcs.n	8000674 <GetSector+0x1c>
        return FLASH_SECTOR_0;
 8000670:	2300      	movs	r3, #0
 8000672:	e06e      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x08004000 && address < 0x08008000) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a3a      	ldr	r2, [pc, #232]	; (8000760 <GetSector+0x108>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d305      	bcc.n	8000688 <GetSector+0x30>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a39      	ldr	r2, [pc, #228]	; (8000764 <GetSector+0x10c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d201      	bcs.n	8000688 <GetSector+0x30>
        return FLASH_SECTOR_1;
 8000684:	2301      	movs	r3, #1
 8000686:	e064      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x08008000 && address < 0x0800C000) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a36      	ldr	r2, [pc, #216]	; (8000764 <GetSector+0x10c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d305      	bcc.n	800069c <GetSector+0x44>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a35      	ldr	r2, [pc, #212]	; (8000768 <GetSector+0x110>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d201      	bcs.n	800069c <GetSector+0x44>
        return FLASH_SECTOR_2;
 8000698:	2302      	movs	r3, #2
 800069a:	e05a      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x0800C000 && address < 0x08010000) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a32      	ldr	r2, [pc, #200]	; (8000768 <GetSector+0x110>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d305      	bcc.n	80006b0 <GetSector+0x58>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a31      	ldr	r2, [pc, #196]	; (800076c <GetSector+0x114>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d801      	bhi.n	80006b0 <GetSector+0x58>
        return FLASH_SECTOR_3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	e050      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x08010000 && address < 0x08020000) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a2e      	ldr	r2, [pc, #184]	; (800076c <GetSector+0x114>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d905      	bls.n	80006c4 <GetSector+0x6c>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a2d      	ldr	r2, [pc, #180]	; (8000770 <GetSector+0x118>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d801      	bhi.n	80006c4 <GetSector+0x6c>
        return FLASH_SECTOR_4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	e046      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x08020000 && address < 0x08040000) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <GetSector+0x118>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d905      	bls.n	80006d8 <GetSector+0x80>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4a29      	ldr	r2, [pc, #164]	; (8000774 <GetSector+0x11c>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d801      	bhi.n	80006d8 <GetSector+0x80>
        return FLASH_SECTOR_5;
 80006d4:	2305      	movs	r3, #5
 80006d6:	e03c      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x08040000 && address < 0x08060000) {
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a26      	ldr	r2, [pc, #152]	; (8000774 <GetSector+0x11c>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d905      	bls.n	80006ec <GetSector+0x94>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a25      	ldr	r2, [pc, #148]	; (8000778 <GetSector+0x120>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d801      	bhi.n	80006ec <GetSector+0x94>
        return FLASH_SECTOR_6;
 80006e8:	2306      	movs	r3, #6
 80006ea:	e032      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x08060000 && address < 0x08080000) {
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a22      	ldr	r2, [pc, #136]	; (8000778 <GetSector+0x120>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d905      	bls.n	8000700 <GetSector+0xa8>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a21      	ldr	r2, [pc, #132]	; (800077c <GetSector+0x124>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d801      	bhi.n	8000700 <GetSector+0xa8>
        return FLASH_SECTOR_7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	e028      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x08080000 && address < 0x080A0000) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a1e      	ldr	r2, [pc, #120]	; (800077c <GetSector+0x124>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d905      	bls.n	8000714 <GetSector+0xbc>
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <GetSector+0x128>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d801      	bhi.n	8000714 <GetSector+0xbc>
        return FLASH_SECTOR_8;
 8000710:	2308      	movs	r3, #8
 8000712:	e01e      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x080A0000 && address < 0x080C0000) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <GetSector+0x128>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d905      	bls.n	8000728 <GetSector+0xd0>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <GetSector+0x12c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d801      	bhi.n	8000728 <GetSector+0xd0>
        return FLASH_SECTOR_9;
 8000724:	2309      	movs	r3, #9
 8000726:	e014      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x080C0000 && address < 0x080E0000) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <GetSector+0x12c>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d905      	bls.n	800073c <GetSector+0xe4>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <GetSector+0x130>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d801      	bhi.n	800073c <GetSector+0xe4>
        return FLASH_SECTOR_10;
 8000738:	230a      	movs	r3, #10
 800073a:	e00a      	b.n	8000752 <GetSector+0xfa>
    } else if (address >= 0x080E0000 && address < 0x08100000) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <GetSector+0x130>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d905      	bls.n	8000750 <GetSector+0xf8>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800074a:	d201      	bcs.n	8000750 <GetSector+0xf8>
        return FLASH_SECTOR_11;
 800074c:	230b      	movs	r3, #11
 800074e:	e000      	b.n	8000752 <GetSector+0xfa>
    } else {
        return FLASH_SECTOR_11; // Default to last sector if address is out of range
 8000750:	230b      	movs	r3, #11
    }
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	08004000 	.word	0x08004000
 8000764:	08008000 	.word	0x08008000
 8000768:	0800c000 	.word	0x0800c000
 800076c:	0800ffff 	.word	0x0800ffff
 8000770:	0801ffff 	.word	0x0801ffff
 8000774:	0803ffff 	.word	0x0803ffff
 8000778:	0805ffff 	.word	0x0805ffff
 800077c:	0807ffff 	.word	0x0807ffff
 8000780:	0809ffff 	.word	0x0809ffff
 8000784:	080bffff 	.word	0x080bffff
 8000788:	080dffff 	.word	0x080dffff

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 fc39 	bl	8001006 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f82c 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f8d4 	bl	8000944 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800079c:	f000 f8a2 	bl	80008e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Send welcome message on startup. */
  uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <main+0x48>)
 80007a2:	f000 f9d3 	bl	8000b4c <uart_transmit_str>
  uart_transmit_str((uint8_t*)"Created By Oubrahim\n\r");
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <main+0x4c>)
 80007a8:	f000 f9d0 	bl	8000b4c <uart_transmit_str>
  uart_transmit_str((uint8_t*)"UART Bootloader\n\r");
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <main+0x50>)
 80007ae:	f000 f9cd 	bl	8000b4c <uart_transmit_str>
  uart_transmit_str((uint8_t*)"================================\n\r\n\r");
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <main+0x54>)
 80007b4:	f000 f9ca 	bl	8000b4c <uart_transmit_str>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET );    //Green LED ON
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <main+0x58>)
 80007be:	f001 fa7d 	bl	8001cbc <HAL_GPIO_WritePin>
	    /* Ask for new data and start the Xmodem protocol. */
	    uart_transmit_str((uint8_t*)"Please send a new binary file.\n\r");
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <main+0x5c>)
 80007c4:	f000 f9c2 	bl	8000b4c <uart_transmit_str>
	    xmodem_receive();
 80007c8:	f000 fa0a 	bl	8000be0 <xmodem_receive>
	    /* We only exit the xmodem protocol, if there are any errors.
	     * In that case, notify the user and start over. */
	    uart_transmit_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 80007cc:	4807      	ldr	r0, [pc, #28]	; (80007ec <main+0x60>)
 80007ce:	f000 f9bd 	bl	8000b4c <uart_transmit_str>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET );    //Green LED ON
 80007d2:	e7f1      	b.n	80007b8 <main+0x2c>
 80007d4:	08003b38 	.word	0x08003b38
 80007d8:	08003b60 	.word	0x08003b60
 80007dc:	08003b78 	.word	0x08003b78
 80007e0:	08003b8c 	.word	0x08003b8c
 80007e4:	40020400 	.word	0x40020400
 80007e8:	08003bb4 	.word	0x08003bb4
 80007ec:	08003bd8 	.word	0x08003bd8

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0b8      	sub	sp, #224	; 0xe0
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007fa:	2234      	movs	r2, #52	; 0x34
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 f986 	bl	8003b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2290      	movs	r2, #144	; 0x90
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f003 f977 	bl	8003b10 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <SystemClock_Config+0xec>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <SystemClock_Config+0xec>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <SystemClock_Config+0xec>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <SystemClock_Config+0xf0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000842:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <SystemClock_Config+0xf0>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SystemClock_Config+0xf0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000856:	2302      	movs	r3, #2
 8000858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000862:	2310      	movs	r3, #16
 8000864:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fa3c 	bl	8001cf0 <HAL_RCC_OscConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800087e:	f000 f89f 	bl	80009c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fcd0 	bl	800224c <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008b2:	f000 f885 	bl	80009c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80008b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ba:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008bc:	2300      	movs	r3, #0
 80008be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fea7 	bl	8002618 <HAL_RCCEx_PeriphCLKConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008d0:	f000 f876 	bl	80009c0 <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	37e0      	adds	r7, #224	; 0xe0
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008ea:	4a15      	ldr	r2, [pc, #84]	; (8000940 <MX_USART3_UART_Init+0x5c>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x58>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART3_UART_Init+0x58>)
 8000928:	f002 fa9e 	bl	8002e68 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f845 	bl	80009c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000002c 	.word	0x2000002c
 8000940:	40004800 	.word	0x40004800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_GPIO_Init+0x74>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_GPIO_Init+0x74>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2101      	movs	r1, #1
 800098e:	480b      	ldr	r0, [pc, #44]	; (80009bc <MX_GPIO_Init+0x78>)
 8000990:	f001 f994 	bl	8001cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000994:	2301      	movs	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_GPIO_Init+0x78>)
 80009ac:	f000 ffda 	bl	8001964 <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020400 	.word	0x40020400

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <Error_Handler+0x8>
	...

080009cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x44>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_MspInit+0x44>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_MspInit+0x44>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x44>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x44>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x44>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_UART_MspInit+0x7c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d128      	bne.n	8000a88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x80>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <HAL_UART_MspInit+0x80>)
 8000a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_UART_MspInit+0x80>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x80>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x80>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0x80>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0x84>)
 8000a84:	f000 ff6e 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40004800 	.word	0x40004800
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020c00 	.word	0x40020c00

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae8:	f000 fafe 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <uart_receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status uart_receive(uint8_t *data, uint16_t length)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
  uart_status status = UART_ERROR;
 8000b20:	23ff      	movs	r3, #255	; 0xff
 8000b22:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK == HAL_UART_Receive(&huart3, data, length, UART_TIMEOUT))
 8000b24:	887a      	ldrh	r2, [r7, #2]
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <uart_receive+0x34>)
 8000b2e:	f002 fa7c 	bl	800302a <HAL_UART_Receive>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <uart_receive+0x28>
  {
    status = UART_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000002c 	.word	0x2000002c

08000b4c <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 8000b54:	23ff      	movs	r3, #255	; 0xff
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 8000b5c:	e002      	b.n	8000b64 <uart_transmit_str+0x18>
  {
    length++;
 8000b5e:	89bb      	ldrh	r3, [r7, #12]
 8000b60:	3301      	adds	r3, #1
 8000b62:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 8000b64:	89bb      	ldrh	r3, [r7, #12]
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f6      	bne.n	8000b5e <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart3, data, length, UART_TIMEOUT))
 8000b70:	89ba      	ldrh	r2, [r7, #12]
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <uart_transmit_str+0x48>)
 8000b7a:	f002 f9c3 	bl	8002f04 <HAL_UART_Transmit>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d101      	bne.n	8000b88 <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000002c 	.word	0x2000002c

08000b98 <uart_transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_ch(uint8_t data)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  uart_status status = UART_ERROR;
 8000ba2:	23ff      	movs	r3, #255	; 0xff
 8000ba4:	73fb      	strb	r3, [r7, #15]

  /* Make available the UART module. */
  if (HAL_UART_STATE_TIMEOUT == HAL_UART_GetState(&huart3))
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <uart_transmit_ch+0x44>)
 8000ba8:	f002 fbaf 	bl	800330a <HAL_UART_GetState>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2ba0      	cmp	r3, #160	; 0xa0
 8000bb0:	d102      	bne.n	8000bb8 <uart_transmit_ch+0x20>
  {
    HAL_UART_Abort(&huart3);
 8000bb2:	480a      	ldr	r0, [pc, #40]	; (8000bdc <uart_transmit_ch+0x44>)
 8000bb4:	f002 fb09 	bl	80031ca <HAL_UART_Abort>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart3, &data, 1u, UART_TIMEOUT))
 8000bb8:	1df9      	adds	r1, r7, #7
 8000bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <uart_transmit_ch+0x44>)
 8000bc2:	f002 f99f 	bl	8002f04 <HAL_UART_Transmit>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <uart_transmit_ch+0x38>
  {
    status = UART_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000002c 	.word	0x2000002c

08000be0 <xmodem_receive>:
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void xmodem_receive(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  volatile xmodem_status status = X_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	717b      	strb	r3, [r7, #5]
  uint8_t error_number = 0u;
 8000bea:	2300      	movs	r3, #0
 8000bec:	713b      	strb	r3, [r7, #4]

  x_first_packet_received = false;
 8000bee:	4b3f      	ldr	r3, [pc, #252]	; (8000cec <xmodem_receive+0x10c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
  xmodem_packet_number = 1u;
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <xmodem_receive+0x110>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
  xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <xmodem_receive+0x114>)
 8000bfc:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <xmodem_receive+0x118>)
 8000bfe:	601a      	str	r2, [r3, #0]

  /* Loop until there isn't any error (or until we jump to the user application). */
  while (X_OK == status)
 8000c00:	e06a      	b.n	8000cd8 <xmodem_receive+0xf8>
  {
    uint8_t header = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	70fb      	strb	r3, [r7, #3]

    /* Get the header from UART. */
    uart_status comm_status = uart_receive(&header, 1u);
 8000c06:	1cfb      	adds	r3, r7, #3
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff82 	bl	8000b14 <uart_receive>
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]

    /* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
    if ((UART_OK != comm_status) && (false == x_first_packet_received))
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <xmodem_receive+0x4a>
 8000c1a:	4b34      	ldr	r3, [pc, #208]	; (8000cec <xmodem_receive+0x10c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d103      	bne.n	8000c2a <xmodem_receive+0x4a>
    {
      (void)uart_transmit_ch(X_C);
 8000c22:	2043      	movs	r0, #67	; 0x43
 8000c24:	f7ff ffb8 	bl	8000b98 <uart_transmit_ch>
 8000c28:	e00d      	b.n	8000c46 <xmodem_receive+0x66>
    }
    /* Uart timeout or any other errors. */
    else if ((UART_OK != comm_status) && (true == x_first_packet_received))
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00a      	beq.n	8000c46 <xmodem_receive+0x66>
 8000c30:	4b2e      	ldr	r3, [pc, #184]	; (8000cec <xmodem_receive+0x10c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d106      	bne.n	8000c46 <xmodem_receive+0x66>
    {
      status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f993 	bl	8000f68 <xmodem_error_handler>
 8000c42:	4603      	mov	r3, r0
 8000c44:	717b      	strb	r3, [r7, #5]
    {
      /* Do nothing. */
    }

    /* The header can be: SOH, STX, EOT and CAN. */
    switch(header)
 8000c46:	78fb      	ldrb	r3, [r7, #3]
 8000c48:	2b18      	cmp	r3, #24
 8000c4a:	d037      	beq.n	8000cbc <xmodem_receive+0xdc>
 8000c4c:	2b18      	cmp	r3, #24
 8000c4e:	dc38      	bgt.n	8000cc2 <xmodem_receive+0xe2>
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	dc02      	bgt.n	8000c5a <xmodem_receive+0x7a>
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dc03      	bgt.n	8000c60 <xmodem_receive+0x80>
 8000c58:	e033      	b.n	8000cc2 <xmodem_receive+0xe2>
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d022      	beq.n	8000ca4 <xmodem_receive+0xc4>
 8000c5e:	e030      	b.n	8000cc2 <xmodem_receive+0xe2>
      xmodem_status packet_status = X_ERROR;
      /* 128 or 1024 bytes of data. */
      case X_SOH:
      case X_STX:
        /* If the handling was successful, then send an ACK. */
        packet_status = xmodem_handle_packet(header);
 8000c60:	78fb      	ldrb	r3, [r7, #3]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f888 	bl	8000d78 <xmodem_handle_packet>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71bb      	strb	r3, [r7, #6]
        if (X_OK == packet_status)
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <xmodem_receive+0x9a>
        {
          (void)uart_transmit_ch(X_ACK);
 8000c72:	2006      	movs	r0, #6
 8000c74:	f7ff ff90 	bl	8000b98 <uart_transmit_ch>
        /* Error while processing the packet, either send a NAK or do graceful abort. */
        else
        {
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
        }
        break;
 8000c78:	e02e      	b.n	8000cd8 <xmodem_receive+0xf8>
        else if (X_ERROR_FLASH == packet_status)
 8000c7a:	79bb      	ldrb	r3, [r7, #6]
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d109      	bne.n	8000c94 <xmodem_receive+0xb4>
          error_number = X_MAX_ERRORS;
 8000c80:	2303      	movs	r3, #3
 8000c82:	713b      	strb	r3, [r7, #4]
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2103      	movs	r1, #3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f96d 	bl	8000f68 <xmodem_error_handler>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	717b      	strb	r3, [r7, #5]
        break;
 8000c92:	e021      	b.n	8000cd8 <xmodem_receive+0xf8>
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2103      	movs	r1, #3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f965 	bl	8000f68 <xmodem_error_handler>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	717b      	strb	r3, [r7, #5]
        break;
 8000ca2:	e019      	b.n	8000cd8 <xmodem_receive+0xf8>
      /* End of Transmission. */
      case X_EOT:
        /* ACK, feedback to user (as a text), then jump to user application. */
        (void)uart_transmit_ch(X_ACK);
 8000ca4:	2006      	movs	r0, #6
 8000ca6:	f7ff ff77 	bl	8000b98 <uart_transmit_ch>
        (void)uart_transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <xmodem_receive+0x11c>)
 8000cac:	f7ff ff4e 	bl	8000b4c <uart_transmit_str>
        (void)uart_transmit_str((uint8_t*)"Jumping to user application...\n\r");
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <xmodem_receive+0x120>)
 8000cb2:	f7ff ff4b 	bl	8000b4c <uart_transmit_str>
        flash_jump_to_app();
 8000cb6:	f7ff fcaf 	bl	8000618 <flash_jump_to_app>
        break;
 8000cba:	e00d      	b.n	8000cd8 <xmodem_receive+0xf8>
      /* Abort from host. */
      case X_CAN:
        status = X_ERROR;
 8000cbc:	23ff      	movs	r3, #255	; 0xff
 8000cbe:	717b      	strb	r3, [r7, #5]
        break;
 8000cc0:	e00a      	b.n	8000cd8 <xmodem_receive+0xf8>
      default:
        /* Wrong header. */
        if (UART_OK == comm_status)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d106      	bne.n	8000cd6 <xmodem_receive+0xf6>
        {
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2103      	movs	r1, #3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f94b 	bl	8000f68 <xmodem_error_handler>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	717b      	strb	r3, [r7, #5]
        }
        break;
 8000cd6:	bf00      	nop
  while (X_OK == status)
 8000cd8:	797b      	ldrb	r3, [r7, #5]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d090      	beq.n	8000c02 <xmodem_receive+0x22>
    }
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000b4 	.word	0x200000b4
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	200000b0 	.word	0x200000b0
 8000cf8:	08040000 	.word	0x08040000
 8000cfc:	08003bf8 	.word	0x08003bf8
 8000d00:	08003c10 	.word	0x08003c10

08000d04 <xmodem_calc_crc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8000d10:	2300      	movs	r3, #0
 8000d12:	81fb      	strh	r3, [r7, #14]
    while (length)
 8000d14:	e025      	b.n	8000d62 <xmodem_calc_crc+0x5e>
    {
        length--;
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d2c:	4053      	eors	r3, r2
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	737b      	strb	r3, [r7, #13]
 8000d36:	e011      	b.n	8000d5c <xmodem_calc_crc+0x58>
        {
            if (crc & 0x8000u)
 8000d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da07      	bge.n	8000d50 <xmodem_calc_crc+0x4c>
            {
                crc = (crc << 1u) ^ 0x1021u;
 8000d40:	89fb      	ldrh	r3, [r7, #14]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	f241 0321 	movw	r3, #4129	; 0x1021
 8000d4a:	4053      	eors	r3, r2
 8000d4c:	81fb      	strh	r3, [r7, #14]
 8000d4e:	e002      	b.n	8000d56 <xmodem_calc_crc+0x52>
            }
            else
            {
                crc = crc << 1u;
 8000d50:	89fb      	ldrh	r3, [r7, #14]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000d56:	7b7b      	ldrb	r3, [r7, #13]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	737b      	strb	r3, [r7, #13]
 8000d5c:	7b7b      	ldrb	r3, [r7, #13]
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d9ea      	bls.n	8000d38 <xmodem_calc_crc+0x34>
    while (length)
 8000d62:	887b      	ldrh	r3, [r7, #2]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1d6      	bne.n	8000d16 <xmodem_calc_crc+0x12>
            }
        }
    }
    return crc;
 8000d68:	89fb      	ldrh	r3, [r7, #14]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <xmodem_handle_packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4602      	mov	r2, r0
 8000d82:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000d86:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000d8a:	701a      	strb	r2, [r3, #0]
  xmodem_status status = X_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  uint16_t size = 0u;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
  uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
  uint8_t received_packet_data[X_PACKET_1024_SIZE];
  uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

  /* Get the size of the data. */
  if (X_SOH == header)
 8000d98:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000d9c:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d103      	bne.n	8000dae <xmodem_handle_packet+0x36>
  {
    size = X_PACKET_128_SIZE;
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000dac:	e00e      	b.n	8000dcc <xmodem_handle_packet+0x54>
  }
  else if (X_STX == header)
 8000dae:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000db2:	f2a3 4311 	subw	r3, r3, #1041	; 0x411
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d104      	bne.n	8000dc6 <xmodem_handle_packet+0x4e>
  {
    size = X_PACKET_1024_SIZE;
 8000dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc0:	f8a7 3414 	strh.w	r3, [r7, #1044]	; 0x414
 8000dc4:	e002      	b.n	8000dcc <xmodem_handle_packet+0x54>
  }
  else
  {
    /* Wrong header type. This shoudn't be possible... */
    status |= X_ERROR;
 8000dc6:	23ff      	movs	r3, #255	; 0xff
 8000dc8:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  }

  uart_status comm_status = UART_OK;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  /* Get the packet number, data and CRC from UART. */
  comm_status |= uart_receive(&received_packet_number[0u], X_PACKET_NUMBER_SIZE);
 8000dd2:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe9b 	bl	8000b14 <uart_receive>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000de6:	4313      	orrs	r3, r2
 8000de8:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  comm_status |= uart_receive(&received_packet_data[0u], size);
 8000dec:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fe8c 	bl	8000b14 <uart_receive>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000e04:	4313      	orrs	r3, r2
 8000e06:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  comm_status |= uart_receive(&received_packet_crc[0u], X_PACKET_CRC_SIZE);
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fe7f 	bl	8000b14 <uart_receive>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461a      	mov	r2, r3
 8000e1a:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
  /* Merge the two bytes of CRC. */
  uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
 8000e24:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000e28:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21a      	sxth	r2, r3
 8000e32:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8000e36:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
  /* We calculate it too. */
  uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
 8000e46:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff57 	bl	8000d04 <xmodem_calc_crc>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e

  /* Communication error. */
  if (UART_OK != comm_status)
 8000e5c:	f897 3413 	ldrb.w	r3, [r7, #1043]	; 0x413
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <xmodem_handle_packet+0xf8>
  {
    status |= X_ERROR_UART;
 8000e64:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
  }

  /* If it is the first packet, then erase the memory. */
  if ((X_OK == status) && (false == x_first_packet_received))
 8000e70:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d113      	bne.n	8000ea0 <xmodem_handle_packet+0x128>
 8000e78:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <xmodem_handle_packet+0x1e0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10f      	bne.n	8000ea0 <xmodem_handle_packet+0x128>
  {
    if (FLASH_OK == flash_erase(FLASH_APP_START_ADDRESS))
 8000e80:	4836      	ldr	r0, [pc, #216]	; (8000f5c <xmodem_handle_packet+0x1e4>)
 8000e82:	f7ff fb5b 	bl	800053c <flash_erase>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d103      	bne.n	8000e94 <xmodem_handle_packet+0x11c>
    {
      x_first_packet_received = true;
 8000e8c:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <xmodem_handle_packet+0x1e0>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e005      	b.n	8000ea0 <xmodem_handle_packet+0x128>
    }
    else
    {
      status |= X_ERROR_FLASH;
 8000e94:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
  }

  /* Error handling and flashing. */
  if (X_OK == status)
 8000ea0:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d125      	bne.n	8000ef4 <xmodem_handle_packet+0x17c>
  {
    if (xmodem_packet_number != received_packet_number[0u])
 8000ea8:	f897 240c 	ldrb.w	r2, [r7, #1036]	; 0x40c
 8000eac:	4b2c      	ldr	r3, [pc, #176]	; (8000f60 <xmodem_handle_packet+0x1e8>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d005      	beq.n	8000ec0 <xmodem_handle_packet+0x148>
    {
      /* Packet number counter mismatch. */
      status |= X_ERROR_NUMBER;
 8000eb4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
    if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
 8000ec0:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8000eca:	4413      	add	r3, r2
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d005      	beq.n	8000edc <xmodem_handle_packet+0x164>
    {
      /* The sum of the packet number and packet number complement aren't 255. */
      /* The sum always has to be 255. */
      status |= X_ERROR_NUMBER;
 8000ed0:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
    if (crc_calculated != crc_received)
 8000edc:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8000ee0:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	; 0x410
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d005      	beq.n	8000ef4 <xmodem_handle_packet+0x17c>
    {
      /* The calculated and received CRC are different. */
      status |= X_ERROR_CRC;
 8000ee8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }
  }

    /* Do the actual flashing (if there weren't any errors). */
    if ((X_OK == status) && (FLASH_OK != flash_write(xmodem_actual_flash_address, (uint32_t*)&received_packet_data[0u], (uint32_t)size/4u)))
 8000ef4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d114      	bne.n	8000f26 <xmodem_handle_packet+0x1ae>
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <xmodem_handle_packet+0x1ec>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	; 0x414
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fb3f 	bl	8000592 <flash_write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d005      	beq.n	8000f26 <xmodem_handle_packet+0x1ae>
    {
      /* Flashing error. */
      status |= X_ERROR_FLASH;
 8000f1a:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
    }

  /* Raise the packet number and the address counters (if there weren't any errors). */
  if (X_OK == status)
 8000f26:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10c      	bne.n	8000f48 <xmodem_handle_packet+0x1d0>
  {
    xmodem_packet_number++;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <xmodem_handle_packet+0x1e8>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <xmodem_handle_packet+0x1e8>)
 8000f38:	701a      	strb	r2, [r3, #0]
    xmodem_actual_flash_address += size;
 8000f3a:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	; 0x414
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <xmodem_handle_packet+0x1ec>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <xmodem_handle_packet+0x1ec>)
 8000f46:	6013      	str	r3, [r2, #0]
  }

  return status;
 8000f48:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000b4 	.word	0x200000b4
 8000f5c:	08040000 	.word	0x08040000
 8000f60:	20000004 	.word	0x20000004
 8000f64:	200000b0 	.word	0x200000b0

08000f68 <xmodem_error_handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
  xmodem_status status = X_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
  /* Raise the error counter. */
  (*error_number)++;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	701a      	strb	r2, [r3, #0]
  /* If the counter reached the max value, then abort. */
  if ((*error_number) >= max_error_number)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	78fa      	ldrb	r2, [r7, #3]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d808      	bhi.n	8000fa0 <xmodem_error_handler+0x38>
  {
    /* Graceful abort. */
    (void)uart_transmit_ch(X_CAN);
 8000f8e:	2018      	movs	r0, #24
 8000f90:	f7ff fe02 	bl	8000b98 <uart_transmit_ch>
    (void)uart_transmit_ch(X_CAN);
 8000f94:	2018      	movs	r0, #24
 8000f96:	f7ff fdff 	bl	8000b98 <uart_transmit_ch>
    status = X_ERROR;
 8000f9a:	23ff      	movs	r3, #255	; 0xff
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e004      	b.n	8000faa <xmodem_error_handler+0x42>
  }
  /* Otherwise send a NAK for a repeat. */
  else
  {
    (void)uart_transmit_ch(X_NAK);
 8000fa0:	2015      	movs	r0, #21
 8000fa2:	f7ff fdf9 	bl	8000b98 <uart_transmit_ch>
    status = X_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fba:	490e      	ldr	r1, [pc, #56]	; (8000ff4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd0:	4c0b      	ldr	r4, [pc, #44]	; (8001000 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fde:	f7ff fd87 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f002 fd71 	bl	8003ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe6:	f7ff fbd1 	bl	800078c <main>
  bx  lr    
 8000fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ff8:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 8000ffc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001000:	200000d8 	.word	0x200000d8

08001004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC_IRQHandler>

08001006 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100a:	2003      	movs	r0, #3
 800100c:	f000 f93e 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001010:	2000      	movs	r0, #0
 8001012:	f000 f839 	bl	8001088 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001016:	f7ff fcd9 	bl	80009cc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_DeInit+0x54>)
 8001026:	f04f 32ff 	mov.w	r2, #4294967295
 800102a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_DeInit+0x54>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_DeInit+0x54>)
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_DeInit+0x54>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_DeInit+0x54>)
 8001042:	f04f 32ff 	mov.w	r2, #4294967295
 8001046:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001048:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_DeInit+0x54>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_DeInit+0x54>)
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_DeInit+0x54>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_DeInit+0x54>)
 800105e:	f04f 32ff 	mov.w	r2, #4294967295
 8001062:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_DeInit+0x54>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800106a:	f000 f805 	bl	8001078 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800

08001078 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f917 	bl	80012da <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f8ed 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000000c 	.word	0x2000000c
 800110c:	200000b8 	.word	0x200000b8

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000b8 	.word	0x200000b8

08001128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <__NVIC_SetPriorityGrouping+0x40>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001144:	4013      	ands	r3, r2
 8001146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	4313      	orrs	r3, r2
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <__NVIC_SetPriorityGrouping+0x40>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	05fa0000 	.word	0x05fa0000

08001170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <__NVIC_GetPriorityGrouping+0x18>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	f003 0307 	and.w	r3, r3, #7
}
 800117e:	4618      	mov	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff47 	bl	8001128 <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff5c 	bl	8001170 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffb0 	bl	8001248 <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff ff06 	bl	8001110 <HAL_GetTick>
 8001304:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d008      	beq.n	8001324 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e052      	b.n	80013ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0216 	bic.w	r2, r2, #22
 8001332:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001342:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d103      	bne.n	8001354 <HAL_DMA_Abort+0x62>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001350:	2b00      	cmp	r3, #0
 8001352:	d007      	beq.n	8001364 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0208 	bic.w	r2, r2, #8
 8001362:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001374:	e013      	b.n	800139e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001376:	f7ff fecb 	bl	8001110 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b05      	cmp	r3, #5
 8001382:	d90c      	bls.n	800139e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2220      	movs	r2, #32
 8001388:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e015      	b.n	80013ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e4      	bne.n	8001376 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b0:	223f      	movs	r2, #63	; 0x3f
 80013b2:	409a      	lsls	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013fe:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_FLASH_Program+0xb0>)
 8001400:	7d1b      	ldrb	r3, [r3, #20]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_FLASH_Program+0x1e>
 8001406:	2302      	movs	r3, #2
 8001408:	e043      	b.n	8001492 <HAL_FLASH_Program+0xa6>
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_FLASH_Program+0xb0>)
 800140c:	2201      	movs	r2, #1
 800140e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001410:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001414:	f000 f878 	bl	8001508 <FLASH_WaitForLastOperation>
 8001418:	4603      	mov	r3, r0
 800141a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d133      	bne.n	800148a <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d823      	bhi.n	8001470 <HAL_FLASH_Program+0x84>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <HAL_FLASH_Program+0x44>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001441 	.word	0x08001441
 8001434:	0800144d 	.word	0x0800144d
 8001438:	08001459 	.word	0x08001459
 800143c:	08001465 	.word	0x08001465
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001440:	783b      	ldrb	r3, [r7, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	68b8      	ldr	r0, [r7, #8]
 8001446:	f000 f921 	bl	800168c <FLASH_Program_Byte>
        break;
 800144a:	e012      	b.n	8001472 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800144c:	883b      	ldrh	r3, [r7, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	68b8      	ldr	r0, [r7, #8]
 8001452:	f000 f8f5 	bl	8001640 <FLASH_Program_HalfWord>
        break;
 8001456:	e00c      	b.n	8001472 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	68b8      	ldr	r0, [r7, #8]
 800145e:	f000 f8c9 	bl	80015f4 <FLASH_Program_Word>
        break;
 8001462:	e006      	b.n	8001472 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001468:	68b8      	ldr	r0, [r7, #8]
 800146a:	f000 f88d 	bl	8001588 <FLASH_Program_DoubleWord>
        break;
 800146e:	e000      	b.n	8001472 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001470:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001472:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001476:	f000 f847 	bl	8001508 <FLASH_WaitForLastOperation>
 800147a:	4603      	mov	r3, r0
 800147c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_FLASH_Program+0xb4>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_FLASH_Program+0xb4>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_FLASH_Program+0xb0>)
 800148c:	2200      	movs	r2, #0
 800148e:	751a      	strb	r2, [r3, #20]

  return status;
 8001490:	7dfb      	ldrb	r3, [r7, #23]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200000bc 	.word	0x200000bc
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_FLASH_Unlock+0x38>)
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da0b      	bge.n	80014ce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_FLASH_Unlock+0x38>)
 80014b8:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_FLASH_Unlock+0x3c>)
 80014ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_FLASH_Unlock+0x38>)
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_FLASH_Unlock+0x40>)
 80014c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_FLASH_Unlock+0x38>)
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	da01      	bge.n	80014ce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40023c00 	.word	0x40023c00
 80014e0:	45670123 	.word	0x45670123
 80014e4:	cdef89ab 	.word	0xcdef89ab

080014e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_FLASH_Lock+0x1c>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_FLASH_Lock+0x1c>)
 80014f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014f6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	40023c00 	.word	0x40023c00

08001508 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <FLASH_WaitForLastOperation+0x78>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800151a:	f7ff fdf9 	bl	8001110 <HAL_GetTick>
 800151e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001520:	e010      	b.n	8001544 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d00c      	beq.n	8001544 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d007      	beq.n	8001540 <FLASH_WaitForLastOperation+0x38>
 8001530:	f7ff fdee 	bl	8001110 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d201      	bcs.n	8001544 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e019      	b.n	8001578 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <FLASH_WaitForLastOperation+0x7c>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1e8      	bne.n	8001522 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <FLASH_WaitForLastOperation+0x7c>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800155c:	f000 f8ba 	bl	80016d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e009      	b.n	8001578 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <FLASH_WaitForLastOperation+0x7c>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <FLASH_WaitForLastOperation+0x7c>)
 8001572:	2201      	movs	r2, #1
 8001574:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
  
}  
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200000bc 	.word	0x200000bc
 8001584:	40023c00 	.word	0x40023c00

08001588 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <FLASH_Program_DoubleWord+0x68>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	4a15      	ldr	r2, [pc, #84]	; (80015f0 <FLASH_Program_DoubleWord+0x68>)
 800159a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800159e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <FLASH_Program_DoubleWord+0x68>)
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <FLASH_Program_DoubleWord+0x68>)
 80015a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80015aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <FLASH_Program_DoubleWord+0x68>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	4a0f      	ldr	r2, [pc, #60]	; (80015f0 <FLASH_Program_DoubleWord+0x68>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80015be:	f3bf 8f6f 	isb	sy
}
 80015c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80015c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	000a      	movs	r2, r1
 80015d2:	2300      	movs	r3, #0
 80015d4:	68f9      	ldr	r1, [r7, #12]
 80015d6:	3104      	adds	r1, #4
 80015d8:	4613      	mov	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015dc:	f3bf 8f4f 	dsb	sy
}
 80015e0:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80015e2:	bf00      	nop
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00

080015f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <FLASH_Program_Word+0x48>)
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <FLASH_Program_Word+0x48>)
 8001604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001608:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <FLASH_Program_Word+0x48>)
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <FLASH_Program_Word+0x48>)
 8001610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <FLASH_Program_Word+0x48>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <FLASH_Program_Word+0x48>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001628:	f3bf 8f4f 	dsb	sy
}
 800162c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <FLASH_Program_HalfWord+0x48>)
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <FLASH_Program_HalfWord+0x48>)
 8001652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001656:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <FLASH_Program_HalfWord+0x48>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <FLASH_Program_HalfWord+0x48>)
 800165e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <FLASH_Program_HalfWord+0x48>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <FLASH_Program_HalfWord+0x48>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001676:	f3bf 8f4f 	dsb	sy
}
 800167a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40023c00 	.word	0x40023c00

0800168c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <FLASH_Program_Byte+0x44>)
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <FLASH_Program_Byte+0x44>)
 800169e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <FLASH_Program_Byte+0x44>)
 80016a6:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <FLASH_Program_Byte+0x44>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <FLASH_Program_Byte+0x44>)
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <FLASH_Program_Byte+0x44>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	78fa      	ldrb	r2, [r7, #3]
 80016bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016be:	f3bf 8f4f 	dsb	sy
}
 80016c2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <FLASH_SetErrorCode+0x8c>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <FLASH_SetErrorCode+0x90>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f043 0320 	orr.w	r3, r3, #32
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <FLASH_SetErrorCode+0x90>)
 80016ee:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <FLASH_SetErrorCode+0x8c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <FLASH_SetErrorCode+0x90>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f043 0310 	orr.w	r3, r3, #16
 8001704:	4a17      	ldr	r2, [pc, #92]	; (8001764 <FLASH_SetErrorCode+0x90>)
 8001706:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <FLASH_SetErrorCode+0x8c>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <FLASH_SetErrorCode+0x90>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	4a11      	ldr	r2, [pc, #68]	; (8001764 <FLASH_SetErrorCode+0x90>)
 800171e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <FLASH_SetErrorCode+0x8c>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <FLASH_SetErrorCode+0x90>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <FLASH_SetErrorCode+0x90>)
 8001736:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <FLASH_SetErrorCode+0x8c>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <FLASH_SetErrorCode+0x90>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <FLASH_SetErrorCode+0x90>)
 800174e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <FLASH_SetErrorCode+0x8c>)
 8001752:	22f2      	movs	r2, #242	; 0xf2
 8001754:	60da      	str	r2, [r3, #12]
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	40023c00 	.word	0x40023c00
 8001764:	200000bc 	.word	0x200000bc

08001768 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_FLASHEx_Erase+0xd4>)
 800177c:	7d1b      	ldrb	r3, [r3, #20]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_FLASHEx_Erase+0x1e>
 8001782:	2302      	movs	r3, #2
 8001784:	e056      	b.n	8001834 <HAL_FLASHEx_Erase+0xcc>
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_FLASHEx_Erase+0xd4>)
 8001788:	2201      	movs	r2, #1
 800178a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800178c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001790:	f7ff feba 	bl	8001508 <FLASH_WaitForLastOperation>
 8001794:	4603      	mov	r3, r0
 8001796:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d146      	bne.n	800182c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d115      	bne.n	80017da <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4610      	mov	r0, r2
 80017bc:	f000 f844 	bl	8001848 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017c4:	f7ff fea0 	bl	8001508 <FLASH_WaitForLastOperation>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_FLASHEx_Erase+0xd8>)
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	491b      	ldr	r1, [pc, #108]	; (8001840 <HAL_FLASHEx_Erase+0xd8>)
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_FLASHEx_Erase+0xdc>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	610b      	str	r3, [r1, #16]
 80017d8:	e028      	b.n	800182c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	e01c      	b.n	800181c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4619      	mov	r1, r3
 80017ea:	68b8      	ldr	r0, [r7, #8]
 80017ec:	f000 f868 	bl	80018c0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80017f4:	f7ff fe88 	bl	8001508 <FLASH_WaitForLastOperation>
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_FLASHEx_Erase+0xd8>)
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_FLASHEx_Erase+0xd8>)
 8001802:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001806:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	601a      	str	r2, [r3, #0]
          break;
 8001814:	e00a      	b.n	800182c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3301      	adds	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4413      	add	r3, r2
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3da      	bcc.n	80017e2 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_FLASHEx_Erase+0xd4>)
 800182e:	2200      	movs	r2, #0
 8001830:	751a      	strb	r2, [r3, #20]

  return status;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200000bc 	.word	0x200000bc
 8001840:	40023c00 	.word	0x40023c00
 8001844:	ffff7ffb 	.word	0xffff7ffb

08001848 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <FLASH_MassErase+0x74>)
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	4a18      	ldr	r2, [pc, #96]	; (80018bc <FLASH_MassErase+0x74>)
 800185a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800185e:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <FLASH_MassErase+0x74>)
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	4914      	ldr	r1, [pc, #80]	; (80018bc <FLASH_MassErase+0x74>)
 800186c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001870:	4313      	orrs	r3, r2
 8001872:	610b      	str	r3, [r1, #16]
 8001874:	e00f      	b.n	8001896 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d106      	bne.n	800188a <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <FLASH_MassErase+0x74>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <FLASH_MassErase+0x74>)
 8001882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001886:	6113      	str	r3, [r2, #16]
 8001888:	e005      	b.n	8001896 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <FLASH_MassErase+0x74>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <FLASH_MassErase+0x74>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <FLASH_MassErase+0x74>)
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	4313      	orrs	r3, r2
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <FLASH_MassErase+0x74>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80018a8:	f3bf 8f4f 	dsb	sy
}
 80018ac:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e010      	b.n	80018fe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d103      	bne.n	80018ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80018e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	e009      	b.n	80018fe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d103      	bne.n	80018f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80018f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e002      	b.n	80018fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80018f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018fc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b0b      	cmp	r3, #11
 8001902:	d902      	bls.n	800190a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
 8001908:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	4a14      	ldr	r2, [pc, #80]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 8001910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001914:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	4911      	ldr	r1, [pc, #68]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 8001928:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800192c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4313      	orrs	r3, r2
 8001938:	4a09      	ldr	r2, [pc, #36]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <FLASH_Erase_Sector+0xa0>)
 8001946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800194c:	f3bf 8f4f 	dsb	sy
}
 8001950:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e175      	b.n	8001c70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001984:	2201      	movs	r2, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	f040 8164 	bne.w	8001c6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d00b      	beq.n	80019c2 <HAL_GPIO_Init+0x5e>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b6:	2b11      	cmp	r3, #17
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d130      	bne.n	8001a24 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 0201 	and.w	r2, r3, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x100>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b12      	cmp	r3, #18
 8001a62:	d123      	bne.n	8001aac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	69b9      	ldr	r1, [r7, #24]
 8001aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80be 	beq.w	8001c6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_GPIO_Init+0x324>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b06:	4a61      	ldr	r2, [pc, #388]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a58      	ldr	r2, [pc, #352]	; (8001c90 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d037      	beq.n	8001ba2 <HAL_GPIO_Init+0x23e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a57      	ldr	r2, [pc, #348]	; (8001c94 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d031      	beq.n	8001b9e <HAL_GPIO_Init+0x23a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a56      	ldr	r2, [pc, #344]	; (8001c98 <HAL_GPIO_Init+0x334>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02b      	beq.n	8001b9a <HAL_GPIO_Init+0x236>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a55      	ldr	r2, [pc, #340]	; (8001c9c <HAL_GPIO_Init+0x338>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d025      	beq.n	8001b96 <HAL_GPIO_Init+0x232>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a54      	ldr	r2, [pc, #336]	; (8001ca0 <HAL_GPIO_Init+0x33c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01f      	beq.n	8001b92 <HAL_GPIO_Init+0x22e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a53      	ldr	r2, [pc, #332]	; (8001ca4 <HAL_GPIO_Init+0x340>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0x22a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HAL_GPIO_Init+0x344>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x226>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_GPIO_Init+0x348>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x222>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a50      	ldr	r2, [pc, #320]	; (8001cb0 <HAL_GPIO_Init+0x34c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x21e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_GPIO_Init+0x350>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x21a>
 8001b7a:	2309      	movs	r3, #9
 8001b7c:	e012      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b7e:	230a      	movs	r3, #10
 8001b80:	e010      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b82:	2308      	movs	r3, #8
 8001b84:	e00e      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00c      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00a      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x240>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <HAL_GPIO_Init+0x328>)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	3302      	adds	r3, #2
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be6:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c10:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c16:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3a:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <HAL_GPIO_Init+0x354>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	f67f ae86 	bls.w	8001984 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3724      	adds	r7, #36	; 0x24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020400 	.word	0x40020400
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40021400 	.word	0x40021400
 8001ca8:	40021800 	.word	0x40021800
 8001cac:	40021c00 	.word	0x40021c00
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40022400 	.word	0x40022400
 8001cb8:	40013c00 	.word	0x40013c00

08001cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ccc:	787b      	ldrb	r3, [r7, #1]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cd8:	e003      	b.n	8001ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	041a      	lsls	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	619a      	str	r2, [r3, #24]
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e29b      	b.n	800223e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8087 	beq.w	8001e22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d14:	4b96      	ldr	r3, [pc, #600]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d00c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d20:	4b93      	ldr	r3, [pc, #588]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d112      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62>
 8001d2c:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d38:	d10b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3a:	4b8d      	ldr	r3, [pc, #564]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d06c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x130>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d168      	bne.n	8001e20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e275      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x7a>
 8001d5c:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a83      	ldr	r2, [pc, #524]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	e02e      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x9c>
 8001d72:	4b7f      	ldr	r3, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a7e      	ldr	r2, [pc, #504]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	4b7c      	ldr	r3, [pc, #496]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7b      	ldr	r2, [pc, #492]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	e01d      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0xc0>
 8001d96:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a75      	ldr	r2, [pc, #468]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a72      	ldr	r2, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e00b      	b.n	8001dc8 <HAL_RCC_OscConfig+0xd8>
 8001db0:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a6b      	ldr	r2, [pc, #428]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d013      	beq.n	8001df8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f99e 	bl	8001110 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff f99a 	bl	8001110 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e229      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe8>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f98a 	bl	8001110 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff f986 	bl	8001110 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e215      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x110>
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d069      	beq.n	8001f02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e2e:	4b50      	ldr	r3, [pc, #320]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3a:	4b4d      	ldr	r3, [pc, #308]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d11c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x190>
 8001e46:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x17a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d001      	beq.n	8001e6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e1e9      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	493d      	ldr	r1, [pc, #244]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	e040      	b.n	8001f02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d023      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f93c 	bl	8001110 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff f938 	bl	8001110 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1c7      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4929      	ldr	r1, [pc, #164]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
 8001ece:	e018      	b.n	8001f02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a26      	ldr	r2, [pc, #152]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001ed6:	f023 0301 	bic.w	r3, r3, #1
 8001eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f918 	bl	8001110 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff f914 	bl	8001110 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1a3      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d038      	beq.n	8001f80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d019      	beq.n	8001f4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1a:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7ff f8f5 	bl	8001110 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7ff f8f1 	bl	8001110 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e180      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x23a>
 8001f48:	e01a      	b.n	8001f80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_RCC_OscConfig+0x280>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f8db 	bl	8001110 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f8d7 	bl	8001110 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d903      	bls.n	8001f74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e166      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
 8001f70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	4b92      	ldr	r3, [pc, #584]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a4 	beq.w	80020d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b8c      	ldr	r3, [pc, #560]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10d      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a88      	ldr	r2, [pc, #544]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b86      	ldr	r3, [pc, #536]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb6:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <HAL_RCC_OscConfig+0x4d4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d118      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fc2:	4b80      	ldr	r3, [pc, #512]	; (80021c4 <HAL_RCC_OscConfig+0x4d4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a7f      	ldr	r2, [pc, #508]	; (80021c4 <HAL_RCC_OscConfig+0x4d4>)
 8001fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fce:	f7ff f89f 	bl	8001110 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd6:	f7ff f89b 	bl	8001110 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b64      	cmp	r3, #100	; 0x64
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e12a      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe8:	4b76      	ldr	r3, [pc, #472]	; (80021c4 <HAL_RCC_OscConfig+0x4d4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x31a>
 8001ffc:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a6f      	ldr	r2, [pc, #444]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	e02d      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x33c>
 8002012:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	4a6a      	ldr	r2, [pc, #424]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6713      	str	r3, [r2, #112]	; 0x70
 800201e:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002024:	f023 0304 	bic.w	r3, r3, #4
 8002028:	6713      	str	r3, [r2, #112]	; 0x70
 800202a:	e01c      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b05      	cmp	r3, #5
 8002032:	d10c      	bne.n	800204e <HAL_RCC_OscConfig+0x35e>
 8002034:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a61      	ldr	r2, [pc, #388]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	4b5f      	ldr	r3, [pc, #380]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a5e      	ldr	r2, [pc, #376]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	e00b      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
 800204e:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	4a5b      	ldr	r2, [pc, #364]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	; 0x70
 800205a:	4b59      	ldr	r3, [pc, #356]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a58      	ldr	r2, [pc, #352]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	f023 0304 	bic.w	r3, r3, #4
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d015      	beq.n	800209a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7ff f84f 	bl	8001110 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff f84b 	bl	8001110 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0d8      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208c:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ee      	beq.n	8002076 <HAL_RCC_OscConfig+0x386>
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209a:	f7ff f839 	bl	8001110 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff f835 	bl	8001110 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0c2      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1ee      	bne.n	80020a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d105      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a3c      	ldr	r2, [pc, #240]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80ae 	beq.w	800223c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e0:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d06d      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d14b      	bne.n	800218c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a31      	ldr	r2, [pc, #196]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7ff f806 	bl	8001110 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff f802 	bl	8001110 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e091      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	491b      	ldr	r1, [pc, #108]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe ffd4 	bl	8001110 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7fe ffd0 	bl	8001110 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e05f      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x47c>
 800218a:	e057      	b.n	800223c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 8002192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe ffba 	bl	8001110 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7fe ffb6 	bl	8001110 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e045      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4b0>
 80021be:	e03d      	b.n	800223c <HAL_RCC_OscConfig+0x54c>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <HAL_RCC_OscConfig+0x558>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d030      	beq.n	8002238 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d129      	bne.n	8002238 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d122      	bne.n	8002238 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002200:	4293      	cmp	r3, r2
 8002202:	d119      	bne.n	8002238 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d10f      	bne.n	8002238 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d107      	bne.n	8002238 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0d0      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d910      	bls.n	8002294 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b67      	ldr	r3, [pc, #412]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	4965      	ldr	r1, [pc, #404]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80022b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80022ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d040      	beq.n	8002370 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d115      	bne.n	800232e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e073      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06b      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4936      	ldr	r1, [pc, #216]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002340:	f7fe fee6 	bl	8001110 <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7fe fee2 	bl	8001110 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e053      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d210      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 020f 	bic.w	r2, r3, #15
 8002386:	4922      	ldr	r1, [pc, #136]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f821 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1c8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	490a      	ldr	r1, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1cc>)
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1d0>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1d4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fe42 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00
 8002414:	40023800 	.word	0x40023800
 8002418:	08003c34 	.word	0x08003c34
 800241c:	20000000 	.word	0x20000000
 8002420:	20000008 	.word	0x20000008

08002424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002428:	b090      	sub	sp, #64	; 0x40
 800242a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
 8002430:	2300      	movs	r3, #0
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002434:	2300      	movs	r3, #0
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243c:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d00d      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x40>
 8002448:	2b08      	cmp	r3, #8
 800244a:	f200 80a1 	bhi.w	8002590 <HAL_RCC_GetSysClockFreq+0x16c>
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x34>
 8002452:	2b04      	cmp	r3, #4
 8002454:	d003      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x3a>
 8002456:	e09b      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800245c:	e09b      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245e:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002460:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002462:	e098      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800246e:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d028      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	099b      	lsrs	r3, r3, #6
 8002480:	2200      	movs	r2, #0
 8002482:	623b      	str	r3, [r7, #32]
 8002484:	627a      	str	r2, [r7, #36]	; 0x24
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800248c:	2100      	movs	r1, #0
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002490:	fb03 f201 	mul.w	r2, r3, r1
 8002494:	2300      	movs	r3, #0
 8002496:	fb00 f303 	mul.w	r3, r0, r3
 800249a:	4413      	add	r3, r2
 800249c:	4a43      	ldr	r2, [pc, #268]	; (80025ac <HAL_RCC_GetSysClockFreq+0x188>)
 800249e:	fba0 1202 	umull	r1, r2, r0, r2
 80024a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024a4:	460a      	mov	r2, r1
 80024a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80024a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024aa:	4413      	add	r3, r2
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	2200      	movs	r2, #0
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	61fa      	str	r2, [r7, #28]
 80024b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024be:	f7fd febb 	bl	8000238 <__aeabi_uldivmod>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4613      	mov	r3, r2
 80024c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ca:	e053      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	099b      	lsrs	r3, r3, #6
 80024d2:	2200      	movs	r2, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	617a      	str	r2, [r7, #20]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024de:	f04f 0b00 	mov.w	fp, #0
 80024e2:	4652      	mov	r2, sl
 80024e4:	465b      	mov	r3, fp
 80024e6:	f04f 0000 	mov.w	r0, #0
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	0159      	lsls	r1, r3, #5
 80024f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f4:	0150      	lsls	r0, r2, #5
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	ebb2 080a 	subs.w	r8, r2, sl
 80024fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800250e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002512:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002516:	ebb2 0408 	subs.w	r4, r2, r8
 800251a:	eb63 0509 	sbc.w	r5, r3, r9
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	00eb      	lsls	r3, r5, #3
 8002528:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800252c:	00e2      	lsls	r2, r4, #3
 800252e:	4614      	mov	r4, r2
 8002530:	461d      	mov	r5, r3
 8002532:	eb14 030a 	adds.w	r3, r4, sl
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	eb45 030b 	adc.w	r3, r5, fp
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800254a:	4629      	mov	r1, r5
 800254c:	028b      	lsls	r3, r1, #10
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002554:	4621      	mov	r1, r4
 8002556:	028a      	lsls	r2, r1, #10
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	2200      	movs	r2, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	60fa      	str	r2, [r7, #12]
 8002564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002568:	f7fd fe66 	bl	8000238 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002584:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002598:	4618      	mov	r0, r3
 800259a:	3740      	adds	r7, #64	; 0x40
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	017d7840 	.word	0x017d7840

080025b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000000 	.word	0x20000000

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025cc:	f7ff fff0 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0a9b      	lsrs	r3, r3, #10
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	; (80025ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08003c44 	.word	0x08003c44

080025f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f4:	f7ff ffdc 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0b5b      	lsrs	r3, r3, #13
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08003c44 	.word	0x08003c44

08002618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002640:	4b69      	ldr	r3, [pc, #420]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a68      	ldr	r2, [pc, #416]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800264a:	6093      	str	r3, [r2, #8]
 800264c:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002654:	4964      	ldr	r1, [pc, #400]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d017      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002672:	4b5d      	ldr	r3, [pc, #372]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002678:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	4959      	ldr	r1, [pc, #356]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002690:	d101      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002692:	2301      	movs	r3, #1
 8002694:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d017      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ae:	4b4e      	ldr	r3, [pc, #312]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	494a      	ldr	r1, [pc, #296]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026cc:	d101      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 808b 	beq.w	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026fc:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	4a39      	ldr	r2, [pc, #228]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002706:	6413      	str	r3, [r2, #64]	; 0x40
 8002708:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002714:	4b35      	ldr	r3, [pc, #212]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a34      	ldr	r2, [pc, #208]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800271a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7fe fcf6 	bl	8001110 <HAL_GetTick>
 8002724:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002728:	f7fe fcf2 	bl	8001110 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e38f      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d035      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	d02e      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002764:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800277a:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800278c:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d114      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fcba 	bl	8001110 <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7fe fcb6 	bl	8001110 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e351      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0ee      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ce:	d111      	bne.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027de:	400b      	ands	r3, r1
 80027e0:	4901      	ldr	r1, [pc, #4]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
 80027e6:	e00b      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000
 80027f0:	0ffffcff 	.word	0x0ffffcff
 80027f4:	4bac      	ldr	r3, [pc, #688]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4aab      	ldr	r2, [pc, #684]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027fe:	6093      	str	r3, [r2, #8]
 8002800:	4ba9      	ldr	r3, [pc, #676]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	49a6      	ldr	r1, [pc, #664]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280e:	4313      	orrs	r3, r2
 8002810:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	d010      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800281e:	4ba2      	ldr	r3, [pc, #648]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002820:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002824:	4aa0      	ldr	r2, [pc, #640]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800282e:	4b9e      	ldr	r3, [pc, #632]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002830:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	499b      	ldr	r1, [pc, #620]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284c:	4b96      	ldr	r3, [pc, #600]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285a:	4993      	ldr	r1, [pc, #588]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286e:	4b8e      	ldr	r3, [pc, #568]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287c:	498a      	ldr	r1, [pc, #552]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002890:	4b85      	ldr	r3, [pc, #532]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002896:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289e:	4982      	ldr	r1, [pc, #520]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b2:	4b7d      	ldr	r3, [pc, #500]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4979      	ldr	r1, [pc, #484]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d4:	4b74      	ldr	r3, [pc, #464]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4971      	ldr	r1, [pc, #452]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f6:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f023 020c 	bic.w	r2, r3, #12
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002904:	4968      	ldr	r1, [pc, #416]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002918:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4960      	ldr	r1, [pc, #384]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800293a:	4b5b      	ldr	r3, [pc, #364]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002948:	4957      	ldr	r1, [pc, #348]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800295c:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	494f      	ldr	r1, [pc, #316]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	4946      	ldr	r1, [pc, #280]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	493e      	ldr	r1, [pc, #248]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029c2:	4b39      	ldr	r3, [pc, #228]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d0:	4935      	ldr	r1, [pc, #212]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f2:	492d      	ldr	r1, [pc, #180]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d011      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a06:	4b28      	ldr	r3, [pc, #160]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a14:	4924      	ldr	r1, [pc, #144]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a24:	d101      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a46:	4b18      	ldr	r3, [pc, #96]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a54:	4914      	ldr	r1, [pc, #80]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00b      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a78:	490b      	ldr	r1, [pc, #44]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00f      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9c:	4902      	ldr	r1, [pc, #8]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002aa4:	e002      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ab8:	4b8a      	ldr	r3, [pc, #552]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002abe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	4986      	ldr	r1, [pc, #536]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002adc:	4b81      	ldr	r3, [pc, #516]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aec:	497d      	ldr	r1, [pc, #500]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d006      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80d6 	beq.w	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b08:	4b76      	ldr	r3, [pc, #472]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a75      	ldr	r2, [pc, #468]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b14:	f7fe fafc 	bl	8001110 <HAL_GetTick>
 8002b18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b1c:	f7fe faf8 	bl	8001110 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e195      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d021      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11d      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b5c:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b62:	0e1b      	lsrs	r3, r3, #24
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	019a      	lsls	r2, r3, #6
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	071b      	lsls	r3, r3, #28
 8002b82:	4958      	ldr	r1, [pc, #352]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02e      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb4:	d129      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bb6:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bc4:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bca:	0f1b      	lsrs	r3, r3, #28
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	019a      	lsls	r2, r3, #6
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	041b      	lsls	r3, r3, #16
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	061b      	lsls	r3, r3, #24
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	071b      	lsls	r3, r3, #28
 8002bea:	493e      	ldr	r1, [pc, #248]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bf2:	4b3c      	ldr	r3, [pc, #240]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf8:	f023 021f 	bic.w	r2, r3, #31
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	3b01      	subs	r3, #1
 8002c02:	4938      	ldr	r1, [pc, #224]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01d      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c16:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1c:	0e1b      	lsrs	r3, r3, #24
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c24:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2a:	0f1b      	lsrs	r3, r3, #28
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	019a      	lsls	r2, r3, #6
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	071b      	lsls	r3, r3, #28
 8002c4a:	4926      	ldr	r1, [pc, #152]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d011      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	019a      	lsls	r2, r3, #6
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	071b      	lsls	r3, r3, #28
 8002c7a:	491a      	ldr	r1, [pc, #104]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a17      	ldr	r2, [pc, #92]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8e:	f7fe fa3f 	bl	8001110 <HAL_GetTick>
 8002c92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c96:	f7fe fa3b 	bl	8001110 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	; 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0d8      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	f040 80ce 	bne.w	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fa22 	bl	8001110 <HAL_GetTick>
 8002ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cd0:	f7fe fa1e 	bl	8001110 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b64      	cmp	r3, #100	; 0x64
 8002cdc:	d904      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0bb      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce8:	4b5e      	ldr	r3, [pc, #376]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d0ec      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02e      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d12a      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	0f1b      	lsrs	r3, r3, #28
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	019a      	lsls	r2, r3, #6
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	071b      	lsls	r3, r3, #28
 8002d52:	4944      	ldr	r1, [pc, #272]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d5a:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	493d      	ldr	r1, [pc, #244]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d88:	d11d      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d8a:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	0e1b      	lsrs	r3, r3, #24
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	0f1b      	lsrs	r3, r3, #28
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	019a      	lsls	r2, r3, #6
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	431a      	orrs	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	061b      	lsls	r3, r3, #24
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	071b      	lsls	r3, r3, #28
 8002dbe:	4929      	ldr	r1, [pc, #164]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d028      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	0e1b      	lsrs	r3, r3, #24
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	019a      	lsls	r2, r3, #6
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	061b      	lsls	r3, r3, #24
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	071b      	lsls	r3, r3, #28
 8002e06:	4917      	ldr	r1, [pc, #92]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	4911      	ldr	r1, [pc, #68]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe f96e 	bl	8001110 <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e38:	f7fe f96a 	bl	8001110 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e007      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e56:	d1ef      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e040      	b.n	8002efc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fd fdc2 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	; 0x24
 8002e94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa42 	bl	8003330 <UART_SetConfig>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e022      	b.n	8002efc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fc9a 	bl	80037f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fd21 	bl	800393c <UART_CheckIdleState>
 8002efa:	4603      	mov	r3, r0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	f040 8081 	bne.w	8003020 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_UART_Transmit+0x26>
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e079      	b.n	8003022 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x38>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e072      	b.n	8003022 <HAL_UART_Transmit+0x11e>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2221      	movs	r2, #33	; 0x21
 8002f50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f52:	f7fe f8dd 	bl	8001110 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	88fa      	ldrh	r2, [r7, #6]
 8002f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d108      	bne.n	8002f84 <HAL_UART_Transmit+0x80>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e003      	b.n	8002f8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f94:	e02c      	b.n	8002ff0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fd14 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e038      	b.n	8003022 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10b      	bne.n	8002fce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3302      	adds	r3, #2
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	e007      	b.n	8002fde <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1cc      	bne.n	8002f96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2200      	movs	r2, #0
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fce1 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e005      	b.n	8003022 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b08a      	sub	sp, #40	; 0x28
 800302e:	af02      	add	r7, sp, #8
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303e:	2b20      	cmp	r3, #32
 8003040:	f040 80be 	bne.w	80031c0 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_UART_Receive+0x26>
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0b6      	b.n	80031c2 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_UART_Receive+0x38>
 800305e:	2302      	movs	r3, #2
 8003060:	e0af      	b.n	80031c2 <HAL_UART_Receive+0x198>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2222      	movs	r2, #34	; 0x22
 8003076:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800307e:	f7fe f847 	bl	8001110 <HAL_GetTick>
 8003082:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309c:	d10e      	bne.n	80030bc <HAL_UART_Receive+0x92>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <HAL_UART_Receive+0x88>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80030ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030b0:	e02d      	b.n	800310e <HAL_UART_Receive+0xe4>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	22ff      	movs	r2, #255	; 0xff
 80030b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030ba:	e028      	b.n	800310e <HAL_UART_Receive+0xe4>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10d      	bne.n	80030e0 <HAL_UART_Receive+0xb6>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_UART_Receive+0xac>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030d4:	e01b      	b.n	800310e <HAL_UART_Receive+0xe4>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	227f      	movs	r2, #127	; 0x7f
 80030da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030de:	e016      	b.n	800310e <HAL_UART_Receive+0xe4>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030e8:	d10d      	bne.n	8003106 <HAL_UART_Receive+0xdc>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d104      	bne.n	80030fc <HAL_UART_Receive+0xd2>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	227f      	movs	r2, #127	; 0x7f
 80030f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80030fa:	e008      	b.n	800310e <HAL_UART_Receive+0xe4>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	223f      	movs	r2, #63	; 0x3f
 8003100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003104:	e003      	b.n	800310e <HAL_UART_Receive+0xe4>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003114:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	d108      	bne.n	8003132 <HAL_UART_Receive+0x108>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	e003      	b.n	800313a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003142:	e032      	b.n	80031aa <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2200      	movs	r2, #0
 800314c:	2120      	movs	r1, #32
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fc3d 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e031      	b.n	80031c2 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10c      	bne.n	800317e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	b29a      	uxth	r2, r3
 800316c:	8a7b      	ldrh	r3, [r7, #18]
 800316e:	4013      	ands	r3, r2
 8003170:	b29a      	uxth	r2, r3
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	3302      	adds	r3, #2
 800317a:	61bb      	str	r3, [r7, #24]
 800317c:	e00c      	b.n	8003198 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	b2da      	uxtb	r2, r3
 8003186:	8a7b      	ldrh	r3, [r7, #18]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4013      	ands	r3, r2
 800318c:	b2da      	uxtb	r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3301      	adds	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1c6      	bne.n	8003144 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80031e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	609a      	str	r2, [r3, #8]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_UART_Abort+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0210 	bic.w	r2, r2, #16
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003214:	2b80      	cmp	r3, #128	; 0x80
 8003216:	d125      	bne.n	8003264 <HAL_UART_Abort+0x9a>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003226:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d019      	beq.n	8003264 <HAL_UART_Abort+0x9a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003234:	2200      	movs	r2, #0
 8003236:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe f858 	bl	80012f2 <HAL_DMA_Abort>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <HAL_UART_Abort+0x9a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe f8c0 	bl	80013d2 <HAL_DMA_GetError>
 8003252:	4603      	mov	r3, r0
 8003254:	2b20      	cmp	r3, #32
 8003256:	d105      	bne.n	8003264 <HAL_UART_Abort+0x9a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2210      	movs	r2, #16
 800325c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e04e      	b.n	8003302 <HAL_UART_Abort+0x138>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d125      	bne.n	80032be <HAL_UART_Abort+0xf4>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003280:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	2b00      	cmp	r3, #0
 8003288:	d019      	beq.n	80032be <HAL_UART_Abort+0xf4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	2200      	movs	r2, #0
 8003290:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe f82b 	bl	80012f2 <HAL_DMA_Abort>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <HAL_UART_Abort+0xf4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe f893 	bl	80013d2 <HAL_DMA_GetError>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d105      	bne.n	80032be <HAL_UART_Abort+0xf4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2210      	movs	r2, #16
 80032b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e021      	b.n	8003302 <HAL_UART_Abort+0x138>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	220f      	movs	r2, #15
 80032d4:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699a      	ldr	r2, [r3, #24]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0208 	orr.w	r2, r2, #8
 80032e4:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003316:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4ba6      	ldr	r3, [pc, #664]	; (80035f4 <UART_SetConfig+0x2c4>)
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	6979      	ldr	r1, [r7, #20]
 8003364:	430b      	orrs	r3, r1
 8003366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a94      	ldr	r2, [pc, #592]	; (80035f8 <UART_SetConfig+0x2c8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d120      	bne.n	80033ee <UART_SetConfig+0xbe>
 80033ac:	4b93      	ldr	r3, [pc, #588]	; (80035fc <UART_SetConfig+0x2cc>)
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d816      	bhi.n	80033e8 <UART_SetConfig+0xb8>
 80033ba:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <UART_SetConfig+0x90>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	080033dd 	.word	0x080033dd
 80033c8:	080033d7 	.word	0x080033d7
 80033cc:	080033e3 	.word	0x080033e3
 80033d0:	2301      	movs	r3, #1
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e150      	b.n	8003678 <UART_SetConfig+0x348>
 80033d6:	2302      	movs	r3, #2
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e14d      	b.n	8003678 <UART_SetConfig+0x348>
 80033dc:	2304      	movs	r3, #4
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e14a      	b.n	8003678 <UART_SetConfig+0x348>
 80033e2:	2308      	movs	r3, #8
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e147      	b.n	8003678 <UART_SetConfig+0x348>
 80033e8:	2310      	movs	r3, #16
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e144      	b.n	8003678 <UART_SetConfig+0x348>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a83      	ldr	r2, [pc, #524]	; (8003600 <UART_SetConfig+0x2d0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d132      	bne.n	800345e <UART_SetConfig+0x12e>
 80033f8:	4b80      	ldr	r3, [pc, #512]	; (80035fc <UART_SetConfig+0x2cc>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d828      	bhi.n	8003458 <UART_SetConfig+0x128>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <UART_SetConfig+0xdc>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	08003441 	.word	0x08003441
 8003410:	08003459 	.word	0x08003459
 8003414:	08003459 	.word	0x08003459
 8003418:	08003459 	.word	0x08003459
 800341c:	0800344d 	.word	0x0800344d
 8003420:	08003459 	.word	0x08003459
 8003424:	08003459 	.word	0x08003459
 8003428:	08003459 	.word	0x08003459
 800342c:	08003447 	.word	0x08003447
 8003430:	08003459 	.word	0x08003459
 8003434:	08003459 	.word	0x08003459
 8003438:	08003459 	.word	0x08003459
 800343c:	08003453 	.word	0x08003453
 8003440:	2300      	movs	r3, #0
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e118      	b.n	8003678 <UART_SetConfig+0x348>
 8003446:	2302      	movs	r3, #2
 8003448:	77fb      	strb	r3, [r7, #31]
 800344a:	e115      	b.n	8003678 <UART_SetConfig+0x348>
 800344c:	2304      	movs	r3, #4
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e112      	b.n	8003678 <UART_SetConfig+0x348>
 8003452:	2308      	movs	r3, #8
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e10f      	b.n	8003678 <UART_SetConfig+0x348>
 8003458:	2310      	movs	r3, #16
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e10c      	b.n	8003678 <UART_SetConfig+0x348>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a68      	ldr	r2, [pc, #416]	; (8003604 <UART_SetConfig+0x2d4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d120      	bne.n	80034aa <UART_SetConfig+0x17a>
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <UART_SetConfig+0x2cc>)
 800346a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003472:	2b30      	cmp	r3, #48	; 0x30
 8003474:	d013      	beq.n	800349e <UART_SetConfig+0x16e>
 8003476:	2b30      	cmp	r3, #48	; 0x30
 8003478:	d814      	bhi.n	80034a4 <UART_SetConfig+0x174>
 800347a:	2b20      	cmp	r3, #32
 800347c:	d009      	beq.n	8003492 <UART_SetConfig+0x162>
 800347e:	2b20      	cmp	r3, #32
 8003480:	d810      	bhi.n	80034a4 <UART_SetConfig+0x174>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <UART_SetConfig+0x15c>
 8003486:	2b10      	cmp	r3, #16
 8003488:	d006      	beq.n	8003498 <UART_SetConfig+0x168>
 800348a:	e00b      	b.n	80034a4 <UART_SetConfig+0x174>
 800348c:	2300      	movs	r3, #0
 800348e:	77fb      	strb	r3, [r7, #31]
 8003490:	e0f2      	b.n	8003678 <UART_SetConfig+0x348>
 8003492:	2302      	movs	r3, #2
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e0ef      	b.n	8003678 <UART_SetConfig+0x348>
 8003498:	2304      	movs	r3, #4
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e0ec      	b.n	8003678 <UART_SetConfig+0x348>
 800349e:	2308      	movs	r3, #8
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e0e9      	b.n	8003678 <UART_SetConfig+0x348>
 80034a4:	2310      	movs	r3, #16
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e0e6      	b.n	8003678 <UART_SetConfig+0x348>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a56      	ldr	r2, [pc, #344]	; (8003608 <UART_SetConfig+0x2d8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d120      	bne.n	80034f6 <UART_SetConfig+0x1c6>
 80034b4:	4b51      	ldr	r3, [pc, #324]	; (80035fc <UART_SetConfig+0x2cc>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034be:	2bc0      	cmp	r3, #192	; 0xc0
 80034c0:	d013      	beq.n	80034ea <UART_SetConfig+0x1ba>
 80034c2:	2bc0      	cmp	r3, #192	; 0xc0
 80034c4:	d814      	bhi.n	80034f0 <UART_SetConfig+0x1c0>
 80034c6:	2b80      	cmp	r3, #128	; 0x80
 80034c8:	d009      	beq.n	80034de <UART_SetConfig+0x1ae>
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d810      	bhi.n	80034f0 <UART_SetConfig+0x1c0>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <UART_SetConfig+0x1a8>
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d006      	beq.n	80034e4 <UART_SetConfig+0x1b4>
 80034d6:	e00b      	b.n	80034f0 <UART_SetConfig+0x1c0>
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e0cc      	b.n	8003678 <UART_SetConfig+0x348>
 80034de:	2302      	movs	r3, #2
 80034e0:	77fb      	strb	r3, [r7, #31]
 80034e2:	e0c9      	b.n	8003678 <UART_SetConfig+0x348>
 80034e4:	2304      	movs	r3, #4
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e0c6      	b.n	8003678 <UART_SetConfig+0x348>
 80034ea:	2308      	movs	r3, #8
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e0c3      	b.n	8003678 <UART_SetConfig+0x348>
 80034f0:	2310      	movs	r3, #16
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e0c0      	b.n	8003678 <UART_SetConfig+0x348>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a44      	ldr	r2, [pc, #272]	; (800360c <UART_SetConfig+0x2dc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d125      	bne.n	800354c <UART_SetConfig+0x21c>
 8003500:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <UART_SetConfig+0x2cc>)
 8003502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350e:	d017      	beq.n	8003540 <UART_SetConfig+0x210>
 8003510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003514:	d817      	bhi.n	8003546 <UART_SetConfig+0x216>
 8003516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351a:	d00b      	beq.n	8003534 <UART_SetConfig+0x204>
 800351c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003520:	d811      	bhi.n	8003546 <UART_SetConfig+0x216>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <UART_SetConfig+0x1fe>
 8003526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352a:	d006      	beq.n	800353a <UART_SetConfig+0x20a>
 800352c:	e00b      	b.n	8003546 <UART_SetConfig+0x216>
 800352e:	2300      	movs	r3, #0
 8003530:	77fb      	strb	r3, [r7, #31]
 8003532:	e0a1      	b.n	8003678 <UART_SetConfig+0x348>
 8003534:	2302      	movs	r3, #2
 8003536:	77fb      	strb	r3, [r7, #31]
 8003538:	e09e      	b.n	8003678 <UART_SetConfig+0x348>
 800353a:	2304      	movs	r3, #4
 800353c:	77fb      	strb	r3, [r7, #31]
 800353e:	e09b      	b.n	8003678 <UART_SetConfig+0x348>
 8003540:	2308      	movs	r3, #8
 8003542:	77fb      	strb	r3, [r7, #31]
 8003544:	e098      	b.n	8003678 <UART_SetConfig+0x348>
 8003546:	2310      	movs	r3, #16
 8003548:	77fb      	strb	r3, [r7, #31]
 800354a:	e095      	b.n	8003678 <UART_SetConfig+0x348>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <UART_SetConfig+0x2e0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d125      	bne.n	80035a2 <UART_SetConfig+0x272>
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <UART_SetConfig+0x2cc>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003564:	d017      	beq.n	8003596 <UART_SetConfig+0x266>
 8003566:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800356a:	d817      	bhi.n	800359c <UART_SetConfig+0x26c>
 800356c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003570:	d00b      	beq.n	800358a <UART_SetConfig+0x25a>
 8003572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003576:	d811      	bhi.n	800359c <UART_SetConfig+0x26c>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <UART_SetConfig+0x254>
 800357c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003580:	d006      	beq.n	8003590 <UART_SetConfig+0x260>
 8003582:	e00b      	b.n	800359c <UART_SetConfig+0x26c>
 8003584:	2301      	movs	r3, #1
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e076      	b.n	8003678 <UART_SetConfig+0x348>
 800358a:	2302      	movs	r3, #2
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e073      	b.n	8003678 <UART_SetConfig+0x348>
 8003590:	2304      	movs	r3, #4
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e070      	b.n	8003678 <UART_SetConfig+0x348>
 8003596:	2308      	movs	r3, #8
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e06d      	b.n	8003678 <UART_SetConfig+0x348>
 800359c:	2310      	movs	r3, #16
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e06a      	b.n	8003678 <UART_SetConfig+0x348>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <UART_SetConfig+0x2e4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d138      	bne.n	800361e <UART_SetConfig+0x2ee>
 80035ac:	4b13      	ldr	r3, [pc, #76]	; (80035fc <UART_SetConfig+0x2cc>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80035b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035ba:	d017      	beq.n	80035ec <UART_SetConfig+0x2bc>
 80035bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80035c0:	d82a      	bhi.n	8003618 <UART_SetConfig+0x2e8>
 80035c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c6:	d00b      	beq.n	80035e0 <UART_SetConfig+0x2b0>
 80035c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035cc:	d824      	bhi.n	8003618 <UART_SetConfig+0x2e8>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <UART_SetConfig+0x2aa>
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	d006      	beq.n	80035e6 <UART_SetConfig+0x2b6>
 80035d8:	e01e      	b.n	8003618 <UART_SetConfig+0x2e8>
 80035da:	2300      	movs	r3, #0
 80035dc:	77fb      	strb	r3, [r7, #31]
 80035de:	e04b      	b.n	8003678 <UART_SetConfig+0x348>
 80035e0:	2302      	movs	r3, #2
 80035e2:	77fb      	strb	r3, [r7, #31]
 80035e4:	e048      	b.n	8003678 <UART_SetConfig+0x348>
 80035e6:	2304      	movs	r3, #4
 80035e8:	77fb      	strb	r3, [r7, #31]
 80035ea:	e045      	b.n	8003678 <UART_SetConfig+0x348>
 80035ec:	2308      	movs	r3, #8
 80035ee:	77fb      	strb	r3, [r7, #31]
 80035f0:	e042      	b.n	8003678 <UART_SetConfig+0x348>
 80035f2:	bf00      	nop
 80035f4:	efff69f3 	.word	0xefff69f3
 80035f8:	40011000 	.word	0x40011000
 80035fc:	40023800 	.word	0x40023800
 8003600:	40004400 	.word	0x40004400
 8003604:	40004800 	.word	0x40004800
 8003608:	40004c00 	.word	0x40004c00
 800360c:	40005000 	.word	0x40005000
 8003610:	40011400 	.word	0x40011400
 8003614:	40007800 	.word	0x40007800
 8003618:	2310      	movs	r3, #16
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e02c      	b.n	8003678 <UART_SetConfig+0x348>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a72      	ldr	r2, [pc, #456]	; (80037ec <UART_SetConfig+0x4bc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d125      	bne.n	8003674 <UART_SetConfig+0x344>
 8003628:	4b71      	ldr	r3, [pc, #452]	; (80037f0 <UART_SetConfig+0x4c0>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003632:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003636:	d017      	beq.n	8003668 <UART_SetConfig+0x338>
 8003638:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800363c:	d817      	bhi.n	800366e <UART_SetConfig+0x33e>
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003642:	d00b      	beq.n	800365c <UART_SetConfig+0x32c>
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003648:	d811      	bhi.n	800366e <UART_SetConfig+0x33e>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <UART_SetConfig+0x326>
 800364e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003652:	d006      	beq.n	8003662 <UART_SetConfig+0x332>
 8003654:	e00b      	b.n	800366e <UART_SetConfig+0x33e>
 8003656:	2300      	movs	r3, #0
 8003658:	77fb      	strb	r3, [r7, #31]
 800365a:	e00d      	b.n	8003678 <UART_SetConfig+0x348>
 800365c:	2302      	movs	r3, #2
 800365e:	77fb      	strb	r3, [r7, #31]
 8003660:	e00a      	b.n	8003678 <UART_SetConfig+0x348>
 8003662:	2304      	movs	r3, #4
 8003664:	77fb      	strb	r3, [r7, #31]
 8003666:	e007      	b.n	8003678 <UART_SetConfig+0x348>
 8003668:	2308      	movs	r3, #8
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e004      	b.n	8003678 <UART_SetConfig+0x348>
 800366e:	2310      	movs	r3, #16
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e001      	b.n	8003678 <UART_SetConfig+0x348>
 8003674:	2310      	movs	r3, #16
 8003676:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003680:	d15c      	bne.n	800373c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8003682:	7ffb      	ldrb	r3, [r7, #31]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d828      	bhi.n	80036da <UART_SetConfig+0x3aa>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0x360>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036b5 	.word	0x080036b5
 8003694:	080036bd 	.word	0x080036bd
 8003698:	080036c5 	.word	0x080036c5
 800369c:	080036db 	.word	0x080036db
 80036a0:	080036cb 	.word	0x080036cb
 80036a4:	080036db 	.word	0x080036db
 80036a8:	080036db 	.word	0x080036db
 80036ac:	080036db 	.word	0x080036db
 80036b0:	080036d3 	.word	0x080036d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b4:	f7fe ff88 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80036b8:	61b8      	str	r0, [r7, #24]
        break;
 80036ba:	e013      	b.n	80036e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036bc:	f7fe ff98 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 80036c0:	61b8      	str	r0, [r7, #24]
        break;
 80036c2:	e00f      	b.n	80036e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c4:	4b4b      	ldr	r3, [pc, #300]	; (80037f4 <UART_SetConfig+0x4c4>)
 80036c6:	61bb      	str	r3, [r7, #24]
        break;
 80036c8:	e00c      	b.n	80036e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ca:	f7fe feab 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80036ce:	61b8      	str	r0, [r7, #24]
        break;
 80036d0:	e008      	b.n	80036e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d6:	61bb      	str	r3, [r7, #24]
        break;
 80036d8:	e004      	b.n	80036e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	77bb      	strb	r3, [r7, #30]
        break;
 80036e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d074      	beq.n	80037d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	005a      	lsls	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b0f      	cmp	r3, #15
 8003706:	d916      	bls.n	8003736 <UART_SetConfig+0x406>
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d212      	bcs.n	8003736 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	b29b      	uxth	r3, r3
 8003714:	f023 030f 	bic.w	r3, r3, #15
 8003718:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	b29b      	uxth	r3, r3
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	b29a      	uxth	r2, r3
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	4313      	orrs	r3, r2
 800372a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	89fa      	ldrh	r2, [r7, #14]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	e04e      	b.n	80037d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	77bb      	strb	r3, [r7, #30]
 800373a:	e04b      	b.n	80037d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800373c:	7ffb      	ldrb	r3, [r7, #31]
 800373e:	2b08      	cmp	r3, #8
 8003740:	d827      	bhi.n	8003792 <UART_SetConfig+0x462>
 8003742:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <UART_SetConfig+0x418>)
 8003744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003748:	0800376d 	.word	0x0800376d
 800374c:	08003775 	.word	0x08003775
 8003750:	0800377d 	.word	0x0800377d
 8003754:	08003793 	.word	0x08003793
 8003758:	08003783 	.word	0x08003783
 800375c:	08003793 	.word	0x08003793
 8003760:	08003793 	.word	0x08003793
 8003764:	08003793 	.word	0x08003793
 8003768:	0800378b 	.word	0x0800378b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800376c:	f7fe ff2c 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 8003770:	61b8      	str	r0, [r7, #24]
        break;
 8003772:	e013      	b.n	800379c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003774:	f7fe ff3c 	bl	80025f0 <HAL_RCC_GetPCLK2Freq>
 8003778:	61b8      	str	r0, [r7, #24]
        break;
 800377a:	e00f      	b.n	800379c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <UART_SetConfig+0x4c4>)
 800377e:	61bb      	str	r3, [r7, #24]
        break;
 8003780:	e00c      	b.n	800379c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7fe fe4f 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 8003786:	61b8      	str	r0, [r7, #24]
        break;
 8003788:	e008      	b.n	800379c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378e:	61bb      	str	r3, [r7, #24]
        break;
 8003790:	e004      	b.n	800379c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	77bb      	strb	r3, [r7, #30]
        break;
 800379a:	bf00      	nop
    }

    if (pclk != 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d018      	beq.n	80037d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085a      	lsrs	r2, r3, #1
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	441a      	add	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	d908      	bls.n	80037d0 <UART_SetConfig+0x4a0>
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d204      	bcs.n	80037d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	e001      	b.n	80037d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40007c00 	.word	0x40007c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400

080037f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01a      	beq.n	800390e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038f6:	d10a      	bne.n	800390e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800394c:	f7fd fbe0 	bl	8001110 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d10e      	bne.n	800397e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f82d 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e023      	b.n	80039c6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d10e      	bne.n	80039aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f817 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e00d      	b.n	80039c6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039de:	e05e      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d05a      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e8:	f7fd fb92 	bl	8001110 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <UART_WaitOnFlagUntilTimeout+0x30>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11b      	bne.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e043      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02c      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a52:	d124      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e00f      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d091      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <__libc_init_array>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	4d0d      	ldr	r5, [pc, #52]	; (8003b00 <__libc_init_array+0x38>)
 8003acc:	4c0d      	ldr	r4, [pc, #52]	; (8003b04 <__libc_init_array+0x3c>)
 8003ace:	1b64      	subs	r4, r4, r5
 8003ad0:	10a4      	asrs	r4, r4, #2
 8003ad2:	2600      	movs	r6, #0
 8003ad4:	42a6      	cmp	r6, r4
 8003ad6:	d109      	bne.n	8003aec <__libc_init_array+0x24>
 8003ad8:	4d0b      	ldr	r5, [pc, #44]	; (8003b08 <__libc_init_array+0x40>)
 8003ada:	4c0c      	ldr	r4, [pc, #48]	; (8003b0c <__libc_init_array+0x44>)
 8003adc:	f000 f820 	bl	8003b20 <_init>
 8003ae0:	1b64      	subs	r4, r4, r5
 8003ae2:	10a4      	asrs	r4, r4, #2
 8003ae4:	2600      	movs	r6, #0
 8003ae6:	42a6      	cmp	r6, r4
 8003ae8:	d105      	bne.n	8003af6 <__libc_init_array+0x2e>
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af0:	4798      	blx	r3
 8003af2:	3601      	adds	r6, #1
 8003af4:	e7ee      	b.n	8003ad4 <__libc_init_array+0xc>
 8003af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003afa:	4798      	blx	r3
 8003afc:	3601      	adds	r6, #1
 8003afe:	e7f2      	b.n	8003ae6 <__libc_init_array+0x1e>
 8003b00:	08003c54 	.word	0x08003c54
 8003b04:	08003c54 	.word	0x08003c54
 8003b08:	08003c54 	.word	0x08003c54
 8003b0c:	08003c58 	.word	0x08003c58

08003b10 <memset>:
 8003b10:	4402      	add	r2, r0
 8003b12:	4603      	mov	r3, r0
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d100      	bne.n	8003b1a <memset+0xa>
 8003b18:	4770      	bx	lr
 8003b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1e:	e7f9      	b.n	8003b14 <memset+0x4>

08003b20 <_init>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	bf00      	nop
 8003b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b26:	bc08      	pop	{r3}
 8003b28:	469e      	mov	lr, r3
 8003b2a:	4770      	bx	lr

08003b2c <_fini>:
 8003b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2e:	bf00      	nop
 8003b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b32:	bc08      	pop	{r3}
 8003b34:	469e      	mov	lr, r3
 8003b36:	4770      	bx	lr
